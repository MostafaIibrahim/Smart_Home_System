
Smart_House_Slave_V.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002fb2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000116  00800060  00002fb2  00003046  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800176  00800176  0000315c  2**0
                  ALLOC
  3 .stab         00002cd0  00000000  00000000  0000315c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000016b7  00000000  00000000  00005e2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  000074e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00007683  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007875  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  00009c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000b006  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000c1dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c39c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c692  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000d000  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 36 13 	jmp	0x266c	; 0x266c <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 35 10 	jmp	0x206a	; 0x206a <__vector_10>
      2c:	0c 94 02 10 	jmp	0x2004	; 0x2004 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 eb       	ldi	r30, 0xB2	; 178
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 37       	cpi	r26, 0x76	; 118
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e7       	ldi	r26, 0x76	; 118
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 37       	cpi	r26, 0x7C	; 124
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 07 	call	0xe2e	; 0xe2e <main>
      8a:	0c 94 d7 17 	jmp	0x2fae	; 0x2fae <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ac 17 	jmp	0x2f58	; 0x2f58 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c8 17 	jmp	0x2f90	; 0x2f90 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ac 17 	jmp	0x2f58	; 0x2f58 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c8 17 	jmp	0x2f90	; 0x2f90 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 a0 17 	jmp	0x2f40	; 0x2f40 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bc 17 	jmp	0x2f78	; 0x2f78 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a8 17 	jmp	0x2f50	; 0x2f50 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 c4 17 	jmp	0x2f88	; 0x2f88 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ac 17 	jmp	0x2f58	; 0x2f58 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c8 17 	jmp	0x2f90	; 0x2f90 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ac 17 	jmp	0x2f58	; 0x2f58 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c8 17 	jmp	0x2f90	; 0x2f90 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ac 17 	jmp	0x2f58	; 0x2f58 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c8 17 	jmp	0x2f90	; 0x2f90 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 b0 17 	jmp	0x2f60	; 0x2f60 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 cc 17 	jmp	0x2f98	; 0x2f98 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 a8 17 	jmp	0x2f50	; 0x2f50 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 c4 17 	jmp	0x2f88	; 0x2f88 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <main>:
#define READY        0xCC
#define FINISHED     0xCD
u8 g_flag = 0 ;
u8 Read_Spi = 0 ;
void ISR_TIMER(void);
int main (){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	65 97       	sbiw	r28, 0x15	; 21
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61

	u8 STEPPER_CwFlag = 0 ;
     e42:	1d 82       	std	Y+5, r1	; 0x05
	u16 Number_Iteration , MAX_Iteration =  270/FULL_STEP  ;
     e44:	81 e8       	ldi	r24, 0x81	; 129
     e46:	91 e0       	ldi	r25, 0x01	; 1
     e48:	9a 83       	std	Y+2, r25	; 0x02
     e4a:	89 83       	std	Y+1, r24	; 0x01
	SPI_ConfigType SPI_config = {RISING, LEADING_EDGE, F_CPU_64A};
     e4c:	9e 01       	movw	r18, r28
     e4e:	2a 5f       	subi	r18, 0xFA	; 250
     e50:	3f 4f       	sbci	r19, 0xFF	; 255
     e52:	3a 8b       	std	Y+18, r19	; 0x12
     e54:	29 8b       	std	Y+17, r18	; 0x11
     e56:	82 e7       	ldi	r24, 0x72	; 114
     e58:	91 e0       	ldi	r25, 0x01	; 1
     e5a:	9c 8b       	std	Y+20, r25	; 0x14
     e5c:	8b 8b       	std	Y+19, r24	; 0x13
     e5e:	93 e0       	ldi	r25, 0x03	; 3
     e60:	9d 8b       	std	Y+21, r25	; 0x15
     e62:	ab 89       	ldd	r26, Y+19	; 0x13
     e64:	bc 89       	ldd	r27, Y+20	; 0x14
     e66:	0c 90       	ld	r0, X
     e68:	eb 89       	ldd	r30, Y+19	; 0x13
     e6a:	fc 89       	ldd	r31, Y+20	; 0x14
     e6c:	31 96       	adiw	r30, 0x01	; 1
     e6e:	fc 8b       	std	Y+20, r31	; 0x14
     e70:	eb 8b       	std	Y+19, r30	; 0x13
     e72:	a9 89       	ldd	r26, Y+17	; 0x11
     e74:	ba 89       	ldd	r27, Y+18	; 0x12
     e76:	0c 92       	st	X, r0
     e78:	e9 89       	ldd	r30, Y+17	; 0x11
     e7a:	fa 89       	ldd	r31, Y+18	; 0x12
     e7c:	31 96       	adiw	r30, 0x01	; 1
     e7e:	fa 8b       	std	Y+18, r31	; 0x12
     e80:	e9 8b       	std	Y+17, r30	; 0x11
     e82:	fd 89       	ldd	r31, Y+21	; 0x15
     e84:	f1 50       	subi	r31, 0x01	; 1
     e86:	fd 8b       	std	Y+21, r31	; 0x15
     e88:	2d 89       	ldd	r18, Y+21	; 0x15
     e8a:	22 23       	and	r18, r18
     e8c:	51 f7       	brne	.-44     	; 0xe62 <main+0x34>
	TIMER0_Config   config_timer = {TIMER0_NORMAL_MODE,NO_CLK,6};
     e8e:	86 e0       	ldi	r24, 0x06	; 6
     e90:	fe 01       	movw	r30, r28
     e92:	39 96       	adiw	r30, 0x09	; 9
     e94:	df 01       	movw	r26, r30
     e96:	28 2f       	mov	r18, r24
     e98:	1d 92       	st	X+, r1
     e9a:	2a 95       	dec	r18
     e9c:	e9 f7       	brne	.-6      	; 0xe98 <main+0x6a>
     e9e:	86 e0       	ldi	r24, 0x06	; 6
     ea0:	8b 87       	std	Y+11, r24	; 0x0b

	M_TIMER0_voidInit(&config_timer);
     ea2:	ce 01       	movw	r24, r28
     ea4:	09 96       	adiw	r24, 0x09	; 9
     ea6:	0e 94 c2 0d 	call	0x1b84	; 0x1b84 <M_TIMER0_voidInit>
	M_TIMER0_voidSetCallBack(ISR_TIMER);
     eaa:	82 ed       	ldi	r24, 0xD2	; 210
     eac:	97 e0       	ldi	r25, 0x07	; 7
     eae:	0e 94 db 0f 	call	0x1fb6	; 0x1fb6 <M_TIMER0_voidSetCallBack>
	Port_voidInit();
     eb2:	0e 94 4b 09 	call	0x1296	; 0x1296 <Port_voidInit>
	SERVO_voidInit();
     eb6:	0e 94 69 13 	call	0x26d2	; 0x26d2 <SERVO_voidInit>
	M_SPI_initSlave(&SPI_config);
     eba:	ce 01       	movw	r24, r28
     ebc:	06 96       	adiw	r24, 0x06	; 6
     ebe:	0e 94 f2 13 	call	0x27e4	; 0x27e4 <M_SPI_initSlave>
	MGIE_voidEnable();
     ec2:	0e 94 b3 14 	call	0x2966	; 0x2966 <MGIE_voidEnable>
	while(M_SPI_sendReceiveByte(0xFF) != READY);
     ec6:	8f ef       	ldi	r24, 0xFF	; 255
     ec8:	0e 94 45 14 	call	0x288a	; 0x288a <M_SPI_sendReceiveByte>
     ecc:	8c 3c       	cpi	r24, 0xCC	; 204
     ece:	d9 f7       	brne	.-10     	; 0xec6 <main+0x98>
	M_TIMER0_voidSelectPrescaler(PRESC_8);
     ed0:	82 e0       	ldi	r24, 0x02	; 2
     ed2:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <M_TIMER0_voidSelectPrescaler>
	while(1){
		Read_Spi = M_SPI_sendReceiveByte(0xFF);
     ed6:	8f ef       	ldi	r24, 0xFF	; 255
     ed8:	0e 94 45 14 	call	0x288a	; 0x288a <M_SPI_sendReceiveByte>
     edc:	80 93 77 01 	sts	0x0177, r24
		switch (Read_Spi){
     ee0:	80 91 77 01 	lds	r24, 0x0177
     ee4:	a8 2f       	mov	r26, r24
     ee6:	b0 e0       	ldi	r27, 0x00	; 0
     ee8:	b8 8b       	std	Y+16, r27	; 0x10
     eea:	af 87       	std	Y+15, r26	; 0x0f
     eec:	ef 85       	ldd	r30, Y+15	; 0x0f
     eee:	f8 89       	ldd	r31, Y+16	; 0x10
     ef0:	e3 33       	cpi	r30, 0x33	; 51
     ef2:	f1 05       	cpc	r31, r1
     ef4:	51 f1       	breq	.+84     	; 0xf4a <main+0x11c>
     ef6:	2f 85       	ldd	r18, Y+15	; 0x0f
     ef8:	38 89       	ldd	r19, Y+16	; 0x10
     efa:	24 33       	cpi	r18, 0x34	; 52
     efc:	31 05       	cpc	r19, r1
     efe:	5c f4       	brge	.+22     	; 0xf16 <main+0xe8>
     f00:	8f 85       	ldd	r24, Y+15	; 0x0f
     f02:	98 89       	ldd	r25, Y+16	; 0x10
     f04:	81 33       	cpi	r24, 0x31	; 49
     f06:	91 05       	cpc	r25, r1
     f08:	b1 f0       	breq	.+44     	; 0xf36 <main+0x108>
     f0a:	af 85       	ldd	r26, Y+15	; 0x0f
     f0c:	b8 89       	ldd	r27, Y+16	; 0x10
     f0e:	a2 33       	cpi	r26, 0x32	; 50
     f10:	b1 05       	cpc	r27, r1
     f12:	b1 f0       	breq	.+44     	; 0xf40 <main+0x112>
     f14:	25 c0       	rjmp	.+74     	; 0xf60 <main+0x132>
     f16:	ef 85       	ldd	r30, Y+15	; 0x0f
     f18:	f8 89       	ldd	r31, Y+16	; 0x10
     f1a:	e5 33       	cpi	r30, 0x35	; 53
     f1c:	f1 05       	cpc	r31, r1
     f1e:	d9 f0       	breq	.+54     	; 0xf56 <main+0x128>
     f20:	2f 85       	ldd	r18, Y+15	; 0x0f
     f22:	38 89       	ldd	r19, Y+16	; 0x10
     f24:	25 33       	cpi	r18, 0x35	; 53
     f26:	31 05       	cpc	r19, r1
     f28:	9c f0       	brlt	.+38     	; 0xf50 <main+0x122>
     f2a:	8f 85       	ldd	r24, Y+15	; 0x0f
     f2c:	98 89       	ldd	r25, Y+16	; 0x10
     f2e:	86 33       	cpi	r24, 0x36	; 54
     f30:	91 05       	cpc	r25, r1
     f32:	a1 f0       	breq	.+40     	; 0xf5c <main+0x12e>
     f34:	15 c0       	rjmp	.+42     	; 0xf60 <main+0x132>
		case '1':
			SERVO_voidEnable(MAX_180_ANGEL);
     f36:	86 ef       	ldi	r24, 0xF6	; 246
     f38:	99 e0       	ldi	r25, 0x09	; 9
     f3a:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SERVO_voidEnable>
     f3e:	10 c0       	rjmp	.+32     	; 0xf60 <main+0x132>
			break;
		case '2':
			SERVO_voidEnable(MIN_ZERO_ANGEL);
     f40:	82 ec       	ldi	r24, 0xC2	; 194
     f42:	91 e0       	ldi	r25, 0x01	; 1
     f44:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <SERVO_voidEnable>
     f48:	0b c0       	rjmp	.+22     	; 0xf60 <main+0x132>
			break;
		case '3':
			DCMOTOR_voidCWRotate();
     f4a:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <DCMOTOR_voidCWRotate>
     f4e:	08 c0       	rjmp	.+16     	; 0xf60 <main+0x132>
			break;
		case '4':
			DCMOTOR_voidStop();
     f50:	0e 94 00 08 	call	0x1000	; 0x1000 <DCMOTOR_voidStop>
     f54:	05 c0       	rjmp	.+10     	; 0xf60 <main+0x132>
			break;
		case '5':
			STEPPER_CwFlag = 1 ;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	8d 83       	std	Y+5, r24	; 0x05
     f5a:	02 c0       	rjmp	.+4      	; 0xf60 <main+0x132>
			break;
		case '6':
			STEPPER_CwFlag = 2 ;
     f5c:	82 e0       	ldi	r24, 0x02	; 2
     f5e:	8d 83       	std	Y+5, r24	; 0x05
			//			if(g_flag == 1){
			//			}else if(g_flag == 2){
			//				g_flag = 0 ;
			//			}
		}
		if(Number_Iteration < MAX_Iteration){
     f60:	2b 81       	ldd	r18, Y+3	; 0x03
     f62:	3c 81       	ldd	r19, Y+4	; 0x04
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	9a 81       	ldd	r25, Y+2	; 0x02
     f68:	28 17       	cp	r18, r24
     f6a:	39 07       	cpc	r19, r25
     f6c:	b8 f4       	brcc	.+46     	; 0xf9c <main+0x16e>
			if(STEPPER_CwFlag == 1){
     f6e:	8d 81       	ldd	r24, Y+5	; 0x05
     f70:	81 30       	cpi	r24, 0x01	; 1
     f72:	41 f4       	brne	.+16     	; 0xf84 <main+0x156>
				Number_Iteration++;
     f74:	8b 81       	ldd	r24, Y+3	; 0x03
     f76:	9c 81       	ldd	r25, Y+4	; 0x04
     f78:	01 96       	adiw	r24, 0x01	; 1
     f7a:	9c 83       	std	Y+4, r25	; 0x04
     f7c:	8b 83       	std	Y+3, r24	; 0x03
				STEPMOTOR_oneStepRotation();
     f7e:	0e 94 2e 15 	call	0x2a5c	; 0x2a5c <STEPMOTOR_oneStepRotation>
     f82:	a9 cf       	rjmp	.-174    	; 0xed6 <main+0xa8>
			}
			else if(STEPPER_CwFlag == 2){
     f84:	8d 81       	ldd	r24, Y+5	; 0x05
     f86:	82 30       	cpi	r24, 0x02	; 2
     f88:	09 f0       	breq	.+2      	; 0xf8c <main+0x15e>
     f8a:	a5 cf       	rjmp	.-182    	; 0xed6 <main+0xa8>
				Number_Iteration++;
     f8c:	8b 81       	ldd	r24, Y+3	; 0x03
     f8e:	9c 81       	ldd	r25, Y+4	; 0x04
     f90:	01 96       	adiw	r24, 0x01	; 1
     f92:	9c 83       	std	Y+4, r25	; 0x04
     f94:	8b 83       	std	Y+3, r24	; 0x03
				STEPMOTOR_oneStepRotationACW();
     f96:	0e 94 1f 15 	call	0x2a3e	; 0x2a3e <STEPMOTOR_oneStepRotationACW>
     f9a:	9d cf       	rjmp	.-198    	; 0xed6 <main+0xa8>
			}
		}
		else{
			Number_Iteration = 0 ;
     f9c:	1c 82       	std	Y+4, r1	; 0x04
     f9e:	1b 82       	std	Y+3, r1	; 0x03
			STEPPER_CwFlag = 0 ;
     fa0:	1d 82       	std	Y+5, r1	; 0x05
     fa2:	99 cf       	rjmp	.-206    	; 0xed6 <main+0xa8>

00000fa4 <ISR_TIMER>:
		}
	}
}
void ISR_TIMER(void){
     fa4:	df 93       	push	r29
     fa6:	cf 93       	push	r28
     fa8:	cd b7       	in	r28, 0x3d	; 61
     faa:	de b7       	in	r29, 0x3e	; 62
	M_TIMER0_voidSetPreLoad(6);
     fac:	86 e0       	ldi	r24, 0x06	; 6
     fae:	0e 94 cd 0f 	call	0x1f9a	; 0x1f9a <M_TIMER0_voidSetPreLoad>
	g_flag++;
     fb2:	80 91 76 01 	lds	r24, 0x0176
     fb6:	8f 5f       	subi	r24, 0xFF	; 255
     fb8:	80 93 76 01 	sts	0x0176, r24
	if(g_flag == 100){
     fbc:	80 91 76 01 	lds	r24, 0x0176
     fc0:	84 36       	cpi	r24, 0x64	; 100
     fc2:	29 f4       	brne	.+10     	; 0xfce <ISR_TIMER+0x2a>
		H7SEG_voidDisplayNumber(Read_Spi);
     fc4:	80 91 77 01 	lds	r24, 0x0177
     fc8:	0e 94 0c 08 	call	0x1018	; 0x1018 <H7SEG_voidDisplayNumber>
     fcc:	0a c0       	rjmp	.+20     	; 0xfe2 <ISR_TIMER+0x3e>
	}else if(g_flag == 120){
     fce:	80 91 76 01 	lds	r24, 0x0176
     fd2:	88 37       	cpi	r24, 0x78	; 120
     fd4:	31 f4       	brne	.+12     	; 0xfe2 <ISR_TIMER+0x3e>
		g_flag = 0 ;
     fd6:	10 92 76 01 	sts	0x0176, r1
		HLED_voidDisplayLdr(Read_Spi);
     fda:	80 91 77 01 	lds	r24, 0x0177
     fde:	0e 94 3d 09 	call	0x127a	; 0x127a <HLED_voidDisplayLdr>
	}
}
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	08 95       	ret

00000fe8 <DCMOTOR_voidCWRotate>:
#include "DCMOTOR_interface.h"
#include "DCMOTOR_config.h"



void DCMOTOR_voidCWRotate(){
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	cd b7       	in	r28, 0x3d	; 61
     fee:	de b7       	in	r29, 0x3e	; 62
	MDIO_ErrorS_SetPinValue(DCMOTOR_PORT,DCMOTOR_PIN1,DIO_HIGH );
     ff0:	82 e0       	ldi	r24, 0x02	; 2
     ff2:	61 e0       	ldi	r22, 0x01	; 1
     ff4:	41 e0       	ldi	r20, 0x01	; 1
     ff6:	0e 94 01 0b 	call	0x1602	; 0x1602 <MDIO_ErrorS_SetPinValue>
//	_delay_ms(1000);
}
     ffa:	cf 91       	pop	r28
     ffc:	df 91       	pop	r29
     ffe:	08 95       	ret

00001000 <DCMOTOR_voidStop>:
void DCMOTOR_voidStop(){
    1000:	df 93       	push	r29
    1002:	cf 93       	push	r28
    1004:	cd b7       	in	r28, 0x3d	; 61
    1006:	de b7       	in	r29, 0x3e	; 62
	MDIO_ErrorS_SetPinValue(DCMOTOR_PORT,DCMOTOR_PIN1,DIO_LOW );
    1008:	82 e0       	ldi	r24, 0x02	; 2
    100a:	61 e0       	ldi	r22, 0x01	; 1
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	0e 94 01 0b 	call	0x1602	; 0x1602 <MDIO_ErrorS_SetPinValue>

}
    1012:	cf 91       	pop	r28
    1014:	df 91       	pop	r29
    1016:	08 95       	ret

00001018 <H7SEG_voidDisplayNumber>:
#include "H7SEG_private.h"
#include "H7SEG_config.h"

u8 MapNum[10] = {0x40,0x79,0x24,0x30,0x19,0x12,0x02,0x78,0x00,0x10};

void H7SEG_voidDisplayNumber(u8 num){
    1018:	df 93       	push	r29
    101a:	cf 93       	push	r28
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	6f 97       	sbiw	r28, 0x1f	; 31
    1022:	0f b6       	in	r0, 0x3f	; 63
    1024:	f8 94       	cli
    1026:	de bf       	out	0x3e, r29	; 62
    1028:	0f be       	out	0x3f, r0	; 63
    102a:	cd bf       	out	0x3d, r28	; 61
    102c:	8f 8f       	std	Y+31, r24	; 0x1f
	u8 First_digit , Second_digit;
	num &= 0x7F;
    102e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1030:	8f 77       	andi	r24, 0x7F	; 127
    1032:	8f 8f       	std	Y+31, r24	; 0x1f

	First_digit =  MapNum[num%10];
    1034:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1036:	9a e0       	ldi	r25, 0x0A	; 10
    1038:	69 2f       	mov	r22, r25
    103a:	0e 94 94 17 	call	0x2f28	; 0x2f28 <__udivmodqi4>
    103e:	89 2f       	mov	r24, r25
    1040:	88 2f       	mov	r24, r24
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	fc 01       	movw	r30, r24
    1046:	e8 59       	subi	r30, 0x98	; 152
    1048:	fe 4f       	sbci	r31, 0xFE	; 254
    104a:	80 81       	ld	r24, Z
    104c:	8e 8f       	std	Y+30, r24	; 0x1e
	Second_digit = MapNum[num/10] | 0x80;
    104e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1050:	9a e0       	ldi	r25, 0x0A	; 10
    1052:	69 2f       	mov	r22, r25
    1054:	0e 94 94 17 	call	0x2f28	; 0x2f28 <__udivmodqi4>
    1058:	88 2f       	mov	r24, r24
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	fc 01       	movw	r30, r24
    105e:	e8 59       	subi	r30, 0x98	; 152
    1060:	fe 4f       	sbci	r31, 0xFE	; 254
    1062:	80 81       	ld	r24, Z
    1064:	80 68       	ori	r24, 0x80	; 128
    1066:	8d 8f       	std	Y+29, r24	; 0x1d
//	for(u8 i = 0 ; i < 100 ; i++){

		MDIO_ErrorS_SetPinValue(SEVEN_SEG_SEC_ENABLE_PORT,SEVEN_SEG_SEC_ENABLE_PIN,DIO_LOW);
    1068:	81 e0       	ldi	r24, 0x01	; 1
    106a:	67 e0       	ldi	r22, 0x07	; 7
    106c:	40 e0       	ldi	r20, 0x00	; 0
    106e:	0e 94 01 0b 	call	0x1602	; 0x1602 <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(SEVEN_SEG_FIRST_ENABLE_PORT,SEVEN_SEG_FIRST_ENABLE_PIN,DIO_HIGH);
    1072:	82 e0       	ldi	r24, 0x02	; 2
    1074:	60 e0       	ldi	r22, 0x00	; 0
    1076:	41 e0       	ldi	r20, 0x01	; 1
    1078:	0e 94 01 0b 	call	0x1602	; 0x1602 <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPortValue(SEVEN_SEG_DATA_PORT,First_digit);
    107c:	81 e0       	ldi	r24, 0x01	; 1
    107e:	6e 8d       	ldd	r22, Y+30	; 0x1e
    1080:	0e 94 a1 0c 	call	0x1942	; 0x1942 <MDIO_ErrorS_SetPortValue>
    1084:	80 e0       	ldi	r24, 0x00	; 0
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	a0 e0       	ldi	r26, 0x00	; 0
    108a:	b0 e4       	ldi	r27, 0x40	; 64
    108c:	89 8f       	std	Y+25, r24	; 0x19
    108e:	9a 8f       	std	Y+26, r25	; 0x1a
    1090:	ab 8f       	std	Y+27, r26	; 0x1b
    1092:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1094:	69 8d       	ldd	r22, Y+25	; 0x19
    1096:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1098:	8b 8d       	ldd	r24, Y+27	; 0x1b
    109a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	4a ef       	ldi	r20, 0xFA	; 250
    10a2:	54 e4       	ldi	r21, 0x44	; 68
    10a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	8d 8b       	std	Y+21, r24	; 0x15
    10ae:	9e 8b       	std	Y+22, r25	; 0x16
    10b0:	af 8b       	std	Y+23, r26	; 0x17
    10b2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    10b4:	6d 89       	ldd	r22, Y+21	; 0x15
    10b6:	7e 89       	ldd	r23, Y+22	; 0x16
    10b8:	8f 89       	ldd	r24, Y+23	; 0x17
    10ba:	98 8d       	ldd	r25, Y+24	; 0x18
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	40 e8       	ldi	r20, 0x80	; 128
    10c2:	5f e3       	ldi	r21, 0x3F	; 63
    10c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    10c8:	88 23       	and	r24, r24
    10ca:	2c f4       	brge	.+10     	; 0x10d6 <H7SEG_voidDisplayNumber+0xbe>
		__ticks = 1;
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	9c 8b       	std	Y+20, r25	; 0x14
    10d2:	8b 8b       	std	Y+19, r24	; 0x13
    10d4:	3f c0       	rjmp	.+126    	; 0x1154 <H7SEG_voidDisplayNumber+0x13c>
	else if (__tmp > 65535)
    10d6:	6d 89       	ldd	r22, Y+21	; 0x15
    10d8:	7e 89       	ldd	r23, Y+22	; 0x16
    10da:	8f 89       	ldd	r24, Y+23	; 0x17
    10dc:	98 8d       	ldd	r25, Y+24	; 0x18
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	3f ef       	ldi	r19, 0xFF	; 255
    10e2:	4f e7       	ldi	r20, 0x7F	; 127
    10e4:	57 e4       	ldi	r21, 0x47	; 71
    10e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    10ea:	18 16       	cp	r1, r24
    10ec:	4c f5       	brge	.+82     	; 0x1140 <H7SEG_voidDisplayNumber+0x128>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10ee:	69 8d       	ldd	r22, Y+25	; 0x19
    10f0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10f4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10f6:	20 e0       	ldi	r18, 0x00	; 0
    10f8:	30 e0       	ldi	r19, 0x00	; 0
    10fa:	40 e2       	ldi	r20, 0x20	; 32
    10fc:	51 e4       	ldi	r21, 0x41	; 65
    10fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1102:	dc 01       	movw	r26, r24
    1104:	cb 01       	movw	r24, r22
    1106:	bc 01       	movw	r22, r24
    1108:	cd 01       	movw	r24, r26
    110a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    110e:	dc 01       	movw	r26, r24
    1110:	cb 01       	movw	r24, r22
    1112:	9c 8b       	std	Y+20, r25	; 0x14
    1114:	8b 8b       	std	Y+19, r24	; 0x13
    1116:	0f c0       	rjmp	.+30     	; 0x1136 <H7SEG_voidDisplayNumber+0x11e>
    1118:	88 ec       	ldi	r24, 0xC8	; 200
    111a:	90 e0       	ldi	r25, 0x00	; 0
    111c:	9a 8b       	std	Y+18, r25	; 0x12
    111e:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1120:	89 89       	ldd	r24, Y+17	; 0x11
    1122:	9a 89       	ldd	r25, Y+18	; 0x12
    1124:	01 97       	sbiw	r24, 0x01	; 1
    1126:	f1 f7       	brne	.-4      	; 0x1124 <H7SEG_voidDisplayNumber+0x10c>
    1128:	9a 8b       	std	Y+18, r25	; 0x12
    112a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    112c:	8b 89       	ldd	r24, Y+19	; 0x13
    112e:	9c 89       	ldd	r25, Y+20	; 0x14
    1130:	01 97       	sbiw	r24, 0x01	; 1
    1132:	9c 8b       	std	Y+20, r25	; 0x14
    1134:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1136:	8b 89       	ldd	r24, Y+19	; 0x13
    1138:	9c 89       	ldd	r25, Y+20	; 0x14
    113a:	00 97       	sbiw	r24, 0x00	; 0
    113c:	69 f7       	brne	.-38     	; 0x1118 <H7SEG_voidDisplayNumber+0x100>
    113e:	14 c0       	rjmp	.+40     	; 0x1168 <H7SEG_voidDisplayNumber+0x150>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1140:	6d 89       	ldd	r22, Y+21	; 0x15
    1142:	7e 89       	ldd	r23, Y+22	; 0x16
    1144:	8f 89       	ldd	r24, Y+23	; 0x17
    1146:	98 8d       	ldd	r25, Y+24	; 0x18
    1148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    114c:	dc 01       	movw	r26, r24
    114e:	cb 01       	movw	r24, r22
    1150:	9c 8b       	std	Y+20, r25	; 0x14
    1152:	8b 8b       	std	Y+19, r24	; 0x13
    1154:	8b 89       	ldd	r24, Y+19	; 0x13
    1156:	9c 89       	ldd	r25, Y+20	; 0x14
    1158:	98 8b       	std	Y+16, r25	; 0x10
    115a:	8f 87       	std	Y+15, r24	; 0x0f
    115c:	8f 85       	ldd	r24, Y+15	; 0x0f
    115e:	98 89       	ldd	r25, Y+16	; 0x10
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	f1 f7       	brne	.-4      	; 0x1160 <H7SEG_voidDisplayNumber+0x148>
    1164:	98 8b       	std	Y+16, r25	; 0x10
    1166:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2);
		MDIO_ErrorS_SetPinValue(SEVEN_SEG_SEC_ENABLE_PORT,SEVEN_SEG_SEC_ENABLE_PIN,DIO_HIGH);
    1168:	81 e0       	ldi	r24, 0x01	; 1
    116a:	67 e0       	ldi	r22, 0x07	; 7
    116c:	41 e0       	ldi	r20, 0x01	; 1
    116e:	0e 94 01 0b 	call	0x1602	; 0x1602 <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPinValue(SEVEN_SEG_FIRST_ENABLE_PORT,SEVEN_SEG_FIRST_ENABLE_PIN,DIO_LOW);
    1172:	82 e0       	ldi	r24, 0x02	; 2
    1174:	60 e0       	ldi	r22, 0x00	; 0
    1176:	40 e0       	ldi	r20, 0x00	; 0
    1178:	0e 94 01 0b 	call	0x1602	; 0x1602 <MDIO_ErrorS_SetPinValue>
		MDIO_ErrorS_SetPortValue(SEVEN_SEG_DATA_PORT,Second_digit);
    117c:	81 e0       	ldi	r24, 0x01	; 1
    117e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1180:	0e 94 a1 0c 	call	0x1942	; 0x1942 <MDIO_ErrorS_SetPortValue>
    1184:	80 e0       	ldi	r24, 0x00	; 0
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	a0 e0       	ldi	r26, 0x00	; 0
    118a:	b0 e4       	ldi	r27, 0x40	; 64
    118c:	8b 87       	std	Y+11, r24	; 0x0b
    118e:	9c 87       	std	Y+12, r25	; 0x0c
    1190:	ad 87       	std	Y+13, r26	; 0x0d
    1192:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1194:	6b 85       	ldd	r22, Y+11	; 0x0b
    1196:	7c 85       	ldd	r23, Y+12	; 0x0c
    1198:	8d 85       	ldd	r24, Y+13	; 0x0d
    119a:	9e 85       	ldd	r25, Y+14	; 0x0e
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	4a ef       	ldi	r20, 0xFA	; 250
    11a2:	54 e4       	ldi	r21, 0x44	; 68
    11a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	8f 83       	std	Y+7, r24	; 0x07
    11ae:	98 87       	std	Y+8, r25	; 0x08
    11b0:	a9 87       	std	Y+9, r26	; 0x09
    11b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    11b4:	6f 81       	ldd	r22, Y+7	; 0x07
    11b6:	78 85       	ldd	r23, Y+8	; 0x08
    11b8:	89 85       	ldd	r24, Y+9	; 0x09
    11ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	40 e8       	ldi	r20, 0x80	; 128
    11c2:	5f e3       	ldi	r21, 0x3F	; 63
    11c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    11c8:	88 23       	and	r24, r24
    11ca:	2c f4       	brge	.+10     	; 0x11d6 <H7SEG_voidDisplayNumber+0x1be>
		__ticks = 1;
    11cc:	81 e0       	ldi	r24, 0x01	; 1
    11ce:	90 e0       	ldi	r25, 0x00	; 0
    11d0:	9e 83       	std	Y+6, r25	; 0x06
    11d2:	8d 83       	std	Y+5, r24	; 0x05
    11d4:	3f c0       	rjmp	.+126    	; 0x1254 <H7SEG_voidDisplayNumber+0x23c>
	else if (__tmp > 65535)
    11d6:	6f 81       	ldd	r22, Y+7	; 0x07
    11d8:	78 85       	ldd	r23, Y+8	; 0x08
    11da:	89 85       	ldd	r24, Y+9	; 0x09
    11dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	3f ef       	ldi	r19, 0xFF	; 255
    11e2:	4f e7       	ldi	r20, 0x7F	; 127
    11e4:	57 e4       	ldi	r21, 0x47	; 71
    11e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    11ea:	18 16       	cp	r1, r24
    11ec:	4c f5       	brge	.+82     	; 0x1240 <H7SEG_voidDisplayNumber+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    11f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    11f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    11f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    11f6:	20 e0       	ldi	r18, 0x00	; 0
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	40 e2       	ldi	r20, 0x20	; 32
    11fc:	51 e4       	ldi	r21, 0x41	; 65
    11fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1202:	dc 01       	movw	r26, r24
    1204:	cb 01       	movw	r24, r22
    1206:	bc 01       	movw	r22, r24
    1208:	cd 01       	movw	r24, r26
    120a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    120e:	dc 01       	movw	r26, r24
    1210:	cb 01       	movw	r24, r22
    1212:	9e 83       	std	Y+6, r25	; 0x06
    1214:	8d 83       	std	Y+5, r24	; 0x05
    1216:	0f c0       	rjmp	.+30     	; 0x1236 <H7SEG_voidDisplayNumber+0x21e>
    1218:	88 ec       	ldi	r24, 0xC8	; 200
    121a:	90 e0       	ldi	r25, 0x00	; 0
    121c:	9c 83       	std	Y+4, r25	; 0x04
    121e:	8b 83       	std	Y+3, r24	; 0x03
    1220:	8b 81       	ldd	r24, Y+3	; 0x03
    1222:	9c 81       	ldd	r25, Y+4	; 0x04
    1224:	01 97       	sbiw	r24, 0x01	; 1
    1226:	f1 f7       	brne	.-4      	; 0x1224 <H7SEG_voidDisplayNumber+0x20c>
    1228:	9c 83       	std	Y+4, r25	; 0x04
    122a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    122c:	8d 81       	ldd	r24, Y+5	; 0x05
    122e:	9e 81       	ldd	r25, Y+6	; 0x06
    1230:	01 97       	sbiw	r24, 0x01	; 1
    1232:	9e 83       	std	Y+6, r25	; 0x06
    1234:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1236:	8d 81       	ldd	r24, Y+5	; 0x05
    1238:	9e 81       	ldd	r25, Y+6	; 0x06
    123a:	00 97       	sbiw	r24, 0x00	; 0
    123c:	69 f7       	brne	.-38     	; 0x1218 <H7SEG_voidDisplayNumber+0x200>
    123e:	14 c0       	rjmp	.+40     	; 0x1268 <H7SEG_voidDisplayNumber+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1240:	6f 81       	ldd	r22, Y+7	; 0x07
    1242:	78 85       	ldd	r23, Y+8	; 0x08
    1244:	89 85       	ldd	r24, Y+9	; 0x09
    1246:	9a 85       	ldd	r25, Y+10	; 0x0a
    1248:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    124c:	dc 01       	movw	r26, r24
    124e:	cb 01       	movw	r24, r22
    1250:	9e 83       	std	Y+6, r25	; 0x06
    1252:	8d 83       	std	Y+5, r24	; 0x05
    1254:	8d 81       	ldd	r24, Y+5	; 0x05
    1256:	9e 81       	ldd	r25, Y+6	; 0x06
    1258:	9a 83       	std	Y+2, r25	; 0x02
    125a:	89 83       	std	Y+1, r24	; 0x01
    125c:	89 81       	ldd	r24, Y+1	; 0x01
    125e:	9a 81       	ldd	r25, Y+2	; 0x02
    1260:	01 97       	sbiw	r24, 0x01	; 1
    1262:	f1 f7       	brne	.-4      	; 0x1260 <H7SEG_voidDisplayNumber+0x248>
    1264:	9a 83       	std	Y+2, r25	; 0x02
    1266:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
}
    1268:	6f 96       	adiw	r28, 0x1f	; 31
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
    126e:	de bf       	out	0x3e, r29	; 62
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	cd bf       	out	0x3d, r28	; 61
    1274:	cf 91       	pop	r28
    1276:	df 91       	pop	r29
    1278:	08 95       	ret

0000127a <HLED_voidDisplayLdr>:
#include "common_macros.h"
#include "MDIO_interface.h"
#include "HLED_config.h"
#include "HLED_interface.h"

void  HLED_voidDisplayLdr(u8 num){
    127a:	df 93       	push	r29
    127c:	cf 93       	push	r28
    127e:	0f 92       	push	r0
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	89 83       	std	Y+1, r24	; 0x01
	MDIO_ErrorS_SetPortValue(LED_PORT,num);
    1286:	83 e0       	ldi	r24, 0x03	; 3
    1288:	69 81       	ldd	r22, Y+1	; 0x01
    128a:	0e 94 a1 0c 	call	0x1942	; 0x1942 <MDIO_ErrorS_SetPortValue>
}
    128e:	0f 90       	pop	r0
    1290:	cf 91       	pop	r28
    1292:	df 91       	pop	r29
    1294:	08 95       	ret

00001296 <Port_voidInit>:
#include "MDIO_interface.h"
#include "MDIO_registers.h"
#include "MDIO_private.h"
#include "MDIO_config.h"

void Port_voidInit(void){
    1296:	df 93       	push	r29
    1298:	cf 93       	push	r28
    129a:	cd b7       	in	r28, 0x3d	; 61
    129c:	de b7       	in	r29, 0x3e	; 62

	DDRA = PORTA_DIR;
    129e:	ea e3       	ldi	r30, 0x3A	; 58
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	8f ef       	ldi	r24, 0xFF	; 255
    12a4:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    12a6:	e7 e3       	ldi	r30, 0x37	; 55
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	83 e4       	ldi	r24, 0x43	; 67
    12ac:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    12ae:	e4 e3       	ldi	r30, 0x34	; 52
    12b0:	f0 e0       	ldi	r31, 0x00	; 0
    12b2:	8f ef       	ldi	r24, 0xFF	; 255
    12b4:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    12b6:	e1 e3       	ldi	r30, 0x31	; 49
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	8f e2       	ldi	r24, 0x2F	; 47
    12bc:	80 83       	st	Z, r24
	PORTA = PORTA_INITAL_VAL;
    12be:	eb e3       	ldi	r30, 0x3B	; 59
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	10 82       	st	Z, r1
	PORTB = PORTB_INITAL_VAL;
    12c4:	e8 e3       	ldi	r30, 0x38	; 56
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	10 82       	st	Z, r1
	PORTC = PORTC_INITAL_VAL;
    12ca:	e5 e3       	ldi	r30, 0x35	; 53
    12cc:	f0 e0       	ldi	r31, 0x00	; 0
    12ce:	10 82       	st	Z, r1
	PORTD = PORTD_INITAL_VAL;
    12d0:	e2 e3       	ldi	r30, 0x32	; 50
    12d2:	f0 e0       	ldi	r31, 0x00	; 0
    12d4:	10 82       	st	Z, r1





}
    12d6:	cf 91       	pop	r28
    12d8:	df 91       	pop	r29
    12da:	08 95       	ret

000012dc <MDIO_ErrorS_EnablePinPullUp>:
Error_State_t MDIO_ErrorS_EnablePinPullUp( u8 Copy_u8Port , u8 Copy_u8Pin){
    12dc:	df 93       	push	r29
    12de:	cf 93       	push	r28
    12e0:	00 d0       	rcall	.+0      	; 0x12e2 <MDIO_ErrorS_EnablePinPullUp+0x6>
    12e2:	00 d0       	rcall	.+0      	; 0x12e4 <MDIO_ErrorS_EnablePinPullUp+0x8>
    12e4:	0f 92       	push	r0
    12e6:	cd b7       	in	r28, 0x3d	; 61
    12e8:	de b7       	in	r29, 0x3e	; 62
    12ea:	8a 83       	std	Y+2, r24	; 0x02
    12ec:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t errorState = return_Ok;
    12ee:	19 82       	std	Y+1, r1	; 0x01

	if (Copy_u8Pin > 7){
    12f0:	8b 81       	ldd	r24, Y+3	; 0x03
    12f2:	88 30       	cpi	r24, 0x08	; 8
    12f4:	10 f0       	brcs	.+4      	; 0x12fa <MDIO_ErrorS_EnablePinPullUp+0x1e>
		errorState = return_Nok;
    12f6:	81 e0       	ldi	r24, 0x01	; 1
    12f8:	89 83       	std	Y+1, r24	; 0x01
	}

	SFIOR &= ~(1<<2);
    12fa:	a0 e5       	ldi	r26, 0x50	; 80
    12fc:	b0 e0       	ldi	r27, 0x00	; 0
    12fe:	e0 e5       	ldi	r30, 0x50	; 80
    1300:	f0 e0       	ldi	r31, 0x00	; 0
    1302:	80 81       	ld	r24, Z
    1304:	8b 7f       	andi	r24, 0xFB	; 251
    1306:	8c 93       	st	X, r24
	switch (Copy_u8Port){
    1308:	8a 81       	ldd	r24, Y+2	; 0x02
    130a:	28 2f       	mov	r18, r24
    130c:	30 e0       	ldi	r19, 0x00	; 0
    130e:	3d 83       	std	Y+5, r19	; 0x05
    1310:	2c 83       	std	Y+4, r18	; 0x04
    1312:	8c 81       	ldd	r24, Y+4	; 0x04
    1314:	9d 81       	ldd	r25, Y+5	; 0x05
    1316:	82 30       	cpi	r24, 0x02	; 2
    1318:	91 05       	cpc	r25, r1
    131a:	51 f1       	breq	.+84     	; 0x1370 <MDIO_ErrorS_EnablePinPullUp+0x94>
    131c:	2c 81       	ldd	r18, Y+4	; 0x04
    131e:	3d 81       	ldd	r19, Y+5	; 0x05
    1320:	23 30       	cpi	r18, 0x03	; 3
    1322:	31 05       	cpc	r19, r1
    1324:	34 f4       	brge	.+12     	; 0x1332 <MDIO_ErrorS_EnablePinPullUp+0x56>
    1326:	8c 81       	ldd	r24, Y+4	; 0x04
    1328:	9d 81       	ldd	r25, Y+5	; 0x05
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	91 05       	cpc	r25, r1
    132e:	61 f0       	breq	.+24     	; 0x1348 <MDIO_ErrorS_EnablePinPullUp+0x6c>
    1330:	5b c0       	rjmp	.+182    	; 0x13e8 <MDIO_ErrorS_EnablePinPullUp+0x10c>
    1332:	2c 81       	ldd	r18, Y+4	; 0x04
    1334:	3d 81       	ldd	r19, Y+5	; 0x05
    1336:	23 30       	cpi	r18, 0x03	; 3
    1338:	31 05       	cpc	r19, r1
    133a:	71 f1       	breq	.+92     	; 0x1398 <MDIO_ErrorS_EnablePinPullUp+0xbc>
    133c:	8c 81       	ldd	r24, Y+4	; 0x04
    133e:	9d 81       	ldd	r25, Y+5	; 0x05
    1340:	84 30       	cpi	r24, 0x04	; 4
    1342:	91 05       	cpc	r25, r1
    1344:	e9 f1       	breq	.+122    	; 0x13c0 <MDIO_ErrorS_EnablePinPullUp+0xe4>
    1346:	50 c0       	rjmp	.+160    	; 0x13e8 <MDIO_ErrorS_EnablePinPullUp+0x10c>
					case DIO_PORTA : SET_BIT(PORTA,Copy_u8Pin);break;
    1348:	ab e3       	ldi	r26, 0x3B	; 59
    134a:	b0 e0       	ldi	r27, 0x00	; 0
    134c:	eb e3       	ldi	r30, 0x3B	; 59
    134e:	f0 e0       	ldi	r31, 0x00	; 0
    1350:	80 81       	ld	r24, Z
    1352:	48 2f       	mov	r20, r24
    1354:	8b 81       	ldd	r24, Y+3	; 0x03
    1356:	28 2f       	mov	r18, r24
    1358:	30 e0       	ldi	r19, 0x00	; 0
    135a:	81 e0       	ldi	r24, 0x01	; 1
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	02 2e       	mov	r0, r18
    1360:	02 c0       	rjmp	.+4      	; 0x1366 <MDIO_ErrorS_EnablePinPullUp+0x8a>
    1362:	88 0f       	add	r24, r24
    1364:	99 1f       	adc	r25, r25
    1366:	0a 94       	dec	r0
    1368:	e2 f7       	brpl	.-8      	; 0x1362 <MDIO_ErrorS_EnablePinPullUp+0x86>
    136a:	84 2b       	or	r24, r20
    136c:	8c 93       	st	X, r24
    136e:	3e c0       	rjmp	.+124    	; 0x13ec <MDIO_ErrorS_EnablePinPullUp+0x110>
					case DIO_PORTB : SET_BIT(PORTB,Copy_u8Pin);break;
    1370:	a8 e3       	ldi	r26, 0x38	; 56
    1372:	b0 e0       	ldi	r27, 0x00	; 0
    1374:	e8 e3       	ldi	r30, 0x38	; 56
    1376:	f0 e0       	ldi	r31, 0x00	; 0
    1378:	80 81       	ld	r24, Z
    137a:	48 2f       	mov	r20, r24
    137c:	8b 81       	ldd	r24, Y+3	; 0x03
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	81 e0       	ldi	r24, 0x01	; 1
    1384:	90 e0       	ldi	r25, 0x00	; 0
    1386:	02 2e       	mov	r0, r18
    1388:	02 c0       	rjmp	.+4      	; 0x138e <MDIO_ErrorS_EnablePinPullUp+0xb2>
    138a:	88 0f       	add	r24, r24
    138c:	99 1f       	adc	r25, r25
    138e:	0a 94       	dec	r0
    1390:	e2 f7       	brpl	.-8      	; 0x138a <MDIO_ErrorS_EnablePinPullUp+0xae>
    1392:	84 2b       	or	r24, r20
    1394:	8c 93       	st	X, r24
    1396:	2a c0       	rjmp	.+84     	; 0x13ec <MDIO_ErrorS_EnablePinPullUp+0x110>
					case DIO_PORTC : SET_BIT(PORTC,Copy_u8Pin);break;
    1398:	a5 e3       	ldi	r26, 0x35	; 53
    139a:	b0 e0       	ldi	r27, 0x00	; 0
    139c:	e5 e3       	ldi	r30, 0x35	; 53
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
    13a2:	48 2f       	mov	r20, r24
    13a4:	8b 81       	ldd	r24, Y+3	; 0x03
    13a6:	28 2f       	mov	r18, r24
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	81 e0       	ldi	r24, 0x01	; 1
    13ac:	90 e0       	ldi	r25, 0x00	; 0
    13ae:	02 2e       	mov	r0, r18
    13b0:	02 c0       	rjmp	.+4      	; 0x13b6 <MDIO_ErrorS_EnablePinPullUp+0xda>
    13b2:	88 0f       	add	r24, r24
    13b4:	99 1f       	adc	r25, r25
    13b6:	0a 94       	dec	r0
    13b8:	e2 f7       	brpl	.-8      	; 0x13b2 <MDIO_ErrorS_EnablePinPullUp+0xd6>
    13ba:	84 2b       	or	r24, r20
    13bc:	8c 93       	st	X, r24
    13be:	16 c0       	rjmp	.+44     	; 0x13ec <MDIO_ErrorS_EnablePinPullUp+0x110>
					case DIO_PORTD : SET_BIT(PORTD,Copy_u8Pin);break;
    13c0:	a2 e3       	ldi	r26, 0x32	; 50
    13c2:	b0 e0       	ldi	r27, 0x00	; 0
    13c4:	e2 e3       	ldi	r30, 0x32	; 50
    13c6:	f0 e0       	ldi	r31, 0x00	; 0
    13c8:	80 81       	ld	r24, Z
    13ca:	48 2f       	mov	r20, r24
    13cc:	8b 81       	ldd	r24, Y+3	; 0x03
    13ce:	28 2f       	mov	r18, r24
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	81 e0       	ldi	r24, 0x01	; 1
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	02 2e       	mov	r0, r18
    13d8:	02 c0       	rjmp	.+4      	; 0x13de <MDIO_ErrorS_EnablePinPullUp+0x102>
    13da:	88 0f       	add	r24, r24
    13dc:	99 1f       	adc	r25, r25
    13de:	0a 94       	dec	r0
    13e0:	e2 f7       	brpl	.-8      	; 0x13da <MDIO_ErrorS_EnablePinPullUp+0xfe>
    13e2:	84 2b       	or	r24, r20
    13e4:	8c 93       	st	X, r24
    13e6:	02 c0       	rjmp	.+4      	; 0x13ec <MDIO_ErrorS_EnablePinPullUp+0x110>
					default: errorState = return_Nok; break;
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	89 83       	std	Y+1, r24	; 0x01
				}
	return errorState;
    13ec:	89 81       	ldd	r24, Y+1	; 0x01

}
    13ee:	0f 90       	pop	r0
    13f0:	0f 90       	pop	r0
    13f2:	0f 90       	pop	r0
    13f4:	0f 90       	pop	r0
    13f6:	0f 90       	pop	r0
    13f8:	cf 91       	pop	r28
    13fa:	df 91       	pop	r29
    13fc:	08 95       	ret

000013fe <MDIO_voidSetPinDirection>:

void MDIO_voidSetPinDirection( u8 Copy_u8Port , u8 Copy_u8Pin , u8  Copy_U8Mode ){
    13fe:	df 93       	push	r29
    1400:	cf 93       	push	r28
    1402:	cd b7       	in	r28, 0x3d	; 61
    1404:	de b7       	in	r29, 0x3e	; 62
    1406:	27 97       	sbiw	r28, 0x07	; 7
    1408:	0f b6       	in	r0, 0x3f	; 63
    140a:	f8 94       	cli
    140c:	de bf       	out	0x3e, r29	; 62
    140e:	0f be       	out	0x3f, r0	; 63
    1410:	cd bf       	out	0x3d, r28	; 61
    1412:	89 83       	std	Y+1, r24	; 0x01
    1414:	6a 83       	std	Y+2, r22	; 0x02
    1416:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_U8Mode == DIO_INPUT){
    1418:	8b 81       	ldd	r24, Y+3	; 0x03
    141a:	88 23       	and	r24, r24
    141c:	09 f0       	breq	.+2      	; 0x1420 <MDIO_voidSetPinDirection+0x22>
    141e:	75 c0       	rjmp	.+234    	; 0x150a <MDIO_voidSetPinDirection+0x10c>
			switch (Copy_u8Port){
    1420:	89 81       	ldd	r24, Y+1	; 0x01
    1422:	28 2f       	mov	r18, r24
    1424:	30 e0       	ldi	r19, 0x00	; 0
    1426:	3f 83       	std	Y+7, r19	; 0x07
    1428:	2e 83       	std	Y+6, r18	; 0x06
    142a:	8e 81       	ldd	r24, Y+6	; 0x06
    142c:	9f 81       	ldd	r25, Y+7	; 0x07
    142e:	82 30       	cpi	r24, 0x02	; 2
    1430:	91 05       	cpc	r25, r1
    1432:	61 f1       	breq	.+88     	; 0x148c <MDIO_voidSetPinDirection+0x8e>
    1434:	2e 81       	ldd	r18, Y+6	; 0x06
    1436:	3f 81       	ldd	r19, Y+7	; 0x07
    1438:	23 30       	cpi	r18, 0x03	; 3
    143a:	31 05       	cpc	r19, r1
    143c:	34 f4       	brge	.+12     	; 0x144a <MDIO_voidSetPinDirection+0x4c>
    143e:	8e 81       	ldd	r24, Y+6	; 0x06
    1440:	9f 81       	ldd	r25, Y+7	; 0x07
    1442:	81 30       	cpi	r24, 0x01	; 1
    1444:	91 05       	cpc	r25, r1
    1446:	69 f0       	breq	.+26     	; 0x1462 <MDIO_voidSetPinDirection+0x64>
    1448:	d3 c0       	rjmp	.+422    	; 0x15f0 <MDIO_voidSetPinDirection+0x1f2>
    144a:	2e 81       	ldd	r18, Y+6	; 0x06
    144c:	3f 81       	ldd	r19, Y+7	; 0x07
    144e:	23 30       	cpi	r18, 0x03	; 3
    1450:	31 05       	cpc	r19, r1
    1452:	89 f1       	breq	.+98     	; 0x14b6 <MDIO_voidSetPinDirection+0xb8>
    1454:	8e 81       	ldd	r24, Y+6	; 0x06
    1456:	9f 81       	ldd	r25, Y+7	; 0x07
    1458:	84 30       	cpi	r24, 0x04	; 4
    145a:	91 05       	cpc	r25, r1
    145c:	09 f4       	brne	.+2      	; 0x1460 <MDIO_voidSetPinDirection+0x62>
    145e:	40 c0       	rjmp	.+128    	; 0x14e0 <MDIO_voidSetPinDirection+0xe2>
    1460:	c7 c0       	rjmp	.+398    	; 0x15f0 <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTA : CLR_BIT(DDRA,Copy_u8Pin);break;
    1462:	aa e3       	ldi	r26, 0x3A	; 58
    1464:	b0 e0       	ldi	r27, 0x00	; 0
    1466:	ea e3       	ldi	r30, 0x3A	; 58
    1468:	f0 e0       	ldi	r31, 0x00	; 0
    146a:	80 81       	ld	r24, Z
    146c:	48 2f       	mov	r20, r24
    146e:	8a 81       	ldd	r24, Y+2	; 0x02
    1470:	28 2f       	mov	r18, r24
    1472:	30 e0       	ldi	r19, 0x00	; 0
    1474:	81 e0       	ldi	r24, 0x01	; 1
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	02 2e       	mov	r0, r18
    147a:	02 c0       	rjmp	.+4      	; 0x1480 <MDIO_voidSetPinDirection+0x82>
    147c:	88 0f       	add	r24, r24
    147e:	99 1f       	adc	r25, r25
    1480:	0a 94       	dec	r0
    1482:	e2 f7       	brpl	.-8      	; 0x147c <MDIO_voidSetPinDirection+0x7e>
    1484:	80 95       	com	r24
    1486:	84 23       	and	r24, r20
    1488:	8c 93       	st	X, r24
    148a:	b2 c0       	rjmp	.+356    	; 0x15f0 <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTB : CLR_BIT(DDRB,Copy_u8Pin);break;
    148c:	a7 e3       	ldi	r26, 0x37	; 55
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	e7 e3       	ldi	r30, 0x37	; 55
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	48 2f       	mov	r20, r24
    1498:	8a 81       	ldd	r24, Y+2	; 0x02
    149a:	28 2f       	mov	r18, r24
    149c:	30 e0       	ldi	r19, 0x00	; 0
    149e:	81 e0       	ldi	r24, 0x01	; 1
    14a0:	90 e0       	ldi	r25, 0x00	; 0
    14a2:	02 2e       	mov	r0, r18
    14a4:	02 c0       	rjmp	.+4      	; 0x14aa <MDIO_voidSetPinDirection+0xac>
    14a6:	88 0f       	add	r24, r24
    14a8:	99 1f       	adc	r25, r25
    14aa:	0a 94       	dec	r0
    14ac:	e2 f7       	brpl	.-8      	; 0x14a6 <MDIO_voidSetPinDirection+0xa8>
    14ae:	80 95       	com	r24
    14b0:	84 23       	and	r24, r20
    14b2:	8c 93       	st	X, r24
    14b4:	9d c0       	rjmp	.+314    	; 0x15f0 <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTC : CLR_BIT(DDRC,Copy_u8Pin);break;
    14b6:	a4 e3       	ldi	r26, 0x34	; 52
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	e4 e3       	ldi	r30, 0x34	; 52
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	48 2f       	mov	r20, r24
    14c2:	8a 81       	ldd	r24, Y+2	; 0x02
    14c4:	28 2f       	mov	r18, r24
    14c6:	30 e0       	ldi	r19, 0x00	; 0
    14c8:	81 e0       	ldi	r24, 0x01	; 1
    14ca:	90 e0       	ldi	r25, 0x00	; 0
    14cc:	02 2e       	mov	r0, r18
    14ce:	02 c0       	rjmp	.+4      	; 0x14d4 <MDIO_voidSetPinDirection+0xd6>
    14d0:	88 0f       	add	r24, r24
    14d2:	99 1f       	adc	r25, r25
    14d4:	0a 94       	dec	r0
    14d6:	e2 f7       	brpl	.-8      	; 0x14d0 <MDIO_voidSetPinDirection+0xd2>
    14d8:	80 95       	com	r24
    14da:	84 23       	and	r24, r20
    14dc:	8c 93       	st	X, r24
    14de:	88 c0       	rjmp	.+272    	; 0x15f0 <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTD : CLR_BIT(DDRD,Copy_u8Pin);break;
    14e0:	a1 e3       	ldi	r26, 0x31	; 49
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e1 e3       	ldi	r30, 0x31	; 49
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	48 2f       	mov	r20, r24
    14ec:	8a 81       	ldd	r24, Y+2	; 0x02
    14ee:	28 2f       	mov	r18, r24
    14f0:	30 e0       	ldi	r19, 0x00	; 0
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	90 e0       	ldi	r25, 0x00	; 0
    14f6:	02 2e       	mov	r0, r18
    14f8:	02 c0       	rjmp	.+4      	; 0x14fe <MDIO_voidSetPinDirection+0x100>
    14fa:	88 0f       	add	r24, r24
    14fc:	99 1f       	adc	r25, r25
    14fe:	0a 94       	dec	r0
    1500:	e2 f7       	brpl	.-8      	; 0x14fa <MDIO_voidSetPinDirection+0xfc>
    1502:	80 95       	com	r24
    1504:	84 23       	and	r24, r20
    1506:	8c 93       	st	X, r24
    1508:	73 c0       	rjmp	.+230    	; 0x15f0 <MDIO_voidSetPinDirection+0x1f2>
				default: break;
			}

	}
	else if(Copy_U8Mode == DIO_OUTPUT){
    150a:	8b 81       	ldd	r24, Y+3	; 0x03
    150c:	81 30       	cpi	r24, 0x01	; 1
    150e:	09 f0       	breq	.+2      	; 0x1512 <MDIO_voidSetPinDirection+0x114>
    1510:	6f c0       	rjmp	.+222    	; 0x15f0 <MDIO_voidSetPinDirection+0x1f2>
			switch (Copy_u8Port){
    1512:	89 81       	ldd	r24, Y+1	; 0x01
    1514:	28 2f       	mov	r18, r24
    1516:	30 e0       	ldi	r19, 0x00	; 0
    1518:	3d 83       	std	Y+5, r19	; 0x05
    151a:	2c 83       	std	Y+4, r18	; 0x04
    151c:	8c 81       	ldd	r24, Y+4	; 0x04
    151e:	9d 81       	ldd	r25, Y+5	; 0x05
    1520:	82 30       	cpi	r24, 0x02	; 2
    1522:	91 05       	cpc	r25, r1
    1524:	51 f1       	breq	.+84     	; 0x157a <MDIO_voidSetPinDirection+0x17c>
    1526:	2c 81       	ldd	r18, Y+4	; 0x04
    1528:	3d 81       	ldd	r19, Y+5	; 0x05
    152a:	23 30       	cpi	r18, 0x03	; 3
    152c:	31 05       	cpc	r19, r1
    152e:	34 f4       	brge	.+12     	; 0x153c <MDIO_voidSetPinDirection+0x13e>
    1530:	8c 81       	ldd	r24, Y+4	; 0x04
    1532:	9d 81       	ldd	r25, Y+5	; 0x05
    1534:	81 30       	cpi	r24, 0x01	; 1
    1536:	91 05       	cpc	r25, r1
    1538:	61 f0       	breq	.+24     	; 0x1552 <MDIO_voidSetPinDirection+0x154>
    153a:	5a c0       	rjmp	.+180    	; 0x15f0 <MDIO_voidSetPinDirection+0x1f2>
    153c:	2c 81       	ldd	r18, Y+4	; 0x04
    153e:	3d 81       	ldd	r19, Y+5	; 0x05
    1540:	23 30       	cpi	r18, 0x03	; 3
    1542:	31 05       	cpc	r19, r1
    1544:	71 f1       	breq	.+92     	; 0x15a2 <MDIO_voidSetPinDirection+0x1a4>
    1546:	8c 81       	ldd	r24, Y+4	; 0x04
    1548:	9d 81       	ldd	r25, Y+5	; 0x05
    154a:	84 30       	cpi	r24, 0x04	; 4
    154c:	91 05       	cpc	r25, r1
    154e:	e9 f1       	breq	.+122    	; 0x15ca <MDIO_voidSetPinDirection+0x1cc>
    1550:	4f c0       	rjmp	.+158    	; 0x15f0 <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTA : SET_BIT(DDRA,Copy_u8Pin);break;
    1552:	aa e3       	ldi	r26, 0x3A	; 58
    1554:	b0 e0       	ldi	r27, 0x00	; 0
    1556:	ea e3       	ldi	r30, 0x3A	; 58
    1558:	f0 e0       	ldi	r31, 0x00	; 0
    155a:	80 81       	ld	r24, Z
    155c:	48 2f       	mov	r20, r24
    155e:	8a 81       	ldd	r24, Y+2	; 0x02
    1560:	28 2f       	mov	r18, r24
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	81 e0       	ldi	r24, 0x01	; 1
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	02 2e       	mov	r0, r18
    156a:	02 c0       	rjmp	.+4      	; 0x1570 <MDIO_voidSetPinDirection+0x172>
    156c:	88 0f       	add	r24, r24
    156e:	99 1f       	adc	r25, r25
    1570:	0a 94       	dec	r0
    1572:	e2 f7       	brpl	.-8      	; 0x156c <MDIO_voidSetPinDirection+0x16e>
    1574:	84 2b       	or	r24, r20
    1576:	8c 93       	st	X, r24
    1578:	3b c0       	rjmp	.+118    	; 0x15f0 <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTB : SET_BIT(DDRB,Copy_u8Pin);break;
    157a:	a7 e3       	ldi	r26, 0x37	; 55
    157c:	b0 e0       	ldi	r27, 0x00	; 0
    157e:	e7 e3       	ldi	r30, 0x37	; 55
    1580:	f0 e0       	ldi	r31, 0x00	; 0
    1582:	80 81       	ld	r24, Z
    1584:	48 2f       	mov	r20, r24
    1586:	8a 81       	ldd	r24, Y+2	; 0x02
    1588:	28 2f       	mov	r18, r24
    158a:	30 e0       	ldi	r19, 0x00	; 0
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	02 2e       	mov	r0, r18
    1592:	02 c0       	rjmp	.+4      	; 0x1598 <MDIO_voidSetPinDirection+0x19a>
    1594:	88 0f       	add	r24, r24
    1596:	99 1f       	adc	r25, r25
    1598:	0a 94       	dec	r0
    159a:	e2 f7       	brpl	.-8      	; 0x1594 <MDIO_voidSetPinDirection+0x196>
    159c:	84 2b       	or	r24, r20
    159e:	8c 93       	st	X, r24
    15a0:	27 c0       	rjmp	.+78     	; 0x15f0 <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTC : SET_BIT(DDRC,Copy_u8Pin);break;
    15a2:	a4 e3       	ldi	r26, 0x34	; 52
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e4 e3       	ldi	r30, 0x34	; 52
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	48 2f       	mov	r20, r24
    15ae:	8a 81       	ldd	r24, Y+2	; 0x02
    15b0:	28 2f       	mov	r18, r24
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	81 e0       	ldi	r24, 0x01	; 1
    15b6:	90 e0       	ldi	r25, 0x00	; 0
    15b8:	02 2e       	mov	r0, r18
    15ba:	02 c0       	rjmp	.+4      	; 0x15c0 <MDIO_voidSetPinDirection+0x1c2>
    15bc:	88 0f       	add	r24, r24
    15be:	99 1f       	adc	r25, r25
    15c0:	0a 94       	dec	r0
    15c2:	e2 f7       	brpl	.-8      	; 0x15bc <MDIO_voidSetPinDirection+0x1be>
    15c4:	84 2b       	or	r24, r20
    15c6:	8c 93       	st	X, r24
    15c8:	13 c0       	rjmp	.+38     	; 0x15f0 <MDIO_voidSetPinDirection+0x1f2>
				case DIO_PORTD : SET_BIT(DDRD,Copy_u8Pin);break;
    15ca:	a1 e3       	ldi	r26, 0x31	; 49
    15cc:	b0 e0       	ldi	r27, 0x00	; 0
    15ce:	e1 e3       	ldi	r30, 0x31	; 49
    15d0:	f0 e0       	ldi	r31, 0x00	; 0
    15d2:	80 81       	ld	r24, Z
    15d4:	48 2f       	mov	r20, r24
    15d6:	8a 81       	ldd	r24, Y+2	; 0x02
    15d8:	28 2f       	mov	r18, r24
    15da:	30 e0       	ldi	r19, 0x00	; 0
    15dc:	81 e0       	ldi	r24, 0x01	; 1
    15de:	90 e0       	ldi	r25, 0x00	; 0
    15e0:	02 2e       	mov	r0, r18
    15e2:	02 c0       	rjmp	.+4      	; 0x15e8 <MDIO_voidSetPinDirection+0x1ea>
    15e4:	88 0f       	add	r24, r24
    15e6:	99 1f       	adc	r25, r25
    15e8:	0a 94       	dec	r0
    15ea:	e2 f7       	brpl	.-8      	; 0x15e4 <MDIO_voidSetPinDirection+0x1e6>
    15ec:	84 2b       	or	r24, r20
    15ee:	8c 93       	st	X, r24
				default: break;
			}
	}

}
    15f0:	27 96       	adiw	r28, 0x07	; 7
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	f8 94       	cli
    15f6:	de bf       	out	0x3e, r29	; 62
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	cd bf       	out	0x3d, r28	; 61
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <MDIO_ErrorS_SetPinValue>:
Error_State_t MDIO_ErrorS_SetPinValue( u8 Copy_u8Port , u8 Copy_u8Pin , u8  Copy_U8Mode ){
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    160a:	28 97       	sbiw	r28, 0x08	; 8
    160c:	0f b6       	in	r0, 0x3f	; 63
    160e:	f8 94       	cli
    1610:	de bf       	out	0x3e, r29	; 62
    1612:	0f be       	out	0x3f, r0	; 63
    1614:	cd bf       	out	0x3d, r28	; 61
    1616:	8a 83       	std	Y+2, r24	; 0x02
    1618:	6b 83       	std	Y+3, r22	; 0x03
    161a:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t errorState = return_Ok;
    161c:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Pin > 7){
    161e:	8b 81       	ldd	r24, Y+3	; 0x03
    1620:	88 30       	cpi	r24, 0x08	; 8
    1622:	10 f0       	brcs	.+4      	; 0x1628 <MDIO_ErrorS_SetPinValue+0x26>
		errorState = return_Nok;
    1624:	81 e0       	ldi	r24, 0x01	; 1
    1626:	89 83       	std	Y+1, r24	; 0x01
	}

	if(Copy_U8Mode == DIO_LOW){
    1628:	8c 81       	ldd	r24, Y+4	; 0x04
    162a:	88 23       	and	r24, r24
    162c:	09 f0       	breq	.+2      	; 0x1630 <MDIO_ErrorS_SetPinValue+0x2e>
    162e:	78 c0       	rjmp	.+240    	; 0x1720 <MDIO_ErrorS_SetPinValue+0x11e>
				switch (Copy_u8Port){
    1630:	8a 81       	ldd	r24, Y+2	; 0x02
    1632:	28 2f       	mov	r18, r24
    1634:	30 e0       	ldi	r19, 0x00	; 0
    1636:	38 87       	std	Y+8, r19	; 0x08
    1638:	2f 83       	std	Y+7, r18	; 0x07
    163a:	8f 81       	ldd	r24, Y+7	; 0x07
    163c:	98 85       	ldd	r25, Y+8	; 0x08
    163e:	82 30       	cpi	r24, 0x02	; 2
    1640:	91 05       	cpc	r25, r1
    1642:	61 f1       	breq	.+88     	; 0x169c <MDIO_ErrorS_SetPinValue+0x9a>
    1644:	2f 81       	ldd	r18, Y+7	; 0x07
    1646:	38 85       	ldd	r19, Y+8	; 0x08
    1648:	23 30       	cpi	r18, 0x03	; 3
    164a:	31 05       	cpc	r19, r1
    164c:	34 f4       	brge	.+12     	; 0x165a <MDIO_ErrorS_SetPinValue+0x58>
    164e:	8f 81       	ldd	r24, Y+7	; 0x07
    1650:	98 85       	ldd	r25, Y+8	; 0x08
    1652:	81 30       	cpi	r24, 0x01	; 1
    1654:	91 05       	cpc	r25, r1
    1656:	69 f0       	breq	.+26     	; 0x1672 <MDIO_ErrorS_SetPinValue+0x70>
    1658:	60 c0       	rjmp	.+192    	; 0x171a <MDIO_ErrorS_SetPinValue+0x118>
    165a:	2f 81       	ldd	r18, Y+7	; 0x07
    165c:	38 85       	ldd	r19, Y+8	; 0x08
    165e:	23 30       	cpi	r18, 0x03	; 3
    1660:	31 05       	cpc	r19, r1
    1662:	89 f1       	breq	.+98     	; 0x16c6 <MDIO_ErrorS_SetPinValue+0xc4>
    1664:	8f 81       	ldd	r24, Y+7	; 0x07
    1666:	98 85       	ldd	r25, Y+8	; 0x08
    1668:	84 30       	cpi	r24, 0x04	; 4
    166a:	91 05       	cpc	r25, r1
    166c:	09 f4       	brne	.+2      	; 0x1670 <MDIO_ErrorS_SetPinValue+0x6e>
    166e:	40 c0       	rjmp	.+128    	; 0x16f0 <MDIO_ErrorS_SetPinValue+0xee>
    1670:	54 c0       	rjmp	.+168    	; 0x171a <MDIO_ErrorS_SetPinValue+0x118>
					case DIO_PORTA : CLR_BIT(PORTA,Copy_u8Pin);break;
    1672:	ab e3       	ldi	r26, 0x3B	; 59
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	eb e3       	ldi	r30, 0x3B	; 59
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	48 2f       	mov	r20, r24
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	28 2f       	mov	r18, r24
    1682:	30 e0       	ldi	r19, 0x00	; 0
    1684:	81 e0       	ldi	r24, 0x01	; 1
    1686:	90 e0       	ldi	r25, 0x00	; 0
    1688:	02 2e       	mov	r0, r18
    168a:	02 c0       	rjmp	.+4      	; 0x1690 <MDIO_ErrorS_SetPinValue+0x8e>
    168c:	88 0f       	add	r24, r24
    168e:	99 1f       	adc	r25, r25
    1690:	0a 94       	dec	r0
    1692:	e2 f7       	brpl	.-8      	; 0x168c <MDIO_ErrorS_SetPinValue+0x8a>
    1694:	80 95       	com	r24
    1696:	84 23       	and	r24, r20
    1698:	8c 93       	st	X, r24
    169a:	b8 c0       	rjmp	.+368    	; 0x180c <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTB : CLR_BIT(PORTB,Copy_u8Pin);break;
    169c:	a8 e3       	ldi	r26, 0x38	; 56
    169e:	b0 e0       	ldi	r27, 0x00	; 0
    16a0:	e8 e3       	ldi	r30, 0x38	; 56
    16a2:	f0 e0       	ldi	r31, 0x00	; 0
    16a4:	80 81       	ld	r24, Z
    16a6:	48 2f       	mov	r20, r24
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	28 2f       	mov	r18, r24
    16ac:	30 e0       	ldi	r19, 0x00	; 0
    16ae:	81 e0       	ldi	r24, 0x01	; 1
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	02 2e       	mov	r0, r18
    16b4:	02 c0       	rjmp	.+4      	; 0x16ba <MDIO_ErrorS_SetPinValue+0xb8>
    16b6:	88 0f       	add	r24, r24
    16b8:	99 1f       	adc	r25, r25
    16ba:	0a 94       	dec	r0
    16bc:	e2 f7       	brpl	.-8      	; 0x16b6 <MDIO_ErrorS_SetPinValue+0xb4>
    16be:	80 95       	com	r24
    16c0:	84 23       	and	r24, r20
    16c2:	8c 93       	st	X, r24
    16c4:	a3 c0       	rjmp	.+326    	; 0x180c <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTC : CLR_BIT(PORTC,Copy_u8Pin);break;
    16c6:	a5 e3       	ldi	r26, 0x35	; 53
    16c8:	b0 e0       	ldi	r27, 0x00	; 0
    16ca:	e5 e3       	ldi	r30, 0x35	; 53
    16cc:	f0 e0       	ldi	r31, 0x00	; 0
    16ce:	80 81       	ld	r24, Z
    16d0:	48 2f       	mov	r20, r24
    16d2:	8b 81       	ldd	r24, Y+3	; 0x03
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	02 2e       	mov	r0, r18
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <MDIO_ErrorS_SetPinValue+0xe2>
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	0a 94       	dec	r0
    16e6:	e2 f7       	brpl	.-8      	; 0x16e0 <MDIO_ErrorS_SetPinValue+0xde>
    16e8:	80 95       	com	r24
    16ea:	84 23       	and	r24, r20
    16ec:	8c 93       	st	X, r24
    16ee:	8e c0       	rjmp	.+284    	; 0x180c <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTD : CLR_BIT(PORTD,Copy_u8Pin);break;
    16f0:	a2 e3       	ldi	r26, 0x32	; 50
    16f2:	b0 e0       	ldi	r27, 0x00	; 0
    16f4:	e2 e3       	ldi	r30, 0x32	; 50
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	80 81       	ld	r24, Z
    16fa:	48 2f       	mov	r20, r24
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	28 2f       	mov	r18, r24
    1700:	30 e0       	ldi	r19, 0x00	; 0
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	90 e0       	ldi	r25, 0x00	; 0
    1706:	02 2e       	mov	r0, r18
    1708:	02 c0       	rjmp	.+4      	; 0x170e <MDIO_ErrorS_SetPinValue+0x10c>
    170a:	88 0f       	add	r24, r24
    170c:	99 1f       	adc	r25, r25
    170e:	0a 94       	dec	r0
    1710:	e2 f7       	brpl	.-8      	; 0x170a <MDIO_ErrorS_SetPinValue+0x108>
    1712:	80 95       	com	r24
    1714:	84 23       	and	r24, r20
    1716:	8c 93       	st	X, r24
    1718:	79 c0       	rjmp	.+242    	; 0x180c <MDIO_ErrorS_SetPinValue+0x20a>
					default: errorState = return_Nok; break;
    171a:	81 e0       	ldi	r24, 0x01	; 1
    171c:	89 83       	std	Y+1, r24	; 0x01
    171e:	76 c0       	rjmp	.+236    	; 0x180c <MDIO_ErrorS_SetPinValue+0x20a>
				}

		}
		else if(Copy_U8Mode == DIO_HIGH){
    1720:	8c 81       	ldd	r24, Y+4	; 0x04
    1722:	81 30       	cpi	r24, 0x01	; 1
    1724:	09 f0       	breq	.+2      	; 0x1728 <MDIO_ErrorS_SetPinValue+0x126>
    1726:	72 c0       	rjmp	.+228    	; 0x180c <MDIO_ErrorS_SetPinValue+0x20a>
				switch (Copy_u8Port){
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	28 2f       	mov	r18, r24
    172c:	30 e0       	ldi	r19, 0x00	; 0
    172e:	3e 83       	std	Y+6, r19	; 0x06
    1730:	2d 83       	std	Y+5, r18	; 0x05
    1732:	8d 81       	ldd	r24, Y+5	; 0x05
    1734:	9e 81       	ldd	r25, Y+6	; 0x06
    1736:	82 30       	cpi	r24, 0x02	; 2
    1738:	91 05       	cpc	r25, r1
    173a:	51 f1       	breq	.+84     	; 0x1790 <MDIO_ErrorS_SetPinValue+0x18e>
    173c:	2d 81       	ldd	r18, Y+5	; 0x05
    173e:	3e 81       	ldd	r19, Y+6	; 0x06
    1740:	23 30       	cpi	r18, 0x03	; 3
    1742:	31 05       	cpc	r19, r1
    1744:	34 f4       	brge	.+12     	; 0x1752 <MDIO_ErrorS_SetPinValue+0x150>
    1746:	8d 81       	ldd	r24, Y+5	; 0x05
    1748:	9e 81       	ldd	r25, Y+6	; 0x06
    174a:	81 30       	cpi	r24, 0x01	; 1
    174c:	91 05       	cpc	r25, r1
    174e:	61 f0       	breq	.+24     	; 0x1768 <MDIO_ErrorS_SetPinValue+0x166>
    1750:	5b c0       	rjmp	.+182    	; 0x1808 <MDIO_ErrorS_SetPinValue+0x206>
    1752:	2d 81       	ldd	r18, Y+5	; 0x05
    1754:	3e 81       	ldd	r19, Y+6	; 0x06
    1756:	23 30       	cpi	r18, 0x03	; 3
    1758:	31 05       	cpc	r19, r1
    175a:	71 f1       	breq	.+92     	; 0x17b8 <MDIO_ErrorS_SetPinValue+0x1b6>
    175c:	8d 81       	ldd	r24, Y+5	; 0x05
    175e:	9e 81       	ldd	r25, Y+6	; 0x06
    1760:	84 30       	cpi	r24, 0x04	; 4
    1762:	91 05       	cpc	r25, r1
    1764:	e9 f1       	breq	.+122    	; 0x17e0 <MDIO_ErrorS_SetPinValue+0x1de>
    1766:	50 c0       	rjmp	.+160    	; 0x1808 <MDIO_ErrorS_SetPinValue+0x206>
					case DIO_PORTA : SET_BIT(PORTA,Copy_u8Pin);break;
    1768:	ab e3       	ldi	r26, 0x3B	; 59
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	eb e3       	ldi	r30, 0x3B	; 59
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	48 2f       	mov	r20, r24
    1774:	8b 81       	ldd	r24, Y+3	; 0x03
    1776:	28 2f       	mov	r18, r24
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	81 e0       	ldi	r24, 0x01	; 1
    177c:	90 e0       	ldi	r25, 0x00	; 0
    177e:	02 2e       	mov	r0, r18
    1780:	02 c0       	rjmp	.+4      	; 0x1786 <MDIO_ErrorS_SetPinValue+0x184>
    1782:	88 0f       	add	r24, r24
    1784:	99 1f       	adc	r25, r25
    1786:	0a 94       	dec	r0
    1788:	e2 f7       	brpl	.-8      	; 0x1782 <MDIO_ErrorS_SetPinValue+0x180>
    178a:	84 2b       	or	r24, r20
    178c:	8c 93       	st	X, r24
    178e:	3e c0       	rjmp	.+124    	; 0x180c <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTB : SET_BIT(PORTB,Copy_u8Pin);break;
    1790:	a8 e3       	ldi	r26, 0x38	; 56
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e8 e3       	ldi	r30, 0x38	; 56
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	48 2f       	mov	r20, r24
    179c:	8b 81       	ldd	r24, Y+3	; 0x03
    179e:	28 2f       	mov	r18, r24
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	81 e0       	ldi	r24, 0x01	; 1
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	02 2e       	mov	r0, r18
    17a8:	02 c0       	rjmp	.+4      	; 0x17ae <MDIO_ErrorS_SetPinValue+0x1ac>
    17aa:	88 0f       	add	r24, r24
    17ac:	99 1f       	adc	r25, r25
    17ae:	0a 94       	dec	r0
    17b0:	e2 f7       	brpl	.-8      	; 0x17aa <MDIO_ErrorS_SetPinValue+0x1a8>
    17b2:	84 2b       	or	r24, r20
    17b4:	8c 93       	st	X, r24
    17b6:	2a c0       	rjmp	.+84     	; 0x180c <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTC : SET_BIT(PORTC,Copy_u8Pin);break;
    17b8:	a5 e3       	ldi	r26, 0x35	; 53
    17ba:	b0 e0       	ldi	r27, 0x00	; 0
    17bc:	e5 e3       	ldi	r30, 0x35	; 53
    17be:	f0 e0       	ldi	r31, 0x00	; 0
    17c0:	80 81       	ld	r24, Z
    17c2:	48 2f       	mov	r20, r24
    17c4:	8b 81       	ldd	r24, Y+3	; 0x03
    17c6:	28 2f       	mov	r18, r24
    17c8:	30 e0       	ldi	r19, 0x00	; 0
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	02 2e       	mov	r0, r18
    17d0:	02 c0       	rjmp	.+4      	; 0x17d6 <MDIO_ErrorS_SetPinValue+0x1d4>
    17d2:	88 0f       	add	r24, r24
    17d4:	99 1f       	adc	r25, r25
    17d6:	0a 94       	dec	r0
    17d8:	e2 f7       	brpl	.-8      	; 0x17d2 <MDIO_ErrorS_SetPinValue+0x1d0>
    17da:	84 2b       	or	r24, r20
    17dc:	8c 93       	st	X, r24
    17de:	16 c0       	rjmp	.+44     	; 0x180c <MDIO_ErrorS_SetPinValue+0x20a>
					case DIO_PORTD : SET_BIT(PORTD,Copy_u8Pin);break;
    17e0:	a2 e3       	ldi	r26, 0x32	; 50
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	e2 e3       	ldi	r30, 0x32	; 50
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	48 2f       	mov	r20, r24
    17ec:	8b 81       	ldd	r24, Y+3	; 0x03
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	02 2e       	mov	r0, r18
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <MDIO_ErrorS_SetPinValue+0x1fc>
    17fa:	88 0f       	add	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	0a 94       	dec	r0
    1800:	e2 f7       	brpl	.-8      	; 0x17fa <MDIO_ErrorS_SetPinValue+0x1f8>
    1802:	84 2b       	or	r24, r20
    1804:	8c 93       	st	X, r24
    1806:	02 c0       	rjmp	.+4      	; 0x180c <MDIO_ErrorS_SetPinValue+0x20a>
					default:errorState = return_Nok; break;
    1808:	81 e0       	ldi	r24, 0x01	; 1
    180a:	89 83       	std	Y+1, r24	; 0x01
				}
		}
	return errorState;
    180c:	89 81       	ldd	r24, Y+1	; 0x01
}
    180e:	28 96       	adiw	r28, 0x08	; 8
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	f8 94       	cli
    1814:	de bf       	out	0x3e, r29	; 62
    1816:	0f be       	out	0x3f, r0	; 63
    1818:	cd bf       	out	0x3d, r28	; 61
    181a:	cf 91       	pop	r28
    181c:	df 91       	pop	r29
    181e:	08 95       	ret

00001820 <MDIO_ErrorS_GetPinValue>:

Error_State_t MDIO_ErrorS_GetPinValue( u8 Copy_u8Port , u8 Copy_u8Pin , u8* P_u8Value ){
    1820:	df 93       	push	r29
    1822:	cf 93       	push	r28
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	27 97       	sbiw	r28, 0x07	; 7
    182a:	0f b6       	in	r0, 0x3f	; 63
    182c:	f8 94       	cli
    182e:	de bf       	out	0x3e, r29	; 62
    1830:	0f be       	out	0x3f, r0	; 63
    1832:	cd bf       	out	0x3d, r28	; 61
    1834:	8a 83       	std	Y+2, r24	; 0x02
    1836:	6b 83       	std	Y+3, r22	; 0x03
    1838:	5d 83       	std	Y+5, r21	; 0x05
    183a:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t errorState = return_Ok;
    183c:	19 82       	std	Y+1, r1	; 0x01
	if (Copy_u8Pin > 7){
    183e:	8b 81       	ldd	r24, Y+3	; 0x03
    1840:	88 30       	cpi	r24, 0x08	; 8
    1842:	10 f0       	brcs	.+4      	; 0x1848 <MDIO_ErrorS_GetPinValue+0x28>
			errorState = return_Nok;
    1844:	81 e0       	ldi	r24, 0x01	; 1
    1846:	89 83       	std	Y+1, r24	; 0x01
		}

	switch (Copy_u8Port){
    1848:	8a 81       	ldd	r24, Y+2	; 0x02
    184a:	28 2f       	mov	r18, r24
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	3f 83       	std	Y+7, r19	; 0x07
    1850:	2e 83       	std	Y+6, r18	; 0x06
    1852:	4e 81       	ldd	r20, Y+6	; 0x06
    1854:	5f 81       	ldd	r21, Y+7	; 0x07
    1856:	42 30       	cpi	r20, 0x02	; 2
    1858:	51 05       	cpc	r21, r1
    185a:	59 f1       	breq	.+86     	; 0x18b2 <MDIO_ErrorS_GetPinValue+0x92>
    185c:	8e 81       	ldd	r24, Y+6	; 0x06
    185e:	9f 81       	ldd	r25, Y+7	; 0x07
    1860:	83 30       	cpi	r24, 0x03	; 3
    1862:	91 05       	cpc	r25, r1
    1864:	34 f4       	brge	.+12     	; 0x1872 <MDIO_ErrorS_GetPinValue+0x52>
    1866:	2e 81       	ldd	r18, Y+6	; 0x06
    1868:	3f 81       	ldd	r19, Y+7	; 0x07
    186a:	21 30       	cpi	r18, 0x01	; 1
    186c:	31 05       	cpc	r19, r1
    186e:	69 f0       	breq	.+26     	; 0x188a <MDIO_ErrorS_GetPinValue+0x6a>
    1870:	5c c0       	rjmp	.+184    	; 0x192a <MDIO_ErrorS_GetPinValue+0x10a>
    1872:	4e 81       	ldd	r20, Y+6	; 0x06
    1874:	5f 81       	ldd	r21, Y+7	; 0x07
    1876:	43 30       	cpi	r20, 0x03	; 3
    1878:	51 05       	cpc	r21, r1
    187a:	79 f1       	breq	.+94     	; 0x18da <MDIO_ErrorS_GetPinValue+0xba>
    187c:	8e 81       	ldd	r24, Y+6	; 0x06
    187e:	9f 81       	ldd	r25, Y+7	; 0x07
    1880:	84 30       	cpi	r24, 0x04	; 4
    1882:	91 05       	cpc	r25, r1
    1884:	09 f4       	brne	.+2      	; 0x1888 <MDIO_ErrorS_GetPinValue+0x68>
    1886:	3d c0       	rjmp	.+122    	; 0x1902 <MDIO_ErrorS_GetPinValue+0xe2>
    1888:	50 c0       	rjmp	.+160    	; 0x192a <MDIO_ErrorS_GetPinValue+0x10a>
						case DIO_PORTA : *P_u8Value = GET_BIT(PINA,Copy_u8Pin);break;
    188a:	e9 e3       	ldi	r30, 0x39	; 57
    188c:	f0 e0       	ldi	r31, 0x00	; 0
    188e:	80 81       	ld	r24, Z
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	8b 81       	ldd	r24, Y+3	; 0x03
    1896:	88 2f       	mov	r24, r24
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	a9 01       	movw	r20, r18
    189c:	02 c0       	rjmp	.+4      	; 0x18a2 <MDIO_ErrorS_GetPinValue+0x82>
    189e:	55 95       	asr	r21
    18a0:	47 95       	ror	r20
    18a2:	8a 95       	dec	r24
    18a4:	e2 f7       	brpl	.-8      	; 0x189e <MDIO_ErrorS_GetPinValue+0x7e>
    18a6:	ca 01       	movw	r24, r20
    18a8:	81 70       	andi	r24, 0x01	; 1
    18aa:	ec 81       	ldd	r30, Y+4	; 0x04
    18ac:	fd 81       	ldd	r31, Y+5	; 0x05
    18ae:	80 83       	st	Z, r24
    18b0:	3e c0       	rjmp	.+124    	; 0x192e <MDIO_ErrorS_GetPinValue+0x10e>
						case DIO_PORTB : *P_u8Value = GET_BIT(PINB,Copy_u8Pin);break;
    18b2:	e6 e3       	ldi	r30, 0x36	; 54
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	80 81       	ld	r24, Z
    18b8:	28 2f       	mov	r18, r24
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	8b 81       	ldd	r24, Y+3	; 0x03
    18be:	88 2f       	mov	r24, r24
    18c0:	90 e0       	ldi	r25, 0x00	; 0
    18c2:	a9 01       	movw	r20, r18
    18c4:	02 c0       	rjmp	.+4      	; 0x18ca <MDIO_ErrorS_GetPinValue+0xaa>
    18c6:	55 95       	asr	r21
    18c8:	47 95       	ror	r20
    18ca:	8a 95       	dec	r24
    18cc:	e2 f7       	brpl	.-8      	; 0x18c6 <MDIO_ErrorS_GetPinValue+0xa6>
    18ce:	ca 01       	movw	r24, r20
    18d0:	81 70       	andi	r24, 0x01	; 1
    18d2:	ec 81       	ldd	r30, Y+4	; 0x04
    18d4:	fd 81       	ldd	r31, Y+5	; 0x05
    18d6:	80 83       	st	Z, r24
    18d8:	2a c0       	rjmp	.+84     	; 0x192e <MDIO_ErrorS_GetPinValue+0x10e>
						case DIO_PORTC : *P_u8Value = GET_BIT(PINC,Copy_u8Pin);break;
    18da:	e3 e3       	ldi	r30, 0x33	; 51
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	80 81       	ld	r24, Z
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	88 2f       	mov	r24, r24
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	a9 01       	movw	r20, r18
    18ec:	02 c0       	rjmp	.+4      	; 0x18f2 <MDIO_ErrorS_GetPinValue+0xd2>
    18ee:	55 95       	asr	r21
    18f0:	47 95       	ror	r20
    18f2:	8a 95       	dec	r24
    18f4:	e2 f7       	brpl	.-8      	; 0x18ee <MDIO_ErrorS_GetPinValue+0xce>
    18f6:	ca 01       	movw	r24, r20
    18f8:	81 70       	andi	r24, 0x01	; 1
    18fa:	ec 81       	ldd	r30, Y+4	; 0x04
    18fc:	fd 81       	ldd	r31, Y+5	; 0x05
    18fe:	80 83       	st	Z, r24
    1900:	16 c0       	rjmp	.+44     	; 0x192e <MDIO_ErrorS_GetPinValue+0x10e>
						case DIO_PORTD : *P_u8Value = GET_BIT(PIND,Copy_u8Pin);break;
    1902:	e0 e3       	ldi	r30, 0x30	; 48
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	28 2f       	mov	r18, r24
    190a:	30 e0       	ldi	r19, 0x00	; 0
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	88 2f       	mov	r24, r24
    1910:	90 e0       	ldi	r25, 0x00	; 0
    1912:	a9 01       	movw	r20, r18
    1914:	02 c0       	rjmp	.+4      	; 0x191a <MDIO_ErrorS_GetPinValue+0xfa>
    1916:	55 95       	asr	r21
    1918:	47 95       	ror	r20
    191a:	8a 95       	dec	r24
    191c:	e2 f7       	brpl	.-8      	; 0x1916 <MDIO_ErrorS_GetPinValue+0xf6>
    191e:	ca 01       	movw	r24, r20
    1920:	81 70       	andi	r24, 0x01	; 1
    1922:	ec 81       	ldd	r30, Y+4	; 0x04
    1924:	fd 81       	ldd	r31, Y+5	; 0x05
    1926:	80 83       	st	Z, r24
    1928:	02 c0       	rjmp	.+4      	; 0x192e <MDIO_ErrorS_GetPinValue+0x10e>
						default: errorState = return_Nok; break;
    192a:	81 e0       	ldi	r24, 0x01	; 1
    192c:	89 83       	std	Y+1, r24	; 0x01
					}
	return errorState;
    192e:	89 81       	ldd	r24, Y+1	; 0x01

}
    1930:	27 96       	adiw	r28, 0x07	; 7
    1932:	0f b6       	in	r0, 0x3f	; 63
    1934:	f8 94       	cli
    1936:	de bf       	out	0x3e, r29	; 62
    1938:	0f be       	out	0x3f, r0	; 63
    193a:	cd bf       	out	0x3d, r28	; 61
    193c:	cf 91       	pop	r28
    193e:	df 91       	pop	r29
    1940:	08 95       	ret

00001942 <MDIO_ErrorS_SetPortValue>:

Error_State_t MDIO_ErrorS_SetPortValue( u8 Copy_u8Port , u8  Copy_U8Value ){
    1942:	df 93       	push	r29
    1944:	cf 93       	push	r28
    1946:	00 d0       	rcall	.+0      	; 0x1948 <MDIO_ErrorS_SetPortValue+0x6>
    1948:	00 d0       	rcall	.+0      	; 0x194a <MDIO_ErrorS_SetPortValue+0x8>
    194a:	0f 92       	push	r0
    194c:	cd b7       	in	r28, 0x3d	; 61
    194e:	de b7       	in	r29, 0x3e	; 62
    1950:	8a 83       	std	Y+2, r24	; 0x02
    1952:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t errorState = return_Ok;
    1954:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port){
    1956:	8a 81       	ldd	r24, Y+2	; 0x02
    1958:	28 2f       	mov	r18, r24
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	3d 83       	std	Y+5, r19	; 0x05
    195e:	2c 83       	std	Y+4, r18	; 0x04
    1960:	8c 81       	ldd	r24, Y+4	; 0x04
    1962:	9d 81       	ldd	r25, Y+5	; 0x05
    1964:	82 30       	cpi	r24, 0x02	; 2
    1966:	91 05       	cpc	r25, r1
    1968:	d9 f0       	breq	.+54     	; 0x19a0 <MDIO_ErrorS_SetPortValue+0x5e>
    196a:	2c 81       	ldd	r18, Y+4	; 0x04
    196c:	3d 81       	ldd	r19, Y+5	; 0x05
    196e:	23 30       	cpi	r18, 0x03	; 3
    1970:	31 05       	cpc	r19, r1
    1972:	34 f4       	brge	.+12     	; 0x1980 <MDIO_ErrorS_SetPortValue+0x3e>
    1974:	8c 81       	ldd	r24, Y+4	; 0x04
    1976:	9d 81       	ldd	r25, Y+5	; 0x05
    1978:	81 30       	cpi	r24, 0x01	; 1
    197a:	91 05       	cpc	r25, r1
    197c:	61 f0       	breq	.+24     	; 0x1996 <MDIO_ErrorS_SetPortValue+0x54>
    197e:	1f c0       	rjmp	.+62     	; 0x19be <MDIO_ErrorS_SetPortValue+0x7c>
    1980:	2c 81       	ldd	r18, Y+4	; 0x04
    1982:	3d 81       	ldd	r19, Y+5	; 0x05
    1984:	23 30       	cpi	r18, 0x03	; 3
    1986:	31 05       	cpc	r19, r1
    1988:	81 f0       	breq	.+32     	; 0x19aa <MDIO_ErrorS_SetPortValue+0x68>
    198a:	8c 81       	ldd	r24, Y+4	; 0x04
    198c:	9d 81       	ldd	r25, Y+5	; 0x05
    198e:	84 30       	cpi	r24, 0x04	; 4
    1990:	91 05       	cpc	r25, r1
    1992:	81 f0       	breq	.+32     	; 0x19b4 <MDIO_ErrorS_SetPortValue+0x72>
    1994:	14 c0       	rjmp	.+40     	; 0x19be <MDIO_ErrorS_SetPortValue+0x7c>
		case DIO_PORTA : PORTA = Copy_U8Value ;break;
    1996:	eb e3       	ldi	r30, 0x3B	; 59
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	8b 81       	ldd	r24, Y+3	; 0x03
    199c:	80 83       	st	Z, r24
    199e:	11 c0       	rjmp	.+34     	; 0x19c2 <MDIO_ErrorS_SetPortValue+0x80>
		case DIO_PORTB : PORTB = Copy_U8Value ;break;
    19a0:	e8 e3       	ldi	r30, 0x38	; 56
    19a2:	f0 e0       	ldi	r31, 0x00	; 0
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	80 83       	st	Z, r24
    19a8:	0c c0       	rjmp	.+24     	; 0x19c2 <MDIO_ErrorS_SetPortValue+0x80>
		case DIO_PORTC : PORTC = Copy_U8Value ;break;
    19aa:	e5 e3       	ldi	r30, 0x35	; 53
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	8b 81       	ldd	r24, Y+3	; 0x03
    19b0:	80 83       	st	Z, r24
    19b2:	07 c0       	rjmp	.+14     	; 0x19c2 <MDIO_ErrorS_SetPortValue+0x80>
		case DIO_PORTD : PORTD = Copy_U8Value ;break;
    19b4:	e2 e3       	ldi	r30, 0x32	; 50
    19b6:	f0 e0       	ldi	r31, 0x00	; 0
    19b8:	8b 81       	ldd	r24, Y+3	; 0x03
    19ba:	80 83       	st	Z, r24
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <MDIO_ErrorS_SetPortValue+0x80>
		default:errorState = return_Nok; break;
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	89 83       	std	Y+1, r24	; 0x01
	}

		return errorState;
    19c2:	89 81       	ldd	r24, Y+1	; 0x01


}
    19c4:	0f 90       	pop	r0
    19c6:	0f 90       	pop	r0
    19c8:	0f 90       	pop	r0
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <MDIO_ErrorS_GetPortValue>:
Error_State_t MDIO_ErrorS_GetPortValue( u8 Copy_u8Port , u8* P_u8Value ){
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	00 d0       	rcall	.+0      	; 0x19da <MDIO_ErrorS_GetPortValue+0x6>
    19da:	00 d0       	rcall	.+0      	; 0x19dc <MDIO_ErrorS_GetPortValue+0x8>
    19dc:	00 d0       	rcall	.+0      	; 0x19de <MDIO_ErrorS_GetPortValue+0xa>
    19de:	cd b7       	in	r28, 0x3d	; 61
    19e0:	de b7       	in	r29, 0x3e	; 62
    19e2:	8a 83       	std	Y+2, r24	; 0x02
    19e4:	7c 83       	std	Y+4, r23	; 0x04
    19e6:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t errorState = return_Ok;
    19e8:	19 82       	std	Y+1, r1	; 0x01
	switch (Copy_u8Port){
    19ea:	8a 81       	ldd	r24, Y+2	; 0x02
    19ec:	28 2f       	mov	r18, r24
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	3e 83       	std	Y+6, r19	; 0x06
    19f2:	2d 83       	std	Y+5, r18	; 0x05
    19f4:	8d 81       	ldd	r24, Y+5	; 0x05
    19f6:	9e 81       	ldd	r25, Y+6	; 0x06
    19f8:	82 30       	cpi	r24, 0x02	; 2
    19fa:	91 05       	cpc	r25, r1
    19fc:	e9 f0       	breq	.+58     	; 0x1a38 <MDIO_ErrorS_GetPortValue+0x64>
    19fe:	2d 81       	ldd	r18, Y+5	; 0x05
    1a00:	3e 81       	ldd	r19, Y+6	; 0x06
    1a02:	23 30       	cpi	r18, 0x03	; 3
    1a04:	31 05       	cpc	r19, r1
    1a06:	34 f4       	brge	.+12     	; 0x1a14 <MDIO_ErrorS_GetPortValue+0x40>
    1a08:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0c:	81 30       	cpi	r24, 0x01	; 1
    1a0e:	91 05       	cpc	r25, r1
    1a10:	61 f0       	breq	.+24     	; 0x1a2a <MDIO_ErrorS_GetPortValue+0x56>
    1a12:	27 c0       	rjmp	.+78     	; 0x1a62 <MDIO_ErrorS_GetPortValue+0x8e>
    1a14:	2d 81       	ldd	r18, Y+5	; 0x05
    1a16:	3e 81       	ldd	r19, Y+6	; 0x06
    1a18:	23 30       	cpi	r18, 0x03	; 3
    1a1a:	31 05       	cpc	r19, r1
    1a1c:	a1 f0       	breq	.+40     	; 0x1a46 <MDIO_ErrorS_GetPortValue+0x72>
    1a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a20:	9e 81       	ldd	r25, Y+6	; 0x06
    1a22:	84 30       	cpi	r24, 0x04	; 4
    1a24:	91 05       	cpc	r25, r1
    1a26:	b1 f0       	breq	.+44     	; 0x1a54 <MDIO_ErrorS_GetPortValue+0x80>
    1a28:	1c c0       	rjmp	.+56     	; 0x1a62 <MDIO_ErrorS_GetPortValue+0x8e>
		case DIO_PORTA : *P_u8Value = PINA ;break;
    1a2a:	e9 e3       	ldi	r30, 0x39	; 57
    1a2c:	f0 e0       	ldi	r31, 0x00	; 0
    1a2e:	80 81       	ld	r24, Z
    1a30:	eb 81       	ldd	r30, Y+3	; 0x03
    1a32:	fc 81       	ldd	r31, Y+4	; 0x04
    1a34:	80 83       	st	Z, r24
    1a36:	17 c0       	rjmp	.+46     	; 0x1a66 <MDIO_ErrorS_GetPortValue+0x92>
		case DIO_PORTB : *P_u8Value = PINB ;break;
    1a38:	e6 e3       	ldi	r30, 0x36	; 54
    1a3a:	f0 e0       	ldi	r31, 0x00	; 0
    1a3c:	80 81       	ld	r24, Z
    1a3e:	eb 81       	ldd	r30, Y+3	; 0x03
    1a40:	fc 81       	ldd	r31, Y+4	; 0x04
    1a42:	80 83       	st	Z, r24
    1a44:	10 c0       	rjmp	.+32     	; 0x1a66 <MDIO_ErrorS_GetPortValue+0x92>
		case DIO_PORTC : *P_u8Value = PINC ;break;
    1a46:	e3 e3       	ldi	r30, 0x33	; 51
    1a48:	f0 e0       	ldi	r31, 0x00	; 0
    1a4a:	80 81       	ld	r24, Z
    1a4c:	eb 81       	ldd	r30, Y+3	; 0x03
    1a4e:	fc 81       	ldd	r31, Y+4	; 0x04
    1a50:	80 83       	st	Z, r24
    1a52:	09 c0       	rjmp	.+18     	; 0x1a66 <MDIO_ErrorS_GetPortValue+0x92>
		case DIO_PORTD : *P_u8Value = PIND ;break;
    1a54:	e0 e3       	ldi	r30, 0x30	; 48
    1a56:	f0 e0       	ldi	r31, 0x00	; 0
    1a58:	80 81       	ld	r24, Z
    1a5a:	eb 81       	ldd	r30, Y+3	; 0x03
    1a5c:	fc 81       	ldd	r31, Y+4	; 0x04
    1a5e:	80 83       	st	Z, r24
    1a60:	02 c0       	rjmp	.+4      	; 0x1a66 <MDIO_ErrorS_GetPortValue+0x92>
		default: errorState = return_Nok; break;
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	89 83       	std	Y+1, r24	; 0x01
	}
	return errorState;
    1a66:	89 81       	ldd	r24, Y+1	; 0x01

}
    1a68:	26 96       	adiw	r28, 0x06	; 6
    1a6a:	0f b6       	in	r0, 0x3f	; 63
    1a6c:	f8 94       	cli
    1a6e:	de bf       	out	0x3e, r29	; 62
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	cd bf       	out	0x3d, r28	; 61
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	08 95       	ret

00001a7a <MDIO_ErrorS_TogPinValue>:

Error_State_t MDIO_ErrorS_TogPinValue( u8 Copy_u8Port , u8 Copy_u8Pin ){
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	00 d0       	rcall	.+0      	; 0x1a80 <MDIO_ErrorS_TogPinValue+0x6>
    1a80:	00 d0       	rcall	.+0      	; 0x1a82 <MDIO_ErrorS_TogPinValue+0x8>
    1a82:	0f 92       	push	r0
    1a84:	cd b7       	in	r28, 0x3d	; 61
    1a86:	de b7       	in	r29, 0x3e	; 62
    1a88:	8a 83       	std	Y+2, r24	; 0x02
    1a8a:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t errorState = return_Ok;
    1a8c:	19 82       	std	Y+1, r1	; 0x01
		switch (Copy_u8Port){
    1a8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a90:	28 2f       	mov	r18, r24
    1a92:	30 e0       	ldi	r19, 0x00	; 0
    1a94:	3d 83       	std	Y+5, r19	; 0x05
    1a96:	2c 83       	std	Y+4, r18	; 0x04
    1a98:	8c 81       	ldd	r24, Y+4	; 0x04
    1a9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a9c:	82 30       	cpi	r24, 0x02	; 2
    1a9e:	91 05       	cpc	r25, r1
    1aa0:	51 f1       	breq	.+84     	; 0x1af6 <MDIO_ErrorS_TogPinValue+0x7c>
    1aa2:	2c 81       	ldd	r18, Y+4	; 0x04
    1aa4:	3d 81       	ldd	r19, Y+5	; 0x05
    1aa6:	23 30       	cpi	r18, 0x03	; 3
    1aa8:	31 05       	cpc	r19, r1
    1aaa:	34 f4       	brge	.+12     	; 0x1ab8 <MDIO_ErrorS_TogPinValue+0x3e>
    1aac:	8c 81       	ldd	r24, Y+4	; 0x04
    1aae:	9d 81       	ldd	r25, Y+5	; 0x05
    1ab0:	81 30       	cpi	r24, 0x01	; 1
    1ab2:	91 05       	cpc	r25, r1
    1ab4:	61 f0       	breq	.+24     	; 0x1ace <MDIO_ErrorS_TogPinValue+0x54>
    1ab6:	5b c0       	rjmp	.+182    	; 0x1b6e <MDIO_ErrorS_TogPinValue+0xf4>
    1ab8:	2c 81       	ldd	r18, Y+4	; 0x04
    1aba:	3d 81       	ldd	r19, Y+5	; 0x05
    1abc:	23 30       	cpi	r18, 0x03	; 3
    1abe:	31 05       	cpc	r19, r1
    1ac0:	71 f1       	breq	.+92     	; 0x1b1e <MDIO_ErrorS_TogPinValue+0xa4>
    1ac2:	8c 81       	ldd	r24, Y+4	; 0x04
    1ac4:	9d 81       	ldd	r25, Y+5	; 0x05
    1ac6:	84 30       	cpi	r24, 0x04	; 4
    1ac8:	91 05       	cpc	r25, r1
    1aca:	e9 f1       	breq	.+122    	; 0x1b46 <MDIO_ErrorS_TogPinValue+0xcc>
    1acc:	50 c0       	rjmp	.+160    	; 0x1b6e <MDIO_ErrorS_TogPinValue+0xf4>
			case DIO_PORTA :  TOGGLE_BIT(PORTA,Copy_u8Pin) ; break;
    1ace:	ab e3       	ldi	r26, 0x3B	; 59
    1ad0:	b0 e0       	ldi	r27, 0x00	; 0
    1ad2:	eb e3       	ldi	r30, 0x3B	; 59
    1ad4:	f0 e0       	ldi	r31, 0x00	; 0
    1ad6:	80 81       	ld	r24, Z
    1ad8:	48 2f       	mov	r20, r24
    1ada:	8b 81       	ldd	r24, Y+3	; 0x03
    1adc:	28 2f       	mov	r18, r24
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	90 e0       	ldi	r25, 0x00	; 0
    1ae4:	02 2e       	mov	r0, r18
    1ae6:	02 c0       	rjmp	.+4      	; 0x1aec <MDIO_ErrorS_TogPinValue+0x72>
    1ae8:	88 0f       	add	r24, r24
    1aea:	99 1f       	adc	r25, r25
    1aec:	0a 94       	dec	r0
    1aee:	e2 f7       	brpl	.-8      	; 0x1ae8 <MDIO_ErrorS_TogPinValue+0x6e>
    1af0:	84 27       	eor	r24, r20
    1af2:	8c 93       	st	X, r24
    1af4:	3e c0       	rjmp	.+124    	; 0x1b72 <MDIO_ErrorS_TogPinValue+0xf8>
			case DIO_PORTB :  TOGGLE_BIT(PORTB,Copy_u8Pin) ;break;
    1af6:	a8 e3       	ldi	r26, 0x38	; 56
    1af8:	b0 e0       	ldi	r27, 0x00	; 0
    1afa:	e8 e3       	ldi	r30, 0x38	; 56
    1afc:	f0 e0       	ldi	r31, 0x00	; 0
    1afe:	80 81       	ld	r24, Z
    1b00:	48 2f       	mov	r20, r24
    1b02:	8b 81       	ldd	r24, Y+3	; 0x03
    1b04:	28 2f       	mov	r18, r24
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	81 e0       	ldi	r24, 0x01	; 1
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	02 2e       	mov	r0, r18
    1b0e:	02 c0       	rjmp	.+4      	; 0x1b14 <MDIO_ErrorS_TogPinValue+0x9a>
    1b10:	88 0f       	add	r24, r24
    1b12:	99 1f       	adc	r25, r25
    1b14:	0a 94       	dec	r0
    1b16:	e2 f7       	brpl	.-8      	; 0x1b10 <MDIO_ErrorS_TogPinValue+0x96>
    1b18:	84 27       	eor	r24, r20
    1b1a:	8c 93       	st	X, r24
    1b1c:	2a c0       	rjmp	.+84     	; 0x1b72 <MDIO_ErrorS_TogPinValue+0xf8>
			case DIO_PORTC :  TOGGLE_BIT(PORTC,Copy_u8Pin) ;break;
    1b1e:	a5 e3       	ldi	r26, 0x35	; 53
    1b20:	b0 e0       	ldi	r27, 0x00	; 0
    1b22:	e5 e3       	ldi	r30, 0x35	; 53
    1b24:	f0 e0       	ldi	r31, 0x00	; 0
    1b26:	80 81       	ld	r24, Z
    1b28:	48 2f       	mov	r20, r24
    1b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	81 e0       	ldi	r24, 0x01	; 1
    1b32:	90 e0       	ldi	r25, 0x00	; 0
    1b34:	02 2e       	mov	r0, r18
    1b36:	02 c0       	rjmp	.+4      	; 0x1b3c <MDIO_ErrorS_TogPinValue+0xc2>
    1b38:	88 0f       	add	r24, r24
    1b3a:	99 1f       	adc	r25, r25
    1b3c:	0a 94       	dec	r0
    1b3e:	e2 f7       	brpl	.-8      	; 0x1b38 <MDIO_ErrorS_TogPinValue+0xbe>
    1b40:	84 27       	eor	r24, r20
    1b42:	8c 93       	st	X, r24
    1b44:	16 c0       	rjmp	.+44     	; 0x1b72 <MDIO_ErrorS_TogPinValue+0xf8>
			case DIO_PORTD :  TOGGLE_BIT(PORTD,Copy_u8Pin) ;break;
    1b46:	a2 e3       	ldi	r26, 0x32	; 50
    1b48:	b0 e0       	ldi	r27, 0x00	; 0
    1b4a:	e2 e3       	ldi	r30, 0x32	; 50
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	80 81       	ld	r24, Z
    1b50:	48 2f       	mov	r20, r24
    1b52:	8b 81       	ldd	r24, Y+3	; 0x03
    1b54:	28 2f       	mov	r18, r24
    1b56:	30 e0       	ldi	r19, 0x00	; 0
    1b58:	81 e0       	ldi	r24, 0x01	; 1
    1b5a:	90 e0       	ldi	r25, 0x00	; 0
    1b5c:	02 2e       	mov	r0, r18
    1b5e:	02 c0       	rjmp	.+4      	; 0x1b64 <MDIO_ErrorS_TogPinValue+0xea>
    1b60:	88 0f       	add	r24, r24
    1b62:	99 1f       	adc	r25, r25
    1b64:	0a 94       	dec	r0
    1b66:	e2 f7       	brpl	.-8      	; 0x1b60 <MDIO_ErrorS_TogPinValue+0xe6>
    1b68:	84 27       	eor	r24, r20
    1b6a:	8c 93       	st	X, r24
    1b6c:	02 c0       	rjmp	.+4      	; 0x1b72 <MDIO_ErrorS_TogPinValue+0xf8>
			default: errorState = return_Nok; break;
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	89 83       	std	Y+1, r24	; 0x01
		}
		return errorState;
    1b72:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b74:	0f 90       	pop	r0
    1b76:	0f 90       	pop	r0
    1b78:	0f 90       	pop	r0
    1b7a:	0f 90       	pop	r0
    1b7c:	0f 90       	pop	r0
    1b7e:	cf 91       	pop	r28
    1b80:	df 91       	pop	r29
    1b82:	08 95       	ret

00001b84 <M_TIMER0_voidInit>:
 ************************************************************************************************/
/*
 * Function to Initialize Timer0
 */

void M_TIMER0_voidInit(const TIMER0_Config *timer_config){
    1b84:	df 93       	push	r29
    1b86:	cf 93       	push	r28
    1b88:	00 d0       	rcall	.+0      	; 0x1b8a <M_TIMER0_voidInit+0x6>
    1b8a:	00 d0       	rcall	.+0      	; 0x1b8c <M_TIMER0_voidInit+0x8>
    1b8c:	cd b7       	in	r28, 0x3d	; 61
    1b8e:	de b7       	in	r29, 0x3e	; 62
    1b90:	9a 83       	std	Y+2, r25	; 0x02
    1b92:	89 83       	std	Y+1, r24	; 0x01
#ifdef PREV
	TCNT0 = timer_config->TCNT0_value ;
    1b94:	a2 e5       	ldi	r26, 0x52	; 82
    1b96:	b0 e0       	ldi	r27, 0x00	; 0
    1b98:	e9 81       	ldd	r30, Y+1	; 0x01
    1b9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b9c:	82 81       	ldd	r24, Z+2	; 0x02
    1b9e:	8c 93       	st	X, r24
	/* Configure Wave generation bits based on user selection */
	if(timer_config->timer0_mode == TIMER0_NORMAL_MODE) {
    1ba0:	e9 81       	ldd	r30, Y+1	; 0x01
    1ba2:	fa 81       	ldd	r31, Y+2	; 0x02
    1ba4:	80 81       	ld	r24, Z
    1ba6:	88 23       	and	r24, r24
    1ba8:	b1 f4       	brne	.+44     	; 0x1bd6 <M_TIMER0_voidInit+0x52>
		CLEAR_BIT(TCCR0,TCCR0_WGM00);
    1baa:	a3 e5       	ldi	r26, 0x53	; 83
    1bac:	b0 e0       	ldi	r27, 0x00	; 0
    1bae:	e3 e5       	ldi	r30, 0x53	; 83
    1bb0:	f0 e0       	ldi	r31, 0x00	; 0
    1bb2:	80 81       	ld	r24, Z
    1bb4:	8f 7b       	andi	r24, 0xBF	; 191
    1bb6:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_WGM01);
    1bb8:	a3 e5       	ldi	r26, 0x53	; 83
    1bba:	b0 e0       	ldi	r27, 0x00	; 0
    1bbc:	e3 e5       	ldi	r30, 0x53	; 83
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	87 7f       	andi	r24, 0xF7	; 247
    1bc4:	8c 93       	st	X, r24

		/* Enable Interrupt bit for this mode */
		SET_BIT(TIMSK,TIMSK_TOIE0);
    1bc6:	a9 e5       	ldi	r26, 0x59	; 89
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	e9 e5       	ldi	r30, 0x59	; 89
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	81 60       	ori	r24, 0x01	; 1
    1bd2:	8c 93       	st	X, r24
    1bd4:	c7 c0       	rjmp	.+398    	; 0x1d64 <M_TIMER0_voidInit+0x1e0>
	}
	else if(timer_config->timer0_mode == TIMER0_CTC_MODE){
    1bd6:	e9 81       	ldd	r30, Y+1	; 0x01
    1bd8:	fa 81       	ldd	r31, Y+2	; 0x02
    1bda:	80 81       	ld	r24, Z
    1bdc:	82 30       	cpi	r24, 0x02	; 2
    1bde:	09 f0       	breq	.+2      	; 0x1be2 <M_TIMER0_voidInit+0x5e>
    1be0:	6c c0       	rjmp	.+216    	; 0x1cba <M_TIMER0_voidInit+0x136>
		CLEAR_BIT(TCCR0,TCCR0_WGM00);
    1be2:	a3 e5       	ldi	r26, 0x53	; 83
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	e3 e5       	ldi	r30, 0x53	; 83
    1be8:	f0 e0       	ldi	r31, 0x00	; 0
    1bea:	80 81       	ld	r24, Z
    1bec:	8f 7b       	andi	r24, 0xBF	; 191
    1bee:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_WGM01);
    1bf0:	a3 e5       	ldi	r26, 0x53	; 83
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	e3 e5       	ldi	r30, 0x53	; 83
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	88 60       	ori	r24, 0x08	; 8
    1bfc:	8c 93       	st	X, r24

		SET_BIT(TIMSK,TIMSK_OCIE0);
    1bfe:	a9 e5       	ldi	r26, 0x59	; 89
    1c00:	b0 e0       	ldi	r27, 0x00	; 0
    1c02:	e9 e5       	ldi	r30, 0x59	; 89
    1c04:	f0 e0       	ldi	r31, 0x00	; 0
    1c06:	80 81       	ld	r24, Z
    1c08:	82 60       	ori	r24, 0x02	; 2
    1c0a:	8c 93       	st	X, r24
		OCR0 = timer_config->OCR_value;
    1c0c:	ac e5       	ldi	r26, 0x5C	; 92
    1c0e:	b0 e0       	ldi	r27, 0x00	; 0
    1c10:	e9 81       	ldd	r30, Y+1	; 0x01
    1c12:	fa 81       	ldd	r31, Y+2	; 0x02
    1c14:	83 81       	ldd	r24, Z+3	; 0x03
    1c16:	8c 93       	st	X, r24
		/* ******************* To configure operation mode********************* */
		if(timer_config->CTC_nonPWM_mode == TIMER0_NORMAL_OP){
    1c18:	e9 81       	ldd	r30, Y+1	; 0x01
    1c1a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c1c:	84 81       	ldd	r24, Z+4	; 0x04
    1c1e:	88 23       	and	r24, r24
    1c20:	79 f4       	brne	.+30     	; 0x1c40 <M_TIMER0_voidInit+0xbc>
			CLEAR_BIT(TCCR0,TCCR0_COM00);
    1c22:	a3 e5       	ldi	r26, 0x53	; 83
    1c24:	b0 e0       	ldi	r27, 0x00	; 0
    1c26:	e3 e5       	ldi	r30, 0x53	; 83
    1c28:	f0 e0       	ldi	r31, 0x00	; 0
    1c2a:	80 81       	ld	r24, Z
    1c2c:	8f 7e       	andi	r24, 0xEF	; 239
    1c2e:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,TCCR0_COM01);
    1c30:	a3 e5       	ldi	r26, 0x53	; 83
    1c32:	b0 e0       	ldi	r27, 0x00	; 0
    1c34:	e3 e5       	ldi	r30, 0x53	; 83
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	80 81       	ld	r24, Z
    1c3a:	8f 7d       	andi	r24, 0xDF	; 223
    1c3c:	8c 93       	st	X, r24
    1c3e:	92 c0       	rjmp	.+292    	; 0x1d64 <M_TIMER0_voidInit+0x1e0>
		}
		else if(timer_config->CTC_nonPWM_mode == TIMER0_TOGGLE_OC0_OP){
    1c40:	e9 81       	ldd	r30, Y+1	; 0x01
    1c42:	fa 81       	ldd	r31, Y+2	; 0x02
    1c44:	84 81       	ldd	r24, Z+4	; 0x04
    1c46:	81 30       	cpi	r24, 0x01	; 1
    1c48:	79 f4       	brne	.+30     	; 0x1c68 <M_TIMER0_voidInit+0xe4>
			SET_BIT(TCCR0,TCCR0_COM00);
    1c4a:	a3 e5       	ldi	r26, 0x53	; 83
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	e3 e5       	ldi	r30, 0x53	; 83
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	80 61       	ori	r24, 0x10	; 16
    1c56:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,TCCR0_COM01);
    1c58:	a3 e5       	ldi	r26, 0x53	; 83
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	e3 e5       	ldi	r30, 0x53	; 83
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	8f 7d       	andi	r24, 0xDF	; 223
    1c64:	8c 93       	st	X, r24
    1c66:	7e c0       	rjmp	.+252    	; 0x1d64 <M_TIMER0_voidInit+0x1e0>
		}
		else if(timer_config->CTC_nonPWM_mode == TIMER0_CLEAR_OC0_OP){
    1c68:	e9 81       	ldd	r30, Y+1	; 0x01
    1c6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c6c:	84 81       	ldd	r24, Z+4	; 0x04
    1c6e:	82 30       	cpi	r24, 0x02	; 2
    1c70:	79 f4       	brne	.+30     	; 0x1c90 <M_TIMER0_voidInit+0x10c>
			CLEAR_BIT(TCCR0,TCCR0_COM00);
    1c72:	a3 e5       	ldi	r26, 0x53	; 83
    1c74:	b0 e0       	ldi	r27, 0x00	; 0
    1c76:	e3 e5       	ldi	r30, 0x53	; 83
    1c78:	f0 e0       	ldi	r31, 0x00	; 0
    1c7a:	80 81       	ld	r24, Z
    1c7c:	8f 7e       	andi	r24, 0xEF	; 239
    1c7e:	8c 93       	st	X, r24
			SET_BIT(TCCR0,TCCR0_COM01);
    1c80:	a3 e5       	ldi	r26, 0x53	; 83
    1c82:	b0 e0       	ldi	r27, 0x00	; 0
    1c84:	e3 e5       	ldi	r30, 0x53	; 83
    1c86:	f0 e0       	ldi	r31, 0x00	; 0
    1c88:	80 81       	ld	r24, Z
    1c8a:	80 62       	ori	r24, 0x20	; 32
    1c8c:	8c 93       	st	X, r24
    1c8e:	6a c0       	rjmp	.+212    	; 0x1d64 <M_TIMER0_voidInit+0x1e0>
		}
		else if(timer_config->CTC_nonPWM_mode == TIMER0_SET_OC0_OP){
    1c90:	e9 81       	ldd	r30, Y+1	; 0x01
    1c92:	fa 81       	ldd	r31, Y+2	; 0x02
    1c94:	84 81       	ldd	r24, Z+4	; 0x04
    1c96:	83 30       	cpi	r24, 0x03	; 3
    1c98:	09 f0       	breq	.+2      	; 0x1c9c <M_TIMER0_voidInit+0x118>
    1c9a:	64 c0       	rjmp	.+200    	; 0x1d64 <M_TIMER0_voidInit+0x1e0>
			SET_BIT(TCCR0,TCCR0_COM00);
    1c9c:	a3 e5       	ldi	r26, 0x53	; 83
    1c9e:	b0 e0       	ldi	r27, 0x00	; 0
    1ca0:	e3 e5       	ldi	r30, 0x53	; 83
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	80 81       	ld	r24, Z
    1ca6:	80 61       	ori	r24, 0x10	; 16
    1ca8:	8c 93       	st	X, r24
			SET_BIT(TCCR0,TCCR0_COM01);
    1caa:	a3 e5       	ldi	r26, 0x53	; 83
    1cac:	b0 e0       	ldi	r27, 0x00	; 0
    1cae:	e3 e5       	ldi	r30, 0x53	; 83
    1cb0:	f0 e0       	ldi	r31, 0x00	; 0
    1cb2:	80 81       	ld	r24, Z
    1cb4:	80 62       	ori	r24, 0x20	; 32
    1cb6:	8c 93       	st	X, r24
    1cb8:	55 c0       	rjmp	.+170    	; 0x1d64 <M_TIMER0_voidInit+0x1e0>
		}
	}
	else if(timer_config->timer0_mode == TIMER0_PWM_FAST_MODE){
    1cba:	e9 81       	ldd	r30, Y+1	; 0x01
    1cbc:	fa 81       	ldd	r31, Y+2	; 0x02
    1cbe:	80 81       	ld	r24, Z
    1cc0:	83 30       	cpi	r24, 0x03	; 3
    1cc2:	09 f0       	breq	.+2      	; 0x1cc6 <M_TIMER0_voidInit+0x142>
    1cc4:	4f c0       	rjmp	.+158    	; 0x1d64 <M_TIMER0_voidInit+0x1e0>
		SET_BIT(TCCR0,TCCR0_WGM00);
    1cc6:	a3 e5       	ldi	r26, 0x53	; 83
    1cc8:	b0 e0       	ldi	r27, 0x00	; 0
    1cca:	e3 e5       	ldi	r30, 0x53	; 83
    1ccc:	f0 e0       	ldi	r31, 0x00	; 0
    1cce:	80 81       	ld	r24, Z
    1cd0:	80 64       	ori	r24, 0x40	; 64
    1cd2:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_WGM01);
    1cd4:	a3 e5       	ldi	r26, 0x53	; 83
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	e3 e5       	ldi	r30, 0x53	; 83
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	88 60       	ori	r24, 0x08	; 8
    1ce0:	8c 93       	st	X, r24

		OCR0 = timer_config->OCR_value;
    1ce2:	ac e5       	ldi	r26, 0x5C	; 92
    1ce4:	b0 e0       	ldi	r27, 0x00	; 0
    1ce6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ce8:	fa 81       	ldd	r31, Y+2	; 0x02
    1cea:	83 81       	ldd	r24, Z+3	; 0x03
    1cec:	8c 93       	st	X, r24
		/* ******************* To configure operation mode********************* */
		if(timer_config->PWM_mode == TIMER0_PWM_NORMAL_OP){
    1cee:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf0:	fa 81       	ldd	r31, Y+2	; 0x02
    1cf2:	85 81       	ldd	r24, Z+5	; 0x05
    1cf4:	88 23       	and	r24, r24
    1cf6:	79 f4       	brne	.+30     	; 0x1d16 <M_TIMER0_voidInit+0x192>
			CLEAR_BIT(TCCR0,TCCR0_COM00);
    1cf8:	a3 e5       	ldi	r26, 0x53	; 83
    1cfa:	b0 e0       	ldi	r27, 0x00	; 0
    1cfc:	e3 e5       	ldi	r30, 0x53	; 83
    1cfe:	f0 e0       	ldi	r31, 0x00	; 0
    1d00:	80 81       	ld	r24, Z
    1d02:	8f 7e       	andi	r24, 0xEF	; 239
    1d04:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,TCCR0_COM01);
    1d06:	a3 e5       	ldi	r26, 0x53	; 83
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	e3 e5       	ldi	r30, 0x53	; 83
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	80 81       	ld	r24, Z
    1d10:	8f 7d       	andi	r24, 0xDF	; 223
    1d12:	8c 93       	st	X, r24
    1d14:	27 c0       	rjmp	.+78     	; 0x1d64 <M_TIMER0_voidInit+0x1e0>
		}
		else if(timer_config->PWM_mode == TIMER0_NON_INVERTING_MODE){
    1d16:	e9 81       	ldd	r30, Y+1	; 0x01
    1d18:	fa 81       	ldd	r31, Y+2	; 0x02
    1d1a:	85 81       	ldd	r24, Z+5	; 0x05
    1d1c:	82 30       	cpi	r24, 0x02	; 2
    1d1e:	79 f4       	brne	.+30     	; 0x1d3e <M_TIMER0_voidInit+0x1ba>
			CLEAR_BIT(TCCR0,TCCR0_COM00);
    1d20:	a3 e5       	ldi	r26, 0x53	; 83
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	e3 e5       	ldi	r30, 0x53	; 83
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	80 81       	ld	r24, Z
    1d2a:	8f 7e       	andi	r24, 0xEF	; 239
    1d2c:	8c 93       	st	X, r24
			SET_BIT(TCCR0,TCCR0_COM01);
    1d2e:	a3 e5       	ldi	r26, 0x53	; 83
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	e3 e5       	ldi	r30, 0x53	; 83
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	80 62       	ori	r24, 0x20	; 32
    1d3a:	8c 93       	st	X, r24
    1d3c:	13 c0       	rjmp	.+38     	; 0x1d64 <M_TIMER0_voidInit+0x1e0>
		}
		else if(timer_config->PWM_mode == TIMER0_INVERTING_MODE){
    1d3e:	e9 81       	ldd	r30, Y+1	; 0x01
    1d40:	fa 81       	ldd	r31, Y+2	; 0x02
    1d42:	85 81       	ldd	r24, Z+5	; 0x05
    1d44:	83 30       	cpi	r24, 0x03	; 3
    1d46:	71 f4       	brne	.+28     	; 0x1d64 <M_TIMER0_voidInit+0x1e0>
			SET_BIT(TCCR0,TCCR0_COM00);
    1d48:	a3 e5       	ldi	r26, 0x53	; 83
    1d4a:	b0 e0       	ldi	r27, 0x00	; 0
    1d4c:	e3 e5       	ldi	r30, 0x53	; 83
    1d4e:	f0 e0       	ldi	r31, 0x00	; 0
    1d50:	80 81       	ld	r24, Z
    1d52:	80 61       	ori	r24, 0x10	; 16
    1d54:	8c 93       	st	X, r24
			SET_BIT(TCCR0,TCCR0_COM01);
    1d56:	a3 e5       	ldi	r26, 0x53	; 83
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	e3 e5       	ldi	r30, 0x53	; 83
    1d5c:	f0 e0       	ldi	r31, 0x00	; 0
    1d5e:	80 81       	ld	r24, Z
    1d60:	80 62       	ori	r24, 0x20	; 32
    1d62:	8c 93       	st	X, r24
		}
	}
/*   Select prescaler    */
	switch(timer_config->select_prescaler){
    1d64:	e9 81       	ldd	r30, Y+1	; 0x01
    1d66:	fa 81       	ldd	r31, Y+2	; 0x02
    1d68:	81 81       	ldd	r24, Z+1	; 0x01
    1d6a:	28 2f       	mov	r18, r24
    1d6c:	30 e0       	ldi	r19, 0x00	; 0
    1d6e:	3c 83       	std	Y+4, r19	; 0x04
    1d70:	2b 83       	std	Y+3, r18	; 0x03
    1d72:	8b 81       	ldd	r24, Y+3	; 0x03
    1d74:	9c 81       	ldd	r25, Y+4	; 0x04
    1d76:	83 30       	cpi	r24, 0x03	; 3
    1d78:	91 05       	cpc	r25, r1
    1d7a:	09 f4       	brne	.+2      	; 0x1d7e <M_TIMER0_voidInit+0x1fa>
    1d7c:	70 c0       	rjmp	.+224    	; 0x1e5e <M_TIMER0_voidInit+0x2da>
    1d7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d80:	3c 81       	ldd	r19, Y+4	; 0x04
    1d82:	24 30       	cpi	r18, 0x04	; 4
    1d84:	31 05       	cpc	r19, r1
    1d86:	84 f4       	brge	.+32     	; 0x1da8 <M_TIMER0_voidInit+0x224>
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8c:	81 30       	cpi	r24, 0x01	; 1
    1d8e:	91 05       	cpc	r25, r1
    1d90:	d1 f1       	breq	.+116    	; 0x1e06 <M_TIMER0_voidInit+0x282>
    1d92:	2b 81       	ldd	r18, Y+3	; 0x03
    1d94:	3c 81       	ldd	r19, Y+4	; 0x04
    1d96:	22 30       	cpi	r18, 0x02	; 2
    1d98:	31 05       	cpc	r19, r1
    1d9a:	0c f0       	brlt	.+2      	; 0x1d9e <M_TIMER0_voidInit+0x21a>
    1d9c:	4a c0       	rjmp	.+148    	; 0x1e32 <M_TIMER0_voidInit+0x2ae>
    1d9e:	8b 81       	ldd	r24, Y+3	; 0x03
    1da0:	9c 81       	ldd	r25, Y+4	; 0x04
    1da2:	00 97       	sbiw	r24, 0x00	; 0
    1da4:	d1 f0       	breq	.+52     	; 0x1dda <M_TIMER0_voidInit+0x256>
    1da6:	c8 c0       	rjmp	.+400    	; 0x1f38 <M_TIMER0_voidInit+0x3b4>
    1da8:	2b 81       	ldd	r18, Y+3	; 0x03
    1daa:	3c 81       	ldd	r19, Y+4	; 0x04
    1dac:	25 30       	cpi	r18, 0x05	; 5
    1dae:	31 05       	cpc	r19, r1
    1db0:	09 f4       	brne	.+2      	; 0x1db4 <M_TIMER0_voidInit+0x230>
    1db2:	81 c0       	rjmp	.+258    	; 0x1eb6 <M_TIMER0_voidInit+0x332>
    1db4:	8b 81       	ldd	r24, Y+3	; 0x03
    1db6:	9c 81       	ldd	r25, Y+4	; 0x04
    1db8:	85 30       	cpi	r24, 0x05	; 5
    1dba:	91 05       	cpc	r25, r1
    1dbc:	0c f4       	brge	.+2      	; 0x1dc0 <M_TIMER0_voidInit+0x23c>
    1dbe:	65 c0       	rjmp	.+202    	; 0x1e8a <M_TIMER0_voidInit+0x306>
    1dc0:	2b 81       	ldd	r18, Y+3	; 0x03
    1dc2:	3c 81       	ldd	r19, Y+4	; 0x04
    1dc4:	26 30       	cpi	r18, 0x06	; 6
    1dc6:	31 05       	cpc	r19, r1
    1dc8:	09 f4       	brne	.+2      	; 0x1dcc <M_TIMER0_voidInit+0x248>
    1dca:	8b c0       	rjmp	.+278    	; 0x1ee2 <M_TIMER0_voidInit+0x35e>
    1dcc:	8b 81       	ldd	r24, Y+3	; 0x03
    1dce:	9c 81       	ldd	r25, Y+4	; 0x04
    1dd0:	87 30       	cpi	r24, 0x07	; 7
    1dd2:	91 05       	cpc	r25, r1
    1dd4:	09 f4       	brne	.+2      	; 0x1dd8 <M_TIMER0_voidInit+0x254>
    1dd6:	9b c0       	rjmp	.+310    	; 0x1f0e <M_TIMER0_voidInit+0x38a>
    1dd8:	af c0       	rjmp	.+350    	; 0x1f38 <M_TIMER0_voidInit+0x3b4>

	case NO_CLK:    CLEAR_BIT(TCCR0,TCCR0_CS00);
    1dda:	a3 e5       	ldi	r26, 0x53	; 83
    1ddc:	b0 e0       	ldi	r27, 0x00	; 0
    1dde:	e3 e5       	ldi	r30, 0x53	; 83
    1de0:	f0 e0       	ldi	r31, 0x00	; 0
    1de2:	80 81       	ld	r24, Z
    1de4:	8e 7f       	andi	r24, 0xFE	; 254
    1de6:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR0,TCCR0_CS01);
    1de8:	a3 e5       	ldi	r26, 0x53	; 83
    1dea:	b0 e0       	ldi	r27, 0x00	; 0
    1dec:	e3 e5       	ldi	r30, 0x53	; 83
    1dee:	f0 e0       	ldi	r31, 0x00	; 0
    1df0:	80 81       	ld	r24, Z
    1df2:	8d 7f       	andi	r24, 0xFD	; 253
    1df4:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR0,TCCR0_CS02);
    1df6:	a3 e5       	ldi	r26, 0x53	; 83
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	e3 e5       	ldi	r30, 0x53	; 83
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 81       	ld	r24, Z
    1e00:	8b 7f       	andi	r24, 0xFB	; 251
    1e02:	8c 93       	st	X, r24
    1e04:	99 c0       	rjmp	.+306    	; 0x1f38 <M_TIMER0_voidInit+0x3b4>
					break;
	case NO_PRESC:  SET_BIT(TCCR0,TCCR0_CS00);
    1e06:	a3 e5       	ldi	r26, 0x53	; 83
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e3 e5       	ldi	r30, 0x53	; 83
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 81       	ld	r24, Z
    1e10:	81 60       	ori	r24, 0x01	; 1
    1e12:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR0,TCCR0_CS01);
    1e14:	a3 e5       	ldi	r26, 0x53	; 83
    1e16:	b0 e0       	ldi	r27, 0x00	; 0
    1e18:	e3 e5       	ldi	r30, 0x53	; 83
    1e1a:	f0 e0       	ldi	r31, 0x00	; 0
    1e1c:	80 81       	ld	r24, Z
    1e1e:	8d 7f       	andi	r24, 0xFD	; 253
    1e20:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR0,TCCR0_CS02);
    1e22:	a3 e5       	ldi	r26, 0x53	; 83
    1e24:	b0 e0       	ldi	r27, 0x00	; 0
    1e26:	e3 e5       	ldi	r30, 0x53	; 83
    1e28:	f0 e0       	ldi	r31, 0x00	; 0
    1e2a:	80 81       	ld	r24, Z
    1e2c:	8b 7f       	andi	r24, 0xFB	; 251
    1e2e:	8c 93       	st	X, r24
    1e30:	83 c0       	rjmp	.+262    	; 0x1f38 <M_TIMER0_voidInit+0x3b4>
					break;
	case PRESC_8:   CLEAR_BIT(TCCR0,TCCR0_CS00);
    1e32:	a3 e5       	ldi	r26, 0x53	; 83
    1e34:	b0 e0       	ldi	r27, 0x00	; 0
    1e36:	e3 e5       	ldi	r30, 0x53	; 83
    1e38:	f0 e0       	ldi	r31, 0x00	; 0
    1e3a:	80 81       	ld	r24, Z
    1e3c:	8e 7f       	andi	r24, 0xFE	; 254
    1e3e:	8c 93       	st	X, r24
	                SET_BIT(TCCR0,TCCR0_CS01);
    1e40:	a3 e5       	ldi	r26, 0x53	; 83
    1e42:	b0 e0       	ldi	r27, 0x00	; 0
    1e44:	e3 e5       	ldi	r30, 0x53	; 83
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	82 60       	ori	r24, 0x02	; 2
    1e4c:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR0,TCCR0_CS02);
    1e4e:	a3 e5       	ldi	r26, 0x53	; 83
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	e3 e5       	ldi	r30, 0x53	; 83
    1e54:	f0 e0       	ldi	r31, 0x00	; 0
    1e56:	80 81       	ld	r24, Z
    1e58:	8b 7f       	andi	r24, 0xFB	; 251
    1e5a:	8c 93       	st	X, r24
    1e5c:	6d c0       	rjmp	.+218    	; 0x1f38 <M_TIMER0_voidInit+0x3b4>
					break;
	case PRESC_64:  SET_BIT(TCCR0,TCCR0_CS00);
    1e5e:	a3 e5       	ldi	r26, 0x53	; 83
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	e3 e5       	ldi	r30, 0x53	; 83
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	80 81       	ld	r24, Z
    1e68:	81 60       	ori	r24, 0x01	; 1
    1e6a:	8c 93       	st	X, r24
	                SET_BIT(TCCR0,TCCR0_CS01);
    1e6c:	a3 e5       	ldi	r26, 0x53	; 83
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	e3 e5       	ldi	r30, 0x53	; 83
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	80 81       	ld	r24, Z
    1e76:	82 60       	ori	r24, 0x02	; 2
    1e78:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR0,TCCR0_CS02);
    1e7a:	a3 e5       	ldi	r26, 0x53	; 83
    1e7c:	b0 e0       	ldi	r27, 0x00	; 0
    1e7e:	e3 e5       	ldi	r30, 0x53	; 83
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	80 81       	ld	r24, Z
    1e84:	8b 7f       	andi	r24, 0xFB	; 251
    1e86:	8c 93       	st	X, r24
    1e88:	57 c0       	rjmp	.+174    	; 0x1f38 <M_TIMER0_voidInit+0x3b4>
					break;
	case PRESC_256:
		            CLEAR_BIT(TCCR0,TCCR0_CS00);
    1e8a:	a3 e5       	ldi	r26, 0x53	; 83
    1e8c:	b0 e0       	ldi	r27, 0x00	; 0
    1e8e:	e3 e5       	ldi	r30, 0x53	; 83
    1e90:	f0 e0       	ldi	r31, 0x00	; 0
    1e92:	80 81       	ld	r24, Z
    1e94:	8e 7f       	andi	r24, 0xFE	; 254
    1e96:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR0,TCCR0_CS01);
    1e98:	a3 e5       	ldi	r26, 0x53	; 83
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	e3 e5       	ldi	r30, 0x53	; 83
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	8d 7f       	andi	r24, 0xFD	; 253
    1ea4:	8c 93       	st	X, r24
					SET_BIT(TCCR0,TCCR0_CS02);
    1ea6:	a3 e5       	ldi	r26, 0x53	; 83
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	e3 e5       	ldi	r30, 0x53	; 83
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	84 60       	ori	r24, 0x04	; 4
    1eb2:	8c 93       	st	X, r24
    1eb4:	41 c0       	rjmp	.+130    	; 0x1f38 <M_TIMER0_voidInit+0x3b4>
					break;
	case PRESC_1024:
	            	SET_BIT(TCCR0,TCCR0_CS00);
    1eb6:	a3 e5       	ldi	r26, 0x53	; 83
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e3 e5       	ldi	r30, 0x53	; 83
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	81 60       	ori	r24, 0x01	; 1
    1ec2:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR0,TCCR0_CS01);
    1ec4:	a3 e5       	ldi	r26, 0x53	; 83
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	e3 e5       	ldi	r30, 0x53	; 83
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	8d 7f       	andi	r24, 0xFD	; 253
    1ed0:	8c 93       	st	X, r24
					SET_BIT(TCCR0,TCCR0_CS02);
    1ed2:	a3 e5       	ldi	r26, 0x53	; 83
    1ed4:	b0 e0       	ldi	r27, 0x00	; 0
    1ed6:	e3 e5       	ldi	r30, 0x53	; 83
    1ed8:	f0 e0       	ldi	r31, 0x00	; 0
    1eda:	80 81       	ld	r24, Z
    1edc:	84 60       	ori	r24, 0x04	; 4
    1ede:	8c 93       	st	X, r24
    1ee0:	2b c0       	rjmp	.+86     	; 0x1f38 <M_TIMER0_voidInit+0x3b4>
					break;
	case EXTERNAL_FALLING:
		            CLEAR_BIT(TCCR0,TCCR0_CS00);
    1ee2:	a3 e5       	ldi	r26, 0x53	; 83
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	e3 e5       	ldi	r30, 0x53	; 83
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	8e 7f       	andi	r24, 0xFE	; 254
    1eee:	8c 93       	st	X, r24
		            SET_BIT(TCCR0,TCCR0_CS01);
    1ef0:	a3 e5       	ldi	r26, 0x53	; 83
    1ef2:	b0 e0       	ldi	r27, 0x00	; 0
    1ef4:	e3 e5       	ldi	r30, 0x53	; 83
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	80 81       	ld	r24, Z
    1efa:	82 60       	ori	r24, 0x02	; 2
    1efc:	8c 93       	st	X, r24
		            SET_BIT(TCCR0,TCCR0_CS02);
    1efe:	a3 e5       	ldi	r26, 0x53	; 83
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	e3 e5       	ldi	r30, 0x53	; 83
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	84 60       	ori	r24, 0x04	; 4
    1f0a:	8c 93       	st	X, r24
    1f0c:	15 c0       	rjmp	.+42     	; 0x1f38 <M_TIMER0_voidInit+0x3b4>
					break;
	case EXTERNAL_RISING:
					SET_BIT(TCCR0,TCCR0_CS00);
    1f0e:	a3 e5       	ldi	r26, 0x53	; 83
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	e3 e5       	ldi	r30, 0x53	; 83
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	81 60       	ori	r24, 0x01	; 1
    1f1a:	8c 93       	st	X, r24
					SET_BIT(TCCR0,TCCR0_CS01);
    1f1c:	a3 e5       	ldi	r26, 0x53	; 83
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	e3 e5       	ldi	r30, 0x53	; 83
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	82 60       	ori	r24, 0x02	; 2
    1f28:	8c 93       	st	X, r24
					SET_BIT(TCCR0,TCCR0_CS02);
    1f2a:	a3 e5       	ldi	r26, 0x53	; 83
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	e3 e5       	ldi	r30, 0x53	; 83
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	84 60       	ori	r24, 0x04	; 4
    1f36:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_FOC0);
		/* Enable interrupt */
		SET_BIT(TIMSK,TIMSK_TOIE0);
	}
#endif
}
    1f38:	0f 90       	pop	r0
    1f3a:	0f 90       	pop	r0
    1f3c:	0f 90       	pop	r0
    1f3e:	0f 90       	pop	r0
    1f40:	cf 91       	pop	r28
    1f42:	df 91       	pop	r29
    1f44:	08 95       	ret

00001f46 <M_TIMER0_voidSetDutyCylce>:

void M_TIMER0_voidSetDutyCylce(u8 duty_cycle){
    1f46:	df 93       	push	r29
    1f48:	cf 93       	push	r28
    1f4a:	0f 92       	push	r0
    1f4c:	cd b7       	in	r28, 0x3d	; 61
    1f4e:	de b7       	in	r29, 0x3e	; 62
    1f50:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = duty_cycle;
    1f52:	ec e5       	ldi	r30, 0x5C	; 92
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	89 81       	ldd	r24, Y+1	; 0x01
    1f58:	80 83       	st	Z, r24
}
    1f5a:	0f 90       	pop	r0
    1f5c:	cf 91       	pop	r28
    1f5e:	df 91       	pop	r29
    1f60:	08 95       	ret

00001f62 <M_TIMER0_voidDisable>:

void M_TIMER0_voidDisable(void){
    1f62:	df 93       	push	r29
    1f64:	cf 93       	push	r28
    1f66:	cd b7       	in	r28, 0x3d	; 61
    1f68:	de b7       	in	r29, 0x3e	; 62
	/* Select PRESCALER as No_Clk */
	CLEAR_BIT(TCCR0 , TCCR0_CS00);
    1f6a:	a3 e5       	ldi	r26, 0x53	; 83
    1f6c:	b0 e0       	ldi	r27, 0x00	; 0
    1f6e:	e3 e5       	ldi	r30, 0x53	; 83
    1f70:	f0 e0       	ldi	r31, 0x00	; 0
    1f72:	80 81       	ld	r24, Z
    1f74:	8e 7f       	andi	r24, 0xFE	; 254
    1f76:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0 , TCCR0_CS01);
    1f78:	a3 e5       	ldi	r26, 0x53	; 83
    1f7a:	b0 e0       	ldi	r27, 0x00	; 0
    1f7c:	e3 e5       	ldi	r30, 0x53	; 83
    1f7e:	f0 e0       	ldi	r31, 0x00	; 0
    1f80:	80 81       	ld	r24, Z
    1f82:	8d 7f       	andi	r24, 0xFD	; 253
    1f84:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0 , TCCR0_CS02);
    1f86:	a3 e5       	ldi	r26, 0x53	; 83
    1f88:	b0 e0       	ldi	r27, 0x00	; 0
    1f8a:	e3 e5       	ldi	r30, 0x53	; 83
    1f8c:	f0 e0       	ldi	r31, 0x00	; 0
    1f8e:	80 81       	ld	r24, Z
    1f90:	8b 7f       	andi	r24, 0xFB	; 251
    1f92:	8c 93       	st	X, r24
}
    1f94:	cf 91       	pop	r28
    1f96:	df 91       	pop	r29
    1f98:	08 95       	ret

00001f9a <M_TIMER0_voidSetPreLoad>:
void M_TIMER0_voidSetPreLoad(u8 preload){
    1f9a:	df 93       	push	r29
    1f9c:	cf 93       	push	r28
    1f9e:	0f 92       	push	r0
    1fa0:	cd b7       	in	r28, 0x3d	; 61
    1fa2:	de b7       	in	r29, 0x3e	; 62
    1fa4:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = preload;
    1fa6:	e2 e5       	ldi	r30, 0x52	; 82
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	89 81       	ldd	r24, Y+1	; 0x01
    1fac:	80 83       	st	Z, r24
}
    1fae:	0f 90       	pop	r0
    1fb0:	cf 91       	pop	r28
    1fb2:	df 91       	pop	r29
    1fb4:	08 95       	ret

00001fb6 <M_TIMER0_voidSetCallBack>:
void M_TIMER0_voidSetCallBack(void(*a_ptr)(void)){
    1fb6:	df 93       	push	r29
    1fb8:	cf 93       	push	r28
    1fba:	00 d0       	rcall	.+0      	; 0x1fbc <M_TIMER0_voidSetCallBack+0x6>
    1fbc:	cd b7       	in	r28, 0x3d	; 61
    1fbe:	de b7       	in	r29, 0x3e	; 62
    1fc0:	9a 83       	std	Y+2, r25	; 0x02
    1fc2:	89 83       	std	Y+1, r24	; 0x01
	g_pf = a_ptr;
    1fc4:	89 81       	ldd	r24, Y+1	; 0x01
    1fc6:	9a 81       	ldd	r25, Y+2	; 0x02
    1fc8:	90 93 7b 01 	sts	0x017B, r25
    1fcc:	80 93 7a 01 	sts	0x017A, r24
}
    1fd0:	0f 90       	pop	r0
    1fd2:	0f 90       	pop	r0
    1fd4:	cf 91       	pop	r28
    1fd6:	df 91       	pop	r29
    1fd8:	08 95       	ret

00001fda <M_TIMER0_voidSelectPrescaler>:
void M_TIMER0_voidSelectPrescaler(TIMER0_PRESCALER value){
    1fda:	df 93       	push	r29
    1fdc:	cf 93       	push	r28
    1fde:	0f 92       	push	r0
    1fe0:	cd b7       	in	r28, 0x3d	; 61
    1fe2:	de b7       	in	r29, 0x3e	; 62
    1fe4:	89 83       	std	Y+1, r24	; 0x01
	/* Configure CS00 ~ CS02 for prescaler */
	TCCR0= (TCCR0 & 0xF8) | (value & 0x07);
    1fe6:	a3 e5       	ldi	r26, 0x53	; 83
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	e3 e5       	ldi	r30, 0x53	; 83
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 81       	ld	r24, Z
    1ff0:	98 2f       	mov	r25, r24
    1ff2:	98 7f       	andi	r25, 0xF8	; 248
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	87 70       	andi	r24, 0x07	; 7
    1ff8:	89 2b       	or	r24, r25
    1ffa:	8c 93       	st	X, r24
}
    1ffc:	0f 90       	pop	r0
    1ffe:	cf 91       	pop	r28
    2000:	df 91       	pop	r29
    2002:	08 95       	ret

00002004 <__vector_11>:

/*************************** Set ISR ********************************/

void __vector_11(void)       __attribute__((signal));
void __vector_11(void){
    2004:	1f 92       	push	r1
    2006:	0f 92       	push	r0
    2008:	0f b6       	in	r0, 0x3f	; 63
    200a:	0f 92       	push	r0
    200c:	11 24       	eor	r1, r1
    200e:	2f 93       	push	r18
    2010:	3f 93       	push	r19
    2012:	4f 93       	push	r20
    2014:	5f 93       	push	r21
    2016:	6f 93       	push	r22
    2018:	7f 93       	push	r23
    201a:	8f 93       	push	r24
    201c:	9f 93       	push	r25
    201e:	af 93       	push	r26
    2020:	bf 93       	push	r27
    2022:	ef 93       	push	r30
    2024:	ff 93       	push	r31
    2026:	df 93       	push	r29
    2028:	cf 93       	push	r28
    202a:	cd b7       	in	r28, 0x3d	; 61
    202c:	de b7       	in	r29, 0x3e	; 62
	if(g_pf != NULL_PTR ){
    202e:	80 91 7a 01 	lds	r24, 0x017A
    2032:	90 91 7b 01 	lds	r25, 0x017B
    2036:	00 97       	sbiw	r24, 0x00	; 0
    2038:	29 f0       	breq	.+10     	; 0x2044 <__vector_11+0x40>
		(*g_pf)();
    203a:	e0 91 7a 01 	lds	r30, 0x017A
    203e:	f0 91 7b 01 	lds	r31, 0x017B
    2042:	09 95       	icall
	}
}
    2044:	cf 91       	pop	r28
    2046:	df 91       	pop	r29
    2048:	ff 91       	pop	r31
    204a:	ef 91       	pop	r30
    204c:	bf 91       	pop	r27
    204e:	af 91       	pop	r26
    2050:	9f 91       	pop	r25
    2052:	8f 91       	pop	r24
    2054:	7f 91       	pop	r23
    2056:	6f 91       	pop	r22
    2058:	5f 91       	pop	r21
    205a:	4f 91       	pop	r20
    205c:	3f 91       	pop	r19
    205e:	2f 91       	pop	r18
    2060:	0f 90       	pop	r0
    2062:	0f be       	out	0x3f, r0	; 63
    2064:	0f 90       	pop	r0
    2066:	1f 90       	pop	r1
    2068:	18 95       	reti

0000206a <__vector_10>:

void __vector_10(void)       __attribute__((signal));

void __vector_10(void){
    206a:	1f 92       	push	r1
    206c:	0f 92       	push	r0
    206e:	0f b6       	in	r0, 0x3f	; 63
    2070:	0f 92       	push	r0
    2072:	11 24       	eor	r1, r1
    2074:	2f 93       	push	r18
    2076:	3f 93       	push	r19
    2078:	4f 93       	push	r20
    207a:	5f 93       	push	r21
    207c:	6f 93       	push	r22
    207e:	7f 93       	push	r23
    2080:	8f 93       	push	r24
    2082:	9f 93       	push	r25
    2084:	af 93       	push	r26
    2086:	bf 93       	push	r27
    2088:	ef 93       	push	r30
    208a:	ff 93       	push	r31
    208c:	df 93       	push	r29
    208e:	cf 93       	push	r28
    2090:	cd b7       	in	r28, 0x3d	; 61
    2092:	de b7       	in	r29, 0x3e	; 62
	if(g_pf != NULL_PTR ){
    2094:	80 91 7a 01 	lds	r24, 0x017A
    2098:	90 91 7b 01 	lds	r25, 0x017B
    209c:	00 97       	sbiw	r24, 0x00	; 0
    209e:	29 f0       	breq	.+10     	; 0x20aa <__vector_10+0x40>
		(*g_pf)();
    20a0:	e0 91 7a 01 	lds	r30, 0x017A
    20a4:	f0 91 7b 01 	lds	r31, 0x017B
    20a8:	09 95       	icall
	}
}
    20aa:	cf 91       	pop	r28
    20ac:	df 91       	pop	r29
    20ae:	ff 91       	pop	r31
    20b0:	ef 91       	pop	r30
    20b2:	bf 91       	pop	r27
    20b4:	af 91       	pop	r26
    20b6:	9f 91       	pop	r25
    20b8:	8f 91       	pop	r24
    20ba:	7f 91       	pop	r23
    20bc:	6f 91       	pop	r22
    20be:	5f 91       	pop	r21
    20c0:	4f 91       	pop	r20
    20c2:	3f 91       	pop	r19
    20c4:	2f 91       	pop	r18
    20c6:	0f 90       	pop	r0
    20c8:	0f be       	out	0x3f, r0	; 63
    20ca:	0f 90       	pop	r0
    20cc:	1f 90       	pop	r1
    20ce:	18 95       	reti

000020d0 <M_TIMER1_voidInit>:
}
#endif



void M_TIMER1_voidInit(TIMER1_TopMode topMode, TIMER1_Mode  Config_Mode ,TIMER1_Prescaler select_Prescaler){
    20d0:	df 93       	push	r29
    20d2:	cf 93       	push	r28
    20d4:	cd b7       	in	r28, 0x3d	; 61
    20d6:	de b7       	in	r29, 0x3e	; 62
    20d8:	29 97       	sbiw	r28, 0x09	; 9
    20da:	0f b6       	in	r0, 0x3f	; 63
    20dc:	f8 94       	cli
    20de:	de bf       	out	0x3e, r29	; 62
    20e0:	0f be       	out	0x3f, r0	; 63
    20e2:	cd bf       	out	0x3d, r28	; 61
    20e4:	89 83       	std	Y+1, r24	; 0x01
    20e6:	6a 83       	std	Y+2, r22	; 0x02
    20e8:	4b 83       	std	Y+3, r20	; 0x03
	/* Timer1 Mode */
	switch(topMode){
    20ea:	89 81       	ldd	r24, Y+1	; 0x01
    20ec:	28 2f       	mov	r18, r24
    20ee:	30 e0       	ldi	r19, 0x00	; 0
    20f0:	39 87       	std	Y+9, r19	; 0x09
    20f2:	28 87       	std	Y+8, r18	; 0x08
    20f4:	88 85       	ldd	r24, Y+8	; 0x08
    20f6:	99 85       	ldd	r25, Y+9	; 0x09
    20f8:	82 30       	cpi	r24, 0x02	; 2
    20fa:	91 05       	cpc	r25, r1
    20fc:	d1 f1       	breq	.+116    	; 0x2172 <M_TIMER1_voidInit+0xa2>
    20fe:	28 85       	ldd	r18, Y+8	; 0x08
    2100:	39 85       	ldd	r19, Y+9	; 0x09
    2102:	23 30       	cpi	r18, 0x03	; 3
    2104:	31 05       	cpc	r19, r1
    2106:	5c f4       	brge	.+22     	; 0x211e <M_TIMER1_voidInit+0x4e>
    2108:	88 85       	ldd	r24, Y+8	; 0x08
    210a:	99 85       	ldd	r25, Y+9	; 0x09
    210c:	00 97       	sbiw	r24, 0x00	; 0
    210e:	a1 f0       	breq	.+40     	; 0x2138 <M_TIMER1_voidInit+0x68>
    2110:	28 85       	ldd	r18, Y+8	; 0x08
    2112:	39 85       	ldd	r19, Y+9	; 0x09
    2114:	21 30       	cpi	r18, 0x01	; 1
    2116:	31 05       	cpc	r19, r1
    2118:	09 f4       	brne	.+2      	; 0x211c <M_TIMER1_voidInit+0x4c>
    211a:	48 c0       	rjmp	.+144    	; 0x21ac <M_TIMER1_voidInit+0xdc>
    211c:	9d c0       	rjmp	.+314    	; 0x2258 <M_TIMER1_voidInit+0x188>
    211e:	88 85       	ldd	r24, Y+8	; 0x08
    2120:	99 85       	ldd	r25, Y+9	; 0x09
    2122:	83 30       	cpi	r24, 0x03	; 3
    2124:	91 05       	cpc	r25, r1
    2126:	09 f4       	brne	.+2      	; 0x212a <M_TIMER1_voidInit+0x5a>
    2128:	5e c0       	rjmp	.+188    	; 0x21e6 <M_TIMER1_voidInit+0x116>
    212a:	28 85       	ldd	r18, Y+8	; 0x08
    212c:	39 85       	ldd	r19, Y+9	; 0x09
    212e:	24 30       	cpi	r18, 0x04	; 4
    2130:	31 05       	cpc	r19, r1
    2132:	09 f4       	brne	.+2      	; 0x2136 <M_TIMER1_voidInit+0x66>
    2134:	75 c0       	rjmp	.+234    	; 0x2220 <M_TIMER1_voidInit+0x150>
    2136:	90 c0       	rjmp	.+288    	; 0x2258 <M_TIMER1_voidInit+0x188>
	case NORMAL_MODE_WAVE_OXFFFF:
		CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    2138:	af e4       	ldi	r26, 0x4F	; 79
    213a:	b0 e0       	ldi	r27, 0x00	; 0
    213c:	ef e4       	ldi	r30, 0x4F	; 79
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	8e 7f       	andi	r24, 0xFE	; 254
    2144:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_WGM11);
    2146:	af e4       	ldi	r26, 0x4F	; 79
    2148:	b0 e0       	ldi	r27, 0x00	; 0
    214a:	ef e4       	ldi	r30, 0x4F	; 79
    214c:	f0 e0       	ldi	r31, 0x00	; 0
    214e:	80 81       	ld	r24, Z
    2150:	8d 7f       	andi	r24, 0xFD	; 253
    2152:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,TCCR1B_WGM12);
    2154:	ae e4       	ldi	r26, 0x4E	; 78
    2156:	b0 e0       	ldi	r27, 0x00	; 0
    2158:	ee e4       	ldi	r30, 0x4E	; 78
    215a:	f0 e0       	ldi	r31, 0x00	; 0
    215c:	80 81       	ld	r24, Z
    215e:	87 7f       	andi	r24, 0xF7	; 247
    2160:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,TCCR1B_WGM13);
    2162:	ae e4       	ldi	r26, 0x4E	; 78
    2164:	b0 e0       	ldi	r27, 0x00	; 0
    2166:	ee e4       	ldi	r30, 0x4E	; 78
    2168:	f0 e0       	ldi	r31, 0x00	; 0
    216a:	80 81       	ld	r24, Z
    216c:	8f 7e       	andi	r24, 0xEF	; 239
    216e:	8c 93       	st	X, r24
    2170:	73 c0       	rjmp	.+230    	; 0x2258 <M_TIMER1_voidInit+0x188>
		break;
	case TOP_CTC_ICR1:
		CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    2172:	af e4       	ldi	r26, 0x4F	; 79
    2174:	b0 e0       	ldi	r27, 0x00	; 0
    2176:	ef e4       	ldi	r30, 0x4F	; 79
    2178:	f0 e0       	ldi	r31, 0x00	; 0
    217a:	80 81       	ld	r24, Z
    217c:	8e 7f       	andi	r24, 0xFE	; 254
    217e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_WGM11);
    2180:	af e4       	ldi	r26, 0x4F	; 79
    2182:	b0 e0       	ldi	r27, 0x00	; 0
    2184:	ef e4       	ldi	r30, 0x4F	; 79
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	8d 7f       	andi	r24, 0xFD	; 253
    218c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    218e:	ae e4       	ldi	r26, 0x4E	; 78
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	ee e4       	ldi	r30, 0x4E	; 78
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	88 60       	ori	r24, 0x08	; 8
    219a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    219c:	ae e4       	ldi	r26, 0x4E	; 78
    219e:	b0 e0       	ldi	r27, 0x00	; 0
    21a0:	ee e4       	ldi	r30, 0x4E	; 78
    21a2:	f0 e0       	ldi	r31, 0x00	; 0
    21a4:	80 81       	ld	r24, Z
    21a6:	80 61       	ori	r24, 0x10	; 16
    21a8:	8c 93       	st	X, r24
    21aa:	56 c0       	rjmp	.+172    	; 0x2258 <M_TIMER1_voidInit+0x188>
		break;
	case TOP_CTC_OCR1A:
		CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    21ac:	af e4       	ldi	r26, 0x4F	; 79
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	ef e4       	ldi	r30, 0x4F	; 79
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	8e 7f       	andi	r24, 0xFE	; 254
    21b8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_WGM11);
    21ba:	af e4       	ldi	r26, 0x4F	; 79
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	ef e4       	ldi	r30, 0x4F	; 79
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	8d 7f       	andi	r24, 0xFD	; 253
    21c6:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    21c8:	ae e4       	ldi	r26, 0x4E	; 78
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	ee e4       	ldi	r30, 0x4E	; 78
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	80 81       	ld	r24, Z
    21d2:	88 60       	ori	r24, 0x08	; 8
    21d4:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,TCCR1B_WGM13);
    21d6:	ae e4       	ldi	r26, 0x4E	; 78
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	ee e4       	ldi	r30, 0x4E	; 78
    21dc:	f0 e0       	ldi	r31, 0x00	; 0
    21de:	80 81       	ld	r24, Z
    21e0:	8f 7e       	andi	r24, 0xEF	; 239
    21e2:	8c 93       	st	X, r24
    21e4:	39 c0       	rjmp	.+114    	; 0x2258 <M_TIMER1_voidInit+0x188>
		break;
	case TOP_FPWM_ICR1:
		CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    21e6:	af e4       	ldi	r26, 0x4F	; 79
    21e8:	b0 e0       	ldi	r27, 0x00	; 0
    21ea:	ef e4       	ldi	r30, 0x4F	; 79
    21ec:	f0 e0       	ldi	r31, 0x00	; 0
    21ee:	80 81       	ld	r24, Z
    21f0:	8e 7f       	andi	r24, 0xFE	; 254
    21f2:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    21f4:	af e4       	ldi	r26, 0x4F	; 79
    21f6:	b0 e0       	ldi	r27, 0x00	; 0
    21f8:	ef e4       	ldi	r30, 0x4F	; 79
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	80 81       	ld	r24, Z
    21fe:	82 60       	ori	r24, 0x02	; 2
    2200:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    2202:	ae e4       	ldi	r26, 0x4E	; 78
    2204:	b0 e0       	ldi	r27, 0x00	; 0
    2206:	ee e4       	ldi	r30, 0x4E	; 78
    2208:	f0 e0       	ldi	r31, 0x00	; 0
    220a:	80 81       	ld	r24, Z
    220c:	88 60       	ori	r24, 0x08	; 8
    220e:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    2210:	ae e4       	ldi	r26, 0x4E	; 78
    2212:	b0 e0       	ldi	r27, 0x00	; 0
    2214:	ee e4       	ldi	r30, 0x4E	; 78
    2216:	f0 e0       	ldi	r31, 0x00	; 0
    2218:	80 81       	ld	r24, Z
    221a:	80 61       	ori	r24, 0x10	; 16
    221c:	8c 93       	st	X, r24
    221e:	1c c0       	rjmp	.+56     	; 0x2258 <M_TIMER1_voidInit+0x188>
		break;
	case TOP_FPWM_OCR1A:
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    2220:	af e4       	ldi	r26, 0x4F	; 79
    2222:	b0 e0       	ldi	r27, 0x00	; 0
    2224:	ef e4       	ldi	r30, 0x4F	; 79
    2226:	f0 e0       	ldi	r31, 0x00	; 0
    2228:	80 81       	ld	r24, Z
    222a:	81 60       	ori	r24, 0x01	; 1
    222c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    222e:	af e4       	ldi	r26, 0x4F	; 79
    2230:	b0 e0       	ldi	r27, 0x00	; 0
    2232:	ef e4       	ldi	r30, 0x4F	; 79
    2234:	f0 e0       	ldi	r31, 0x00	; 0
    2236:	80 81       	ld	r24, Z
    2238:	82 60       	ori	r24, 0x02	; 2
    223a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    223c:	ae e4       	ldi	r26, 0x4E	; 78
    223e:	b0 e0       	ldi	r27, 0x00	; 0
    2240:	ee e4       	ldi	r30, 0x4E	; 78
    2242:	f0 e0       	ldi	r31, 0x00	; 0
    2244:	80 81       	ld	r24, Z
    2246:	88 60       	ori	r24, 0x08	; 8
    2248:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    224a:	ae e4       	ldi	r26, 0x4E	; 78
    224c:	b0 e0       	ldi	r27, 0x00	; 0
    224e:	ee e4       	ldi	r30, 0x4E	; 78
    2250:	f0 e0       	ldi	r31, 0x00	; 0
    2252:	80 81       	ld	r24, Z
    2254:	80 61       	ori	r24, 0x10	; 16
    2256:	8c 93       	st	X, r24
		break;
	default: break;
	}

	switch(Config_Mode)
    2258:	8a 81       	ldd	r24, Y+2	; 0x02
    225a:	28 2f       	mov	r18, r24
    225c:	30 e0       	ldi	r19, 0x00	; 0
    225e:	3f 83       	std	Y+7, r19	; 0x07
    2260:	2e 83       	std	Y+6, r18	; 0x06
    2262:	8e 81       	ldd	r24, Y+6	; 0x06
    2264:	9f 81       	ldd	r25, Y+7	; 0x07
    2266:	82 30       	cpi	r24, 0x02	; 2
    2268:	91 05       	cpc	r25, r1
    226a:	09 f4       	brne	.+2      	; 0x226e <M_TIMER1_voidInit+0x19e>
    226c:	5c c0       	rjmp	.+184    	; 0x2326 <M_TIMER1_voidInit+0x256>
    226e:	2e 81       	ldd	r18, Y+6	; 0x06
    2270:	3f 81       	ldd	r19, Y+7	; 0x07
    2272:	23 30       	cpi	r18, 0x03	; 3
    2274:	31 05       	cpc	r19, r1
    2276:	54 f4       	brge	.+20     	; 0x228c <M_TIMER1_voidInit+0x1bc>
    2278:	8e 81       	ldd	r24, Y+6	; 0x06
    227a:	9f 81       	ldd	r25, Y+7	; 0x07
    227c:	00 97       	sbiw	r24, 0x00	; 0
    227e:	c9 f0       	breq	.+50     	; 0x22b2 <M_TIMER1_voidInit+0x1e2>
    2280:	2e 81       	ldd	r18, Y+6	; 0x06
    2282:	3f 81       	ldd	r19, Y+7	; 0x07
    2284:	21 30       	cpi	r18, 0x01	; 1
    2286:	31 05       	cpc	r19, r1
    2288:	89 f1       	breq	.+98     	; 0x22ec <M_TIMER1_voidInit+0x21c>
    228a:	c0 c0       	rjmp	.+384    	; 0x240c <M_TIMER1_voidInit+0x33c>
    228c:	8e 81       	ldd	r24, Y+6	; 0x06
    228e:	9f 81       	ldd	r25, Y+7	; 0x07
    2290:	84 30       	cpi	r24, 0x04	; 4
    2292:	91 05       	cpc	r25, r1
    2294:	09 f4       	brne	.+2      	; 0x2298 <M_TIMER1_voidInit+0x1c8>
    2296:	81 c0       	rjmp	.+258    	; 0x239a <M_TIMER1_voidInit+0x2ca>
    2298:	2e 81       	ldd	r18, Y+6	; 0x06
    229a:	3f 81       	ldd	r19, Y+7	; 0x07
    229c:	24 30       	cpi	r18, 0x04	; 4
    229e:	31 05       	cpc	r19, r1
    22a0:	0c f4       	brge	.+2      	; 0x22a4 <M_TIMER1_voidInit+0x1d4>
    22a2:	5e c0       	rjmp	.+188    	; 0x2360 <M_TIMER1_voidInit+0x290>
    22a4:	8e 81       	ldd	r24, Y+6	; 0x06
    22a6:	9f 81       	ldd	r25, Y+7	; 0x07
    22a8:	85 30       	cpi	r24, 0x05	; 5
    22aa:	91 05       	cpc	r25, r1
    22ac:	09 f4       	brne	.+2      	; 0x22b0 <M_TIMER1_voidInit+0x1e0>
    22ae:	92 c0       	rjmp	.+292    	; 0x23d4 <M_TIMER1_voidInit+0x304>
    22b0:	ad c0       	rjmp	.+346    	; 0x240c <M_TIMER1_voidInit+0x33c>
	{
	case TOP_NORMAL:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    22b2:	af e4       	ldi	r26, 0x4F	; 79
    22b4:	b0 e0       	ldi	r27, 0x00	; 0
    22b6:	ef e4       	ldi	r30, 0x4F	; 79
    22b8:	f0 e0       	ldi	r31, 0x00	; 0
    22ba:	80 81       	ld	r24, Z
    22bc:	8f 7b       	andi	r24, 0xBF	; 191
    22be:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    22c0:	af e4       	ldi	r26, 0x4F	; 79
    22c2:	b0 e0       	ldi	r27, 0x00	; 0
    22c4:	ef e4       	ldi	r30, 0x4F	; 79
    22c6:	f0 e0       	ldi	r31, 0x00	; 0
    22c8:	80 81       	ld	r24, Z
    22ca:	8f 7e       	andi	r24, 0xEF	; 239
    22cc:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    22ce:	af e4       	ldi	r26, 0x4F	; 79
    22d0:	b0 e0       	ldi	r27, 0x00	; 0
    22d2:	ef e4       	ldi	r30, 0x4F	; 79
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	80 81       	ld	r24, Z
    22d8:	8f 77       	andi	r24, 0x7F	; 127
    22da:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B1);
    22dc:	af e4       	ldi	r26, 0x4F	; 79
    22de:	b0 e0       	ldi	r27, 0x00	; 0
    22e0:	ef e4       	ldi	r30, 0x4F	; 79
    22e2:	f0 e0       	ldi	r31, 0x00	; 0
    22e4:	80 81       	ld	r24, Z
    22e6:	8f 7d       	andi	r24, 0xDF	; 223
    22e8:	8c 93       	st	X, r24
    22ea:	90 c0       	rjmp	.+288    	; 0x240c <M_TIMER1_voidInit+0x33c>
		break;
	case CTC_TOGGLE:
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    22ec:	af e4       	ldi	r26, 0x4F	; 79
    22ee:	b0 e0       	ldi	r27, 0x00	; 0
    22f0:	ef e4       	ldi	r30, 0x4F	; 79
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	80 81       	ld	r24, Z
    22f6:	80 64       	ori	r24, 0x40	; 64
    22f8:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    22fa:	af e4       	ldi	r26, 0x4F	; 79
    22fc:	b0 e0       	ldi	r27, 0x00	; 0
    22fe:	ef e4       	ldi	r30, 0x4F	; 79
    2300:	f0 e0       	ldi	r31, 0x00	; 0
    2302:	80 81       	ld	r24, Z
    2304:	80 61       	ori	r24, 0x10	; 16
    2306:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    2308:	af e4       	ldi	r26, 0x4F	; 79
    230a:	b0 e0       	ldi	r27, 0x00	; 0
    230c:	ef e4       	ldi	r30, 0x4F	; 79
    230e:	f0 e0       	ldi	r31, 0x00	; 0
    2310:	80 81       	ld	r24, Z
    2312:	8f 77       	andi	r24, 0x7F	; 127
    2314:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B1);
    2316:	af e4       	ldi	r26, 0x4F	; 79
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	ef e4       	ldi	r30, 0x4F	; 79
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 81       	ld	r24, Z
    2320:	8f 7d       	andi	r24, 0xDF	; 223
    2322:	8c 93       	st	X, r24
    2324:	73 c0       	rjmp	.+230    	; 0x240c <M_TIMER1_voidInit+0x33c>
		break;
	case CTC_SET :
	SET_BIT(TCCR1A,TCCR1A_COM1A0);
    2326:	af e4       	ldi	r26, 0x4F	; 79
    2328:	b0 e0       	ldi	r27, 0x00	; 0
    232a:	ef e4       	ldi	r30, 0x4F	; 79
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	80 81       	ld	r24, Z
    2330:	80 64       	ori	r24, 0x40	; 64
    2332:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_COM1B0);
    2334:	af e4       	ldi	r26, 0x4F	; 79
    2336:	b0 e0       	ldi	r27, 0x00	; 0
    2338:	ef e4       	ldi	r30, 0x4F	; 79
    233a:	f0 e0       	ldi	r31, 0x00	; 0
    233c:	80 81       	ld	r24, Z
    233e:	80 61       	ori	r24, 0x10	; 16
    2340:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2342:	af e4       	ldi	r26, 0x4F	; 79
    2344:	b0 e0       	ldi	r27, 0x00	; 0
    2346:	ef e4       	ldi	r30, 0x4F	; 79
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	80 68       	ori	r24, 0x80	; 128
    234e:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_COM1B1);
    2350:	af e4       	ldi	r26, 0x4F	; 79
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	ef e4       	ldi	r30, 0x4F	; 79
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	80 62       	ori	r24, 0x20	; 32
    235c:	8c 93       	st	X, r24
    235e:	56 c0       	rjmp	.+172    	; 0x240c <M_TIMER1_voidInit+0x33c>
	break;
	case CTC_CLR:
	CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    2360:	af e4       	ldi	r26, 0x4F	; 79
    2362:	b0 e0       	ldi	r27, 0x00	; 0
    2364:	ef e4       	ldi	r30, 0x4F	; 79
    2366:	f0 e0       	ldi	r31, 0x00	; 0
    2368:	80 81       	ld	r24, Z
    236a:	8f 7b       	andi	r24, 0xBF	; 191
    236c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    236e:	af e4       	ldi	r26, 0x4F	; 79
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	ef e4       	ldi	r30, 0x4F	; 79
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	8f 7e       	andi	r24, 0xEF	; 239
    237a:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    237c:	af e4       	ldi	r26, 0x4F	; 79
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	ef e4       	ldi	r30, 0x4F	; 79
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	80 68       	ori	r24, 0x80	; 128
    2388:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_COM1B1);
    238a:	af e4       	ldi	r26, 0x4F	; 79
    238c:	b0 e0       	ldi	r27, 0x00	; 0
    238e:	ef e4       	ldi	r30, 0x4F	; 79
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	80 81       	ld	r24, Z
    2394:	80 62       	ori	r24, 0x20	; 32
    2396:	8c 93       	st	X, r24
    2398:	39 c0       	rjmp	.+114    	; 0x240c <M_TIMER1_voidInit+0x33c>
	break;
	case FAST_PWM_NON_INV:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    239a:	af e4       	ldi	r26, 0x4F	; 79
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	ef e4       	ldi	r30, 0x4F	; 79
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	8f 7b       	andi	r24, 0xBF	; 191
    23a6:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    23a8:	af e4       	ldi	r26, 0x4F	; 79
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	ef e4       	ldi	r30, 0x4F	; 79
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	8f 7e       	andi	r24, 0xEF	; 239
    23b4:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    23b6:	af e4       	ldi	r26, 0x4F	; 79
    23b8:	b0 e0       	ldi	r27, 0x00	; 0
    23ba:	ef e4       	ldi	r30, 0x4F	; 79
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	80 68       	ori	r24, 0x80	; 128
    23c2:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    23c4:	af e4       	ldi	r26, 0x4F	; 79
    23c6:	b0 e0       	ldi	r27, 0x00	; 0
    23c8:	ef e4       	ldi	r30, 0x4F	; 79
    23ca:	f0 e0       	ldi	r31, 0x00	; 0
    23cc:	80 81       	ld	r24, Z
    23ce:	80 62       	ori	r24, 0x20	; 32
    23d0:	8c 93       	st	X, r24
    23d2:	1c c0       	rjmp	.+56     	; 0x240c <M_TIMER1_voidInit+0x33c>
		break;
	case FAST_PWM_INV :
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    23d4:	af e4       	ldi	r26, 0x4F	; 79
    23d6:	b0 e0       	ldi	r27, 0x00	; 0
    23d8:	ef e4       	ldi	r30, 0x4F	; 79
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	80 81       	ld	r24, Z
    23de:	80 64       	ori	r24, 0x40	; 64
    23e0:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    23e2:	af e4       	ldi	r26, 0x4F	; 79
    23e4:	b0 e0       	ldi	r27, 0x00	; 0
    23e6:	ef e4       	ldi	r30, 0x4F	; 79
    23e8:	f0 e0       	ldi	r31, 0x00	; 0
    23ea:	80 81       	ld	r24, Z
    23ec:	80 61       	ori	r24, 0x10	; 16
    23ee:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    23f0:	af e4       	ldi	r26, 0x4F	; 79
    23f2:	b0 e0       	ldi	r27, 0x00	; 0
    23f4:	ef e4       	ldi	r30, 0x4F	; 79
    23f6:	f0 e0       	ldi	r31, 0x00	; 0
    23f8:	80 81       	ld	r24, Z
    23fa:	80 68       	ori	r24, 0x80	; 128
    23fc:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    23fe:	af e4       	ldi	r26, 0x4F	; 79
    2400:	b0 e0       	ldi	r27, 0x00	; 0
    2402:	ef e4       	ldi	r30, 0x4F	; 79
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	80 81       	ld	r24, Z
    2408:	80 62       	ori	r24, 0x20	; 32
    240a:	8c 93       	st	X, r24
		break;
	default: break;
	}


	switch(select_Prescaler){
    240c:	8b 81       	ldd	r24, Y+3	; 0x03
    240e:	28 2f       	mov	r18, r24
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	3d 83       	std	Y+5, r19	; 0x05
    2414:	2c 83       	std	Y+4, r18	; 0x04
    2416:	8c 81       	ldd	r24, Y+4	; 0x04
    2418:	9d 81       	ldd	r25, Y+5	; 0x05
    241a:	81 30       	cpi	r24, 0x01	; 1
    241c:	91 05       	cpc	r25, r1
    241e:	01 f1       	breq	.+64     	; 0x2460 <M_TIMER1_voidInit+0x390>
    2420:	2c 81       	ldd	r18, Y+4	; 0x04
    2422:	3d 81       	ldd	r19, Y+5	; 0x05
    2424:	22 30       	cpi	r18, 0x02	; 2
    2426:	31 05       	cpc	r19, r1
    2428:	89 f1       	breq	.+98     	; 0x248c <M_TIMER1_voidInit+0x3bc>
    242a:	8c 81       	ldd	r24, Y+4	; 0x04
    242c:	9d 81       	ldd	r25, Y+5	; 0x05
    242e:	00 97       	sbiw	r24, 0x00	; 0
    2430:	09 f0       	breq	.+2      	; 0x2434 <M_TIMER1_voidInit+0x364>
    2432:	41 c0       	rjmp	.+130    	; 0x24b6 <M_TIMER1_voidInit+0x3e6>
	case DIV_8:
		CLEAR_BIT(TCCR1B,TCCR1B_CS10);
    2434:	ae e4       	ldi	r26, 0x4E	; 78
    2436:	b0 e0       	ldi	r27, 0x00	; 0
    2438:	ee e4       	ldi	r30, 0x4E	; 78
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	8e 7f       	andi	r24, 0xFE	; 254
    2440:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS11);
    2442:	ae e4       	ldi	r26, 0x4E	; 78
    2444:	b0 e0       	ldi	r27, 0x00	; 0
    2446:	ee e4       	ldi	r30, 0x4E	; 78
    2448:	f0 e0       	ldi	r31, 0x00	; 0
    244a:	80 81       	ld	r24, Z
    244c:	82 60       	ori	r24, 0x02	; 2
    244e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,TCCR1B_CS12);
    2450:	ae e4       	ldi	r26, 0x4E	; 78
    2452:	b0 e0       	ldi	r27, 0x00	; 0
    2454:	ee e4       	ldi	r30, 0x4E	; 78
    2456:	f0 e0       	ldi	r31, 0x00	; 0
    2458:	80 81       	ld	r24, Z
    245a:	8b 7f       	andi	r24, 0xFB	; 251
    245c:	8c 93       	st	X, r24
    245e:	2b c0       	rjmp	.+86     	; 0x24b6 <M_TIMER1_voidInit+0x3e6>
		break;
	case DIV_64:
		SET_BIT(TCCR1B,TCCR1B_CS10);
    2460:	ae e4       	ldi	r26, 0x4E	; 78
    2462:	b0 e0       	ldi	r27, 0x00	; 0
    2464:	ee e4       	ldi	r30, 0x4E	; 78
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 81       	ld	r24, Z
    246a:	81 60       	ori	r24, 0x01	; 1
    246c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS11);
    246e:	ae e4       	ldi	r26, 0x4E	; 78
    2470:	b0 e0       	ldi	r27, 0x00	; 0
    2472:	ee e4       	ldi	r30, 0x4E	; 78
    2474:	f0 e0       	ldi	r31, 0x00	; 0
    2476:	80 81       	ld	r24, Z
    2478:	82 60       	ori	r24, 0x02	; 2
    247a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,TCCR1B_CS12);
    247c:	ae e4       	ldi	r26, 0x4E	; 78
    247e:	b0 e0       	ldi	r27, 0x00	; 0
    2480:	ee e4       	ldi	r30, 0x4E	; 78
    2482:	f0 e0       	ldi	r31, 0x00	; 0
    2484:	80 81       	ld	r24, Z
    2486:	8b 7f       	andi	r24, 0xFB	; 251
    2488:	8c 93       	st	X, r24
    248a:	15 c0       	rjmp	.+42     	; 0x24b6 <M_TIMER1_voidInit+0x3e6>
		break;
	case DIV_256:
		CLEAR_BIT(TCCR1B,TCCR1B_CS10);
    248c:	ae e4       	ldi	r26, 0x4E	; 78
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	ee e4       	ldi	r30, 0x4E	; 78
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	8e 7f       	andi	r24, 0xFE	; 254
    2498:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,TCCR1B_CS11);
    249a:	ae e4       	ldi	r26, 0x4E	; 78
    249c:	b0 e0       	ldi	r27, 0x00	; 0
    249e:	ee e4       	ldi	r30, 0x4E	; 78
    24a0:	f0 e0       	ldi	r31, 0x00	; 0
    24a2:	80 81       	ld	r24, Z
    24a4:	8d 7f       	andi	r24, 0xFD	; 253
    24a6:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS12);
    24a8:	ae e4       	ldi	r26, 0x4E	; 78
    24aa:	b0 e0       	ldi	r27, 0x00	; 0
    24ac:	ee e4       	ldi	r30, 0x4E	; 78
    24ae:	f0 e0       	ldi	r31, 0x00	; 0
    24b0:	80 81       	ld	r24, Z
    24b2:	84 60       	ori	r24, 0x04	; 4
    24b4:	8c 93       	st	X, r24
		break;
	}
}
    24b6:	29 96       	adiw	r28, 0x09	; 9
    24b8:	0f b6       	in	r0, 0x3f	; 63
    24ba:	f8 94       	cli
    24bc:	de bf       	out	0x3e, r29	; 62
    24be:	0f be       	out	0x3f, r0	; 63
    24c0:	cd bf       	out	0x3d, r28	; 61
    24c2:	cf 91       	pop	r28
    24c4:	df 91       	pop	r29
    24c6:	08 95       	ret

000024c8 <M_TIMER1_voidSetTopValue>:

/*
 * Function to set top value
 */
void M_TIMER1_voidSetTopValue(u16 topvalue,TIMER1_TopMode topMode){
    24c8:	df 93       	push	r29
    24ca:	cf 93       	push	r28
    24cc:	00 d0       	rcall	.+0      	; 0x24ce <M_TIMER1_voidSetTopValue+0x6>
    24ce:	00 d0       	rcall	.+0      	; 0x24d0 <M_TIMER1_voidSetTopValue+0x8>
    24d0:	0f 92       	push	r0
    24d2:	cd b7       	in	r28, 0x3d	; 61
    24d4:	de b7       	in	r29, 0x3e	; 62
    24d6:	9a 83       	std	Y+2, r25	; 0x02
    24d8:	89 83       	std	Y+1, r24	; 0x01
    24da:	6b 83       	std	Y+3, r22	; 0x03
	switch(topMode){
    24dc:	8b 81       	ldd	r24, Y+3	; 0x03
    24de:	28 2f       	mov	r18, r24
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	3d 83       	std	Y+5, r19	; 0x05
    24e4:	2c 83       	std	Y+4, r18	; 0x04
    24e6:	8c 81       	ldd	r24, Y+4	; 0x04
    24e8:	9d 81       	ldd	r25, Y+5	; 0x05
    24ea:	82 30       	cpi	r24, 0x02	; 2
    24ec:	91 05       	cpc	r25, r1
    24ee:	21 f1       	breq	.+72     	; 0x2538 <M_TIMER1_voidSetTopValue+0x70>
    24f0:	2c 81       	ldd	r18, Y+4	; 0x04
    24f2:	3d 81       	ldd	r19, Y+5	; 0x05
    24f4:	23 30       	cpi	r18, 0x03	; 3
    24f6:	31 05       	cpc	r19, r1
    24f8:	34 f4       	brge	.+12     	; 0x2506 <M_TIMER1_voidSetTopValue+0x3e>
    24fa:	8c 81       	ldd	r24, Y+4	; 0x04
    24fc:	9d 81       	ldd	r25, Y+5	; 0x05
    24fe:	81 30       	cpi	r24, 0x01	; 1
    2500:	91 05       	cpc	r25, r1
    2502:	09 f1       	breq	.+66     	; 0x2546 <M_TIMER1_voidSetTopValue+0x7e>
    2504:	26 c0       	rjmp	.+76     	; 0x2552 <M_TIMER1_voidSetTopValue+0x8a>
    2506:	2c 81       	ldd	r18, Y+4	; 0x04
    2508:	3d 81       	ldd	r19, Y+5	; 0x05
    250a:	23 30       	cpi	r18, 0x03	; 3
    250c:	31 05       	cpc	r19, r1
    250e:	31 f0       	breq	.+12     	; 0x251c <M_TIMER1_voidSetTopValue+0x54>
    2510:	8c 81       	ldd	r24, Y+4	; 0x04
    2512:	9d 81       	ldd	r25, Y+5	; 0x05
    2514:	84 30       	cpi	r24, 0x04	; 4
    2516:	91 05       	cpc	r25, r1
    2518:	41 f0       	breq	.+16     	; 0x252a <M_TIMER1_voidSetTopValue+0x62>
    251a:	1b c0       	rjmp	.+54     	; 0x2552 <M_TIMER1_voidSetTopValue+0x8a>
	case TOP_FPWM_ICR1 :  ICR1 = topvalue; break;
    251c:	e6 e4       	ldi	r30, 0x46	; 70
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	89 81       	ldd	r24, Y+1	; 0x01
    2522:	9a 81       	ldd	r25, Y+2	; 0x02
    2524:	91 83       	std	Z+1, r25	; 0x01
    2526:	80 83       	st	Z, r24
    2528:	14 c0       	rjmp	.+40     	; 0x2552 <M_TIMER1_voidSetTopValue+0x8a>
	case TOP_FPWM_OCR1A : OCR1A = topvalue; break;
    252a:	ea e4       	ldi	r30, 0x4A	; 74
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	89 81       	ldd	r24, Y+1	; 0x01
    2530:	9a 81       	ldd	r25, Y+2	; 0x02
    2532:	91 83       	std	Z+1, r25	; 0x01
    2534:	80 83       	st	Z, r24
    2536:	0d c0       	rjmp	.+26     	; 0x2552 <M_TIMER1_voidSetTopValue+0x8a>
	case TOP_CTC_ICR1 :   ICR1 = topvalue; break;
    2538:	e6 e4       	ldi	r30, 0x46	; 70
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	89 81       	ldd	r24, Y+1	; 0x01
    253e:	9a 81       	ldd	r25, Y+2	; 0x02
    2540:	91 83       	std	Z+1, r25	; 0x01
    2542:	80 83       	st	Z, r24
    2544:	06 c0       	rjmp	.+12     	; 0x2552 <M_TIMER1_voidSetTopValue+0x8a>
	case TOP_CTC_OCR1A :  OCR1A  = topvalue; break;
    2546:	ea e4       	ldi	r30, 0x4A	; 74
    2548:	f0 e0       	ldi	r31, 0x00	; 0
    254a:	89 81       	ldd	r24, Y+1	; 0x01
    254c:	9a 81       	ldd	r25, Y+2	; 0x02
    254e:	91 83       	std	Z+1, r25	; 0x01
    2550:	80 83       	st	Z, r24
	default: break;
	}
}
    2552:	0f 90       	pop	r0
    2554:	0f 90       	pop	r0
    2556:	0f 90       	pop	r0
    2558:	0f 90       	pop	r0
    255a:	0f 90       	pop	r0
    255c:	cf 91       	pop	r28
    255e:	df 91       	pop	r29
    2560:	08 95       	ret

00002562 <M_TIMER1_voidSetDutyCycle>:
void M_TIMER1_voidSetDutyCycle(u16 duty_cycle){
    2562:	df 93       	push	r29
    2564:	cf 93       	push	r28
    2566:	00 d0       	rcall	.+0      	; 0x2568 <M_TIMER1_voidSetDutyCycle+0x6>
    2568:	cd b7       	in	r28, 0x3d	; 61
    256a:	de b7       	in	r29, 0x3e	; 62
    256c:	9a 83       	std	Y+2, r25	; 0x02
    256e:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = duty_cycle;
    2570:	ea e4       	ldi	r30, 0x4A	; 74
    2572:	f0 e0       	ldi	r31, 0x00	; 0
    2574:	89 81       	ldd	r24, Y+1	; 0x01
    2576:	9a 81       	ldd	r25, Y+2	; 0x02
    2578:	91 83       	std	Z+1, r25	; 0x01
    257a:	80 83       	st	Z, r24
}
    257c:	0f 90       	pop	r0
    257e:	0f 90       	pop	r0
    2580:	cf 91       	pop	r28
    2582:	df 91       	pop	r29
    2584:	08 95       	ret

00002586 <M_TIMER1_voidIcuEdgeSelect>:

void M_TIMER1_voidIcuEdgeSelect(TIMER1_IcuEdgeType  edge_select){
    2586:	df 93       	push	r29
    2588:	cf 93       	push	r28
    258a:	00 d0       	rcall	.+0      	; 0x258c <M_TIMER1_voidIcuEdgeSelect+0x6>
    258c:	0f 92       	push	r0
    258e:	cd b7       	in	r28, 0x3d	; 61
    2590:	de b7       	in	r29, 0x3e	; 62
    2592:	89 83       	std	Y+1, r24	; 0x01
	switch  (edge_select){
    2594:	89 81       	ldd	r24, Y+1	; 0x01
    2596:	28 2f       	mov	r18, r24
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	3b 83       	std	Y+3, r19	; 0x03
    259c:	2a 83       	std	Y+2, r18	; 0x02
    259e:	8a 81       	ldd	r24, Y+2	; 0x02
    25a0:	9b 81       	ldd	r25, Y+3	; 0x03
    25a2:	00 97       	sbiw	r24, 0x00	; 0
    25a4:	31 f0       	breq	.+12     	; 0x25b2 <M_TIMER1_voidIcuEdgeSelect+0x2c>
    25a6:	2a 81       	ldd	r18, Y+2	; 0x02
    25a8:	3b 81       	ldd	r19, Y+3	; 0x03
    25aa:	21 30       	cpi	r18, 0x01	; 1
    25ac:	31 05       	cpc	r19, r1
    25ae:	49 f0       	breq	.+18     	; 0x25c2 <M_TIMER1_voidIcuEdgeSelect+0x3c>
    25b0:	0f c0       	rjmp	.+30     	; 0x25d0 <M_TIMER1_voidIcuEdgeSelect+0x4a>
	case RISING_EDGE:   SET_BIT   (TCCR1B,TCCR1B_ICES1);break;
    25b2:	ae e4       	ldi	r26, 0x4E	; 78
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	ee e4       	ldi	r30, 0x4E	; 78
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	80 64       	ori	r24, 0x40	; 64
    25be:	8c 93       	st	X, r24
    25c0:	07 c0       	rjmp	.+14     	; 0x25d0 <M_TIMER1_voidIcuEdgeSelect+0x4a>
	case FALLING_EDGE:  CLEAR_BIT (TCCR1B,TCCR1B_ICES1);break;
    25c2:	ae e4       	ldi	r26, 0x4E	; 78
    25c4:	b0 e0       	ldi	r27, 0x00	; 0
    25c6:	ee e4       	ldi	r30, 0x4E	; 78
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	80 81       	ld	r24, Z
    25cc:	8f 7b       	andi	r24, 0xBF	; 191
    25ce:	8c 93       	st	X, r24
	default:break;
	}
}
    25d0:	0f 90       	pop	r0
    25d2:	0f 90       	pop	r0
    25d4:	0f 90       	pop	r0
    25d6:	cf 91       	pop	r28
    25d8:	df 91       	pop	r29
    25da:	08 95       	ret

000025dc <M_TIMER1_voidEnbaleIcu_Interrupt>:

void M_TIMER1_voidEnbaleIcu_Interrupt(void){
    25dc:	df 93       	push	r29
    25de:	cf 93       	push	r28
    25e0:	cd b7       	in	r28, 0x3d	; 61
    25e2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    25e4:	a9 e5       	ldi	r26, 0x59	; 89
    25e6:	b0 e0       	ldi	r27, 0x00	; 0
    25e8:	e9 e5       	ldi	r30, 0x59	; 89
    25ea:	f0 e0       	ldi	r31, 0x00	; 0
    25ec:	80 81       	ld	r24, Z
    25ee:	80 62       	ori	r24, 0x20	; 32
    25f0:	8c 93       	st	X, r24
}
    25f2:	cf 91       	pop	r28
    25f4:	df 91       	pop	r29
    25f6:	08 95       	ret

000025f8 <M_TIMER1_voidDisabaleIcu_Interrupt>:
void M_TIMER1_voidDisabaleIcu_Interrupt(void){
    25f8:	df 93       	push	r29
    25fa:	cf 93       	push	r28
    25fc:	cd b7       	in	r28, 0x3d	; 61
    25fe:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,TIMSK_TICIE1);
    2600:	a9 e5       	ldi	r26, 0x59	; 89
    2602:	b0 e0       	ldi	r27, 0x00	; 0
    2604:	e9 e5       	ldi	r30, 0x59	; 89
    2606:	f0 e0       	ldi	r31, 0x00	; 0
    2608:	80 81       	ld	r24, Z
    260a:	8f 7d       	andi	r24, 0xDF	; 223
    260c:	8c 93       	st	X, r24
}
    260e:	cf 91       	pop	r28
    2610:	df 91       	pop	r29
    2612:	08 95       	ret

00002614 <M_TIMER1_u16GetOcrValue>:

u16 M_TIMER1_u16GetOcrValue(void){
    2614:	df 93       	push	r29
    2616:	cf 93       	push	r28
    2618:	cd b7       	in	r28, 0x3d	; 61
    261a:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    261c:	e6 e4       	ldi	r30, 0x46	; 70
    261e:	f0 e0       	ldi	r31, 0x00	; 0
    2620:	80 81       	ld	r24, Z
    2622:	91 81       	ldd	r25, Z+1	; 0x01
}
    2624:	cf 91       	pop	r28
    2626:	df 91       	pop	r29
    2628:	08 95       	ret

0000262a <M_TIMER1_voidSetCallBack>:
void M_TIMER1_voidSetCallBack(void (*l_pf)(void)){
    262a:	df 93       	push	r29
    262c:	cf 93       	push	r28
    262e:	00 d0       	rcall	.+0      	; 0x2630 <M_TIMER1_voidSetCallBack+0x6>
    2630:	cd b7       	in	r28, 0x3d	; 61
    2632:	de b7       	in	r29, 0x3e	; 62
    2634:	9a 83       	std	Y+2, r25	; 0x02
    2636:	89 83       	std	Y+1, r24	; 0x01
	pf_icu = l_pf;
    2638:	89 81       	ldd	r24, Y+1	; 0x01
    263a:	9a 81       	ldd	r25, Y+2	; 0x02
    263c:	90 93 79 01 	sts	0x0179, r25
    2640:	80 93 78 01 	sts	0x0178, r24
}
    2644:	0f 90       	pop	r0
    2646:	0f 90       	pop	r0
    2648:	cf 91       	pop	r28
    264a:	df 91       	pop	r29
    264c:	08 95       	ret

0000264e <ICU_clearTimerValue>:
void ICU_clearTimerValue(void)
{
    264e:	df 93       	push	r29
    2650:	cf 93       	push	r28
    2652:	cd b7       	in	r28, 0x3d	; 61
    2654:	de b7       	in	r29, 0x3e	; 62
	TCNT1=0;
    2656:	ec e4       	ldi	r30, 0x4C	; 76
    2658:	f0 e0       	ldi	r31, 0x00	; 0
    265a:	11 82       	std	Z+1, r1	; 0x01
    265c:	10 82       	st	Z, r1
	ICR1 = 0;
    265e:	e6 e4       	ldi	r30, 0x46	; 70
    2660:	f0 e0       	ldi	r31, 0x00	; 0
    2662:	11 82       	std	Z+1, r1	; 0x01
    2664:	10 82       	st	Z, r1
}
    2666:	cf 91       	pop	r28
    2668:	df 91       	pop	r29
    266a:	08 95       	ret

0000266c <__vector_6>:
/*************************** Set ISR ********************************/

void __vector_6(void)       __attribute__((signal));
void __vector_6(void){
    266c:	1f 92       	push	r1
    266e:	0f 92       	push	r0
    2670:	0f b6       	in	r0, 0x3f	; 63
    2672:	0f 92       	push	r0
    2674:	11 24       	eor	r1, r1
    2676:	2f 93       	push	r18
    2678:	3f 93       	push	r19
    267a:	4f 93       	push	r20
    267c:	5f 93       	push	r21
    267e:	6f 93       	push	r22
    2680:	7f 93       	push	r23
    2682:	8f 93       	push	r24
    2684:	9f 93       	push	r25
    2686:	af 93       	push	r26
    2688:	bf 93       	push	r27
    268a:	ef 93       	push	r30
    268c:	ff 93       	push	r31
    268e:	df 93       	push	r29
    2690:	cf 93       	push	r28
    2692:	cd b7       	in	r28, 0x3d	; 61
    2694:	de b7       	in	r29, 0x3e	; 62
	if(pf_icu != NULL_PTR ){
    2696:	80 91 78 01 	lds	r24, 0x0178
    269a:	90 91 79 01 	lds	r25, 0x0179
    269e:	00 97       	sbiw	r24, 0x00	; 0
    26a0:	29 f0       	breq	.+10     	; 0x26ac <__vector_6+0x40>
		(*pf_icu)();
    26a2:	e0 91 78 01 	lds	r30, 0x0178
    26a6:	f0 91 79 01 	lds	r31, 0x0179
    26aa:	09 95       	icall
	}
}
    26ac:	cf 91       	pop	r28
    26ae:	df 91       	pop	r29
    26b0:	ff 91       	pop	r31
    26b2:	ef 91       	pop	r30
    26b4:	bf 91       	pop	r27
    26b6:	af 91       	pop	r26
    26b8:	9f 91       	pop	r25
    26ba:	8f 91       	pop	r24
    26bc:	7f 91       	pop	r23
    26be:	6f 91       	pop	r22
    26c0:	5f 91       	pop	r21
    26c2:	4f 91       	pop	r20
    26c4:	3f 91       	pop	r19
    26c6:	2f 91       	pop	r18
    26c8:	0f 90       	pop	r0
    26ca:	0f be       	out	0x3f, r0	; 63
    26cc:	0f 90       	pop	r0
    26ce:	1f 90       	pop	r1
    26d0:	18 95       	reti

000026d2 <SERVO_voidInit>:
#include "m_timer_interface.h"
#include "servo_interface.h"
#include <util/delay.h>


void SERVO_voidInit(void){
    26d2:	df 93       	push	r29
    26d4:	cf 93       	push	r28
    26d6:	cd b7       	in	r28, 0x3d	; 61
    26d8:	de b7       	in	r29, 0x3e	; 62
	M_TIMER1_voidInit(TOP_FPWM_ICR1,FAST_PWM_NON_INV,DIV_8);
    26da:	83 e0       	ldi	r24, 0x03	; 3
    26dc:	64 e0       	ldi	r22, 0x04	; 4
    26de:	40 e0       	ldi	r20, 0x00	; 0
    26e0:	0e 94 68 10 	call	0x20d0	; 0x20d0 <M_TIMER1_voidInit>
	M_TIMER1_voidSetTopValue(20000,TOP_FPWM_ICR1);
    26e4:	80 e2       	ldi	r24, 0x20	; 32
    26e6:	9e e4       	ldi	r25, 0x4E	; 78
    26e8:	63 e0       	ldi	r22, 0x03	; 3
    26ea:	0e 94 64 12 	call	0x24c8	; 0x24c8 <M_TIMER1_voidSetTopValue>
}
    26ee:	cf 91       	pop	r28
    26f0:	df 91       	pop	r29
    26f2:	08 95       	ret

000026f4 <SERVO_voidEnable>:
void SERVO_voidEnable(u16 duty_cycle){
    26f4:	df 93       	push	r29
    26f6:	cf 93       	push	r28
    26f8:	00 d0       	rcall	.+0      	; 0x26fa <SERVO_voidEnable+0x6>
    26fa:	cd b7       	in	r28, 0x3d	; 61
    26fc:	de b7       	in	r29, 0x3e	; 62
    26fe:	9a 83       	std	Y+2, r25	; 0x02
    2700:	89 83       	std	Y+1, r24	; 0x01
		M_TIMER1_voidSetDutyCycle(duty_cycle);
    2702:	89 81       	ldd	r24, Y+1	; 0x01
    2704:	9a 81       	ldd	r25, Y+2	; 0x02
    2706:	0e 94 b1 12 	call	0x2562	; 0x2562 <M_TIMER1_voidSetDutyCycle>
//		_delay_ms(2);
}
    270a:	0f 90       	pop	r0
    270c:	0f 90       	pop	r0
    270e:	cf 91       	pop	r28
    2710:	df 91       	pop	r29
    2712:	08 95       	ret

00002714 <M_SPI_initMaster>:
 *   Select SCK frequency
 *   Enable SPI
 */

void M_SPI_initMaster(SPI_ConfigType *config_master)
{
    2714:	df 93       	push	r29
    2716:	cf 93       	push	r28
    2718:	00 d0       	rcall	.+0      	; 0x271a <M_SPI_initMaster+0x6>
    271a:	cd b7       	in	r28, 0x3d	; 61
    271c:	de b7       	in	r29, 0x3e	; 62
    271e:	9a 83       	std	Y+2, r25	; 0x02
    2720:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPinDirection(SPI_PORT_ID, SPI_SS_PIN, DIO_OUTPUT);
    2722:	82 e0       	ldi	r24, 0x02	; 2
    2724:	64 e0       	ldi	r22, 0x04	; 4
    2726:	41 e0       	ldi	r20, 0x01	; 1
    2728:	0e 94 ff 09 	call	0x13fe	; 0x13fe <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(SPI_PORT_ID, SPI_MOSI_PIN, DIO_OUTPUT);
    272c:	82 e0       	ldi	r24, 0x02	; 2
    272e:	65 e0       	ldi	r22, 0x05	; 5
    2730:	41 e0       	ldi	r20, 0x01	; 1
    2732:	0e 94 ff 09 	call	0x13fe	; 0x13fe <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(SPI_PORT_ID, SPI_SCK_PIN, DIO_OUTPUT);
    2736:	82 e0       	ldi	r24, 0x02	; 2
    2738:	67 e0       	ldi	r22, 0x07	; 7
    273a:	41 e0       	ldi	r20, 0x01	; 1
    273c:	0e 94 ff 09 	call	0x13fe	; 0x13fe <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(SPI_PORT_ID,SPI_MISO_PIN, DIO_INPUT);
    2740:	82 e0       	ldi	r24, 0x02	; 2
    2742:	66 e0       	ldi	r22, 0x06	; 6
    2744:	40 e0       	ldi	r20, 0x00	; 0
    2746:	0e 94 ff 09 	call	0x13fe	; 0x13fe <MDIO_voidSetPinDirection>
	/* Enable SPI pin and Initiate master  */
	SPCR = (1<<SPCR_SPE) | (1<<SPCR_MSTR);
    274a:	ed e2       	ldi	r30, 0x2D	; 45
    274c:	f0 e0       	ldi	r31, 0x00	; 0
    274e:	80 e5       	ldi	r24, 0x50	; 80
    2750:	80 83       	st	Z, r24

	SET_BIT(SPCR,SPCR_DORD);
    2752:	ad e2       	ldi	r26, 0x2D	; 45
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	ed e2       	ldi	r30, 0x2D	; 45
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	80 81       	ld	r24, Z
    275c:	80 62       	ori	r24, 0x20	; 32
    275e:	8c 93       	st	X, r24
	/* Configure sampling edge */
	SPCR |= ((config_master->clk_polarity)<<3) | ((config_master->clk_phase)<<2);
    2760:	ad e2       	ldi	r26, 0x2D	; 45
    2762:	b0 e0       	ldi	r27, 0x00	; 0
    2764:	ed e2       	ldi	r30, 0x2D	; 45
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	80 81       	ld	r24, Z
    276a:	38 2f       	mov	r19, r24
    276c:	e9 81       	ldd	r30, Y+1	; 0x01
    276e:	fa 81       	ldd	r31, Y+2	; 0x02
    2770:	80 81       	ld	r24, Z
    2772:	88 2f       	mov	r24, r24
    2774:	90 e0       	ldi	r25, 0x00	; 0
    2776:	88 0f       	add	r24, r24
    2778:	99 1f       	adc	r25, r25
    277a:	88 0f       	add	r24, r24
    277c:	99 1f       	adc	r25, r25
    277e:	88 0f       	add	r24, r24
    2780:	99 1f       	adc	r25, r25
    2782:	28 2f       	mov	r18, r24
    2784:	e9 81       	ldd	r30, Y+1	; 0x01
    2786:	fa 81       	ldd	r31, Y+2	; 0x02
    2788:	81 81       	ldd	r24, Z+1	; 0x01
    278a:	88 2f       	mov	r24, r24
    278c:	90 e0       	ldi	r25, 0x00	; 0
    278e:	88 0f       	add	r24, r24
    2790:	99 1f       	adc	r25, r25
    2792:	88 0f       	add	r24, r24
    2794:	99 1f       	adc	r25, r25
    2796:	82 2b       	or	r24, r18
    2798:	83 2b       	or	r24, r19
    279a:	8c 93       	st	X, r24
	/* Configure clock rate */
	SPCR = SPCR | ((config_master->clk_rate) & 0x03);
    279c:	ad e2       	ldi	r26, 0x2D	; 45
    279e:	b0 e0       	ldi	r27, 0x00	; 0
    27a0:	ed e2       	ldi	r30, 0x2D	; 45
    27a2:	f0 e0       	ldi	r31, 0x00	; 0
    27a4:	80 81       	ld	r24, Z
    27a6:	98 2f       	mov	r25, r24
    27a8:	e9 81       	ldd	r30, Y+1	; 0x01
    27aa:	fa 81       	ldd	r31, Y+2	; 0x02
    27ac:	82 81       	ldd	r24, Z+2	; 0x02
    27ae:	83 70       	andi	r24, 0x03	; 3
    27b0:	89 2b       	or	r24, r25
    27b2:	8c 93       	st	X, r24
	SPSR = SPSR | (((config_master->clk_rate) & 0x04)>>2);
    27b4:	ae e2       	ldi	r26, 0x2E	; 46
    27b6:	b0 e0       	ldi	r27, 0x00	; 0
    27b8:	ee e2       	ldi	r30, 0x2E	; 46
    27ba:	f0 e0       	ldi	r31, 0x00	; 0
    27bc:	80 81       	ld	r24, Z
    27be:	28 2f       	mov	r18, r24
    27c0:	e9 81       	ldd	r30, Y+1	; 0x01
    27c2:	fa 81       	ldd	r31, Y+2	; 0x02
    27c4:	82 81       	ldd	r24, Z+2	; 0x02
    27c6:	88 2f       	mov	r24, r24
    27c8:	90 e0       	ldi	r25, 0x00	; 0
    27ca:	84 70       	andi	r24, 0x04	; 4
    27cc:	90 70       	andi	r25, 0x00	; 0
    27ce:	95 95       	asr	r25
    27d0:	87 95       	ror	r24
    27d2:	95 95       	asr	r25
    27d4:	87 95       	ror	r24
    27d6:	82 2b       	or	r24, r18
    27d8:	8c 93       	st	X, r24
}
    27da:	0f 90       	pop	r0
    27dc:	0f 90       	pop	r0
    27de:	cf 91       	pop	r28
    27e0:	df 91       	pop	r29
    27e2:	08 95       	ret

000027e4 <M_SPI_initSlave>:
 *   Select MISO pin as output and rest pins input.
 *   Enable SPI.
 *   Setup clock polarity and phase same as master
 */
void M_SPI_initSlave(SPI_ConfigType *config_slave)
{
    27e4:	df 93       	push	r29
    27e6:	cf 93       	push	r28
    27e8:	00 d0       	rcall	.+0      	; 0x27ea <M_SPI_initSlave+0x6>
    27ea:	cd b7       	in	r28, 0x3d	; 61
    27ec:	de b7       	in	r29, 0x3e	; 62
    27ee:	9a 83       	std	Y+2, r25	; 0x02
    27f0:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPinDirection(SPI_PORT_ID,SPI_MISO_PIN, DIO_OUTPUT);
    27f2:	82 e0       	ldi	r24, 0x02	; 2
    27f4:	66 e0       	ldi	r22, 0x06	; 6
    27f6:	41 e0       	ldi	r20, 0x01	; 1
    27f8:	0e 94 ff 09 	call	0x13fe	; 0x13fe <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(SPI_PORT_ID, SPI_SS_PIN, DIO_INPUT);
    27fc:	82 e0       	ldi	r24, 0x02	; 2
    27fe:	64 e0       	ldi	r22, 0x04	; 4
    2800:	40 e0       	ldi	r20, 0x00	; 0
    2802:	0e 94 ff 09 	call	0x13fe	; 0x13fe <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(SPI_PORT_ID, SPI_MOSI_PIN, DIO_INPUT);
    2806:	82 e0       	ldi	r24, 0x02	; 2
    2808:	65 e0       	ldi	r22, 0x05	; 5
    280a:	40 e0       	ldi	r20, 0x00	; 0
    280c:	0e 94 ff 09 	call	0x13fe	; 0x13fe <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(SPI_PORT_ID, SPI_SCK_PIN, DIO_INPUT);
    2810:	82 e0       	ldi	r24, 0x02	; 2
    2812:	67 e0       	ldi	r22, 0x07	; 7
    2814:	40 e0       	ldi	r20, 0x00	; 0
    2816:	0e 94 ff 09 	call	0x13fe	; 0x13fe <MDIO_voidSetPinDirection>
	/* Enable SPI pin */
	SPCR |= (1<<SPCR_SPE);
    281a:	ad e2       	ldi	r26, 0x2D	; 45
    281c:	b0 e0       	ldi	r27, 0x00	; 0
    281e:	ed e2       	ldi	r30, 0x2D	; 45
    2820:	f0 e0       	ldi	r31, 0x00	; 0
    2822:	80 81       	ld	r24, Z
    2824:	80 64       	ori	r24, 0x40	; 64
    2826:	8c 93       	st	X, r24

	SET_BIT(SPCR,SPCR_DORD);
    2828:	ad e2       	ldi	r26, 0x2D	; 45
    282a:	b0 e0       	ldi	r27, 0x00	; 0
    282c:	ed e2       	ldi	r30, 0x2D	; 45
    282e:	f0 e0       	ldi	r31, 0x00	; 0
    2830:	80 81       	ld	r24, Z
    2832:	80 62       	ori	r24, 0x20	; 32
    2834:	8c 93       	st	X, r24
	/* Configure sampling edge */
	SPCR |= ((config_slave->clk_polarity)<<3) | ((config_slave->clk_phase)<<2);
    2836:	ad e2       	ldi	r26, 0x2D	; 45
    2838:	b0 e0       	ldi	r27, 0x00	; 0
    283a:	ed e2       	ldi	r30, 0x2D	; 45
    283c:	f0 e0       	ldi	r31, 0x00	; 0
    283e:	80 81       	ld	r24, Z
    2840:	38 2f       	mov	r19, r24
    2842:	e9 81       	ldd	r30, Y+1	; 0x01
    2844:	fa 81       	ldd	r31, Y+2	; 0x02
    2846:	80 81       	ld	r24, Z
    2848:	88 2f       	mov	r24, r24
    284a:	90 e0       	ldi	r25, 0x00	; 0
    284c:	88 0f       	add	r24, r24
    284e:	99 1f       	adc	r25, r25
    2850:	88 0f       	add	r24, r24
    2852:	99 1f       	adc	r25, r25
    2854:	88 0f       	add	r24, r24
    2856:	99 1f       	adc	r25, r25
    2858:	28 2f       	mov	r18, r24
    285a:	e9 81       	ldd	r30, Y+1	; 0x01
    285c:	fa 81       	ldd	r31, Y+2	; 0x02
    285e:	81 81       	ldd	r24, Z+1	; 0x01
    2860:	88 2f       	mov	r24, r24
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	88 0f       	add	r24, r24
    2866:	99 1f       	adc	r25, r25
    2868:	88 0f       	add	r24, r24
    286a:	99 1f       	adc	r25, r25
    286c:	82 2b       	or	r24, r18
    286e:	83 2b       	or	r24, r19
    2870:	8c 93       	st	X, r24
	SPSR &= ~(1<<SPSR_SPI2X);
    2872:	ae e2       	ldi	r26, 0x2E	; 46
    2874:	b0 e0       	ldi	r27, 0x00	; 0
    2876:	ee e2       	ldi	r30, 0x2E	; 46
    2878:	f0 e0       	ldi	r31, 0x00	; 0
    287a:	80 81       	ld	r24, Z
    287c:	8e 7f       	andi	r24, 0xFE	; 254
    287e:	8c 93       	st	X, r24
#ifdef INTERRUPT
	SET_BIT(SPCR,SPCR_SPIE);
#endif

}
    2880:	0f 90       	pop	r0
    2882:	0f 90       	pop	r0
    2884:	cf 91       	pop	r28
    2886:	df 91       	pop	r29
    2888:	08 95       	ret

0000288a <M_SPI_sendReceiveByte>:
/*
 * Description:
 *  Function to send and receive data.
 */
u8 M_SPI_sendReceiveByte(u8 data)
{
    288a:	df 93       	push	r29
    288c:	cf 93       	push	r28
    288e:	0f 92       	push	r0
    2890:	cd b7       	in	r28, 0x3d	; 61
    2892:	de b7       	in	r29, 0x3e	; 62
    2894:	89 83       	std	Y+1, r24	; 0x01
	/* Send data */
	SPDR = data;
    2896:	ef e2       	ldi	r30, 0x2F	; 47
    2898:	f0 e0       	ldi	r31, 0x00	; 0
    289a:	89 81       	ldd	r24, Y+1	; 0x01
    289c:	80 83       	st	Z, r24
	/* Polling on SPI interrupt flag until finish sending */
	while(BIT_IS_CLEAR(SPSR,SPSR_SPIF)){}
    289e:	ee e2       	ldi	r30, 0x2E	; 46
    28a0:	f0 e0       	ldi	r31, 0x00	; 0
    28a2:	80 81       	ld	r24, Z
    28a4:	88 23       	and	r24, r24
    28a6:	dc f7       	brge	.-10     	; 0x289e <M_SPI_sendReceiveByte+0x14>
	/* Read received data and clear interrupt flag */
	return SPDR;
    28a8:	ef e2       	ldi	r30, 0x2F	; 47
    28aa:	f0 e0       	ldi	r31, 0x00	; 0
    28ac:	80 81       	ld	r24, Z
}
    28ae:	0f 90       	pop	r0
    28b0:	cf 91       	pop	r28
    28b2:	df 91       	pop	r29
    28b4:	08 95       	ret

000028b6 <M_SPI_sendString>:
/*
 * Description:
 *
 */
void M_SPI_sendString(u8 *string)
{
    28b6:	df 93       	push	r29
    28b8:	cf 93       	push	r28
    28ba:	00 d0       	rcall	.+0      	; 0x28bc <M_SPI_sendString+0x6>
    28bc:	0f 92       	push	r0
    28be:	cd b7       	in	r28, 0x3d	; 61
    28c0:	de b7       	in	r29, 0x3e	; 62
    28c2:	9b 83       	std	Y+3, r25	; 0x03
    28c4:	8a 83       	std	Y+2, r24	; 0x02
	u8 received_data = 0;
    28c6:	19 82       	std	Y+1, r1	; 0x01
    28c8:	0b c0       	rjmp	.+22     	; 0x28e0 <M_SPI_sendString+0x2a>
	while (*string != '\0')
	{
		received_data = M_SPI_sendReceiveByte(*string);
    28ca:	ea 81       	ldd	r30, Y+2	; 0x02
    28cc:	fb 81       	ldd	r31, Y+3	; 0x03
    28ce:	80 81       	ld	r24, Z
    28d0:	0e 94 45 14 	call	0x288a	; 0x288a <M_SPI_sendReceiveByte>
    28d4:	89 83       	std	Y+1, r24	; 0x01
		string++;
    28d6:	8a 81       	ldd	r24, Y+2	; 0x02
    28d8:	9b 81       	ldd	r25, Y+3	; 0x03
    28da:	01 96       	adiw	r24, 0x01	; 1
    28dc:	9b 83       	std	Y+3, r25	; 0x03
    28de:	8a 83       	std	Y+2, r24	; 0x02
 *
 */
void M_SPI_sendString(u8 *string)
{
	u8 received_data = 0;
	while (*string != '\0')
    28e0:	ea 81       	ldd	r30, Y+2	; 0x02
    28e2:	fb 81       	ldd	r31, Y+3	; 0x03
    28e4:	80 81       	ld	r24, Z
    28e6:	88 23       	and	r24, r24
    28e8:	81 f7       	brne	.-32     	; 0x28ca <M_SPI_sendString+0x14>
	{
		received_data = M_SPI_sendReceiveByte(*string);
		string++;
	}
}
    28ea:	0f 90       	pop	r0
    28ec:	0f 90       	pop	r0
    28ee:	0f 90       	pop	r0
    28f0:	cf 91       	pop	r28
    28f2:	df 91       	pop	r29
    28f4:	08 95       	ret

000028f6 <M_SPI_receiveString>:
/*
 * Description:
 *
 */
void M_SPI_receiveString(char *string)
{
    28f6:	0f 93       	push	r16
    28f8:	1f 93       	push	r17
    28fa:	df 93       	push	r29
    28fc:	cf 93       	push	r28
    28fe:	00 d0       	rcall	.+0      	; 0x2900 <M_SPI_receiveString+0xa>
    2900:	0f 92       	push	r0
    2902:	cd b7       	in	r28, 0x3d	; 61
    2904:	de b7       	in	r29, 0x3e	; 62
    2906:	9b 83       	std	Y+3, r25	; 0x03
    2908:	8a 83       	std	Y+2, r24	; 0x02
	s8 i = -1;
    290a:	8f ef       	ldi	r24, 0xFF	; 255
    290c:	89 83       	std	Y+1, r24	; 0x01
	do{
		i++;
    290e:	89 81       	ldd	r24, Y+1	; 0x01
    2910:	8f 5f       	subi	r24, 0xFF	; 255
    2912:	89 83       	std	Y+1, r24	; 0x01
		string[i] = M_SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    2914:	89 81       	ldd	r24, Y+1	; 0x01
    2916:	28 2f       	mov	r18, r24
    2918:	30 e0       	ldi	r19, 0x00	; 0
    291a:	8a 81       	ldd	r24, Y+2	; 0x02
    291c:	9b 81       	ldd	r25, Y+3	; 0x03
    291e:	8c 01       	movw	r16, r24
    2920:	02 0f       	add	r16, r18
    2922:	13 1f       	adc	r17, r19
    2924:	8f ef       	ldi	r24, 0xFF	; 255
    2926:	0e 94 45 14 	call	0x288a	; 0x288a <M_SPI_sendReceiveByte>
    292a:	f8 01       	movw	r30, r16
    292c:	80 83       	st	Z, r24
	}while(string[i] != '#');
    292e:	89 81       	ldd	r24, Y+1	; 0x01
    2930:	28 2f       	mov	r18, r24
    2932:	30 e0       	ldi	r19, 0x00	; 0
    2934:	8a 81       	ldd	r24, Y+2	; 0x02
    2936:	9b 81       	ldd	r25, Y+3	; 0x03
    2938:	fc 01       	movw	r30, r24
    293a:	e2 0f       	add	r30, r18
    293c:	f3 1f       	adc	r31, r19
    293e:	80 81       	ld	r24, Z
    2940:	83 32       	cpi	r24, 0x23	; 35
    2942:	29 f7       	brne	.-54     	; 0x290e <M_SPI_receiveString+0x18>
	string[i] = '\0';
    2944:	89 81       	ldd	r24, Y+1	; 0x01
    2946:	28 2f       	mov	r18, r24
    2948:	30 e0       	ldi	r19, 0x00	; 0
    294a:	8a 81       	ldd	r24, Y+2	; 0x02
    294c:	9b 81       	ldd	r25, Y+3	; 0x03
    294e:	fc 01       	movw	r30, r24
    2950:	e2 0f       	add	r30, r18
    2952:	f3 1f       	adc	r31, r19
    2954:	10 82       	st	Z, r1
}
    2956:	0f 90       	pop	r0
    2958:	0f 90       	pop	r0
    295a:	0f 90       	pop	r0
    295c:	cf 91       	pop	r28
    295e:	df 91       	pop	r29
    2960:	1f 91       	pop	r17
    2962:	0f 91       	pop	r16
    2964:	08 95       	ret

00002966 <MGIE_voidEnable>:
#include "mgie_register.h"
#include "mgie_config.h"
#include "mgie_private.h"


void MGIE_voidEnable(void){
    2966:	df 93       	push	r29
    2968:	cf 93       	push	r28
    296a:	cd b7       	in	r28, 0x3d	; 61
    296c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    296e:	af e5       	ldi	r26, 0x5F	; 95
    2970:	b0 e0       	ldi	r27, 0x00	; 0
    2972:	ef e5       	ldi	r30, 0x5F	; 95
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	80 81       	ld	r24, Z
    2978:	80 68       	ori	r24, 0x80	; 128
    297a:	8c 93       	st	X, r24
}
    297c:	cf 91       	pop	r28
    297e:	df 91       	pop	r29
    2980:	08 95       	ret

00002982 <MGIE_voidDisable>:
void MGIE_voidDisable(void){
    2982:	df 93       	push	r29
    2984:	cf 93       	push	r28
    2986:	cd b7       	in	r28, 0x3d	; 61
    2988:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,SREG_I);
    298a:	af e5       	ldi	r26, 0x5F	; 95
    298c:	b0 e0       	ldi	r27, 0x00	; 0
    298e:	ef e5       	ldi	r30, 0x5F	; 95
    2990:	f0 e0       	ldi	r31, 0x00	; 0
    2992:	80 81       	ld	r24, Z
    2994:	8f 77       	andi	r24, 0x7F	; 127
    2996:	8c 93       	st	X, r24
}
    2998:	cf 91       	pop	r28
    299a:	df 91       	pop	r29
    299c:	08 95       	ret

0000299e <STEPMOTOR_angleRotation>:

#include "stepmotor_interface.h"
#include "stepmotor_config.h"
#include "stepmotor_private.h"

void STEPMOTOR_angleRotation(u16 angle){//270
    299e:	df 93       	push	r29
    29a0:	cf 93       	push	r28
    29a2:	00 d0       	rcall	.+0      	; 0x29a4 <STEPMOTOR_angleRotation+0x6>
    29a4:	00 d0       	rcall	.+0      	; 0x29a6 <STEPMOTOR_angleRotation+0x8>
    29a6:	00 d0       	rcall	.+0      	; 0x29a8 <STEPMOTOR_angleRotation+0xa>
    29a8:	cd b7       	in	r28, 0x3d	; 61
    29aa:	de b7       	in	r29, 0x3e	; 62
    29ac:	9e 83       	std	Y+6, r25	; 0x06
    29ae:	8d 83       	std	Y+5, r24	; 0x05
	u16 max_iterator = (angle/FULL_STEP)+1;
    29b0:	8d 81       	ldd	r24, Y+5	; 0x05
    29b2:	9e 81       	ldd	r25, Y+6	; 0x06
    29b4:	cc 01       	movw	r24, r24
    29b6:	a0 e0       	ldi	r26, 0x00	; 0
    29b8:	b0 e0       	ldi	r27, 0x00	; 0
    29ba:	bc 01       	movw	r22, r24
    29bc:	cd 01       	movw	r24, r26
    29be:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    29c2:	dc 01       	movw	r26, r24
    29c4:	cb 01       	movw	r24, r22
    29c6:	bc 01       	movw	r22, r24
    29c8:	cd 01       	movw	r24, r26
    29ca:	23 e3       	ldi	r18, 0x33	; 51
    29cc:	33 e3       	ldi	r19, 0x33	; 51
    29ce:	43 e3       	ldi	r20, 0x33	; 51
    29d0:	5f e3       	ldi	r21, 0x3F	; 63
    29d2:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    29d6:	dc 01       	movw	r26, r24
    29d8:	cb 01       	movw	r24, r22
    29da:	bc 01       	movw	r22, r24
    29dc:	cd 01       	movw	r24, r26
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	40 e8       	ldi	r20, 0x80	; 128
    29e4:	5f e3       	ldi	r21, 0x3F	; 63
    29e6:	0e 94 f2 01 	call	0x3e4	; 0x3e4 <__addsf3>
    29ea:	dc 01       	movw	r26, r24
    29ec:	cb 01       	movw	r24, r22
    29ee:	bc 01       	movw	r22, r24
    29f0:	cd 01       	movw	r24, r26
    29f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29f6:	dc 01       	movw	r26, r24
    29f8:	cb 01       	movw	r24, r22
    29fa:	9c 83       	std	Y+4, r25	; 0x04
    29fc:	8b 83       	std	Y+3, r24	; 0x03
	u16 iterator ;
	for(iterator = 0 ; iterator < max_iterator ; iterator++){
    29fe:	1a 82       	std	Y+2, r1	; 0x02
    2a00:	19 82       	std	Y+1, r1	; 0x01
    2a02:	0d c0       	rjmp	.+26     	; 0x2a1e <STEPMOTOR_angleRotation+0x80>
		STEPMOTOR_fistStep();
    2a04:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <STEPMOTOR_fistStep>
		STEPMOTOR_secondStep();
    2a08:	0e 94 e7 15 	call	0x2bce	; 0x2bce <STEPMOTOR_secondStep>
		STEPMOTOR_thirdStep();
    2a0c:	0e 94 76 16 	call	0x2cec	; 0x2cec <STEPMOTOR_thirdStep>
		STEPMOTOR_fourthStep();
    2a10:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <STEPMOTOR_fourthStep>
#include "stepmotor_private.h"

void STEPMOTOR_angleRotation(u16 angle){//270
	u16 max_iterator = (angle/FULL_STEP)+1;
	u16 iterator ;
	for(iterator = 0 ; iterator < max_iterator ; iterator++){
    2a14:	89 81       	ldd	r24, Y+1	; 0x01
    2a16:	9a 81       	ldd	r25, Y+2	; 0x02
    2a18:	01 96       	adiw	r24, 0x01	; 1
    2a1a:	9a 83       	std	Y+2, r25	; 0x02
    2a1c:	89 83       	std	Y+1, r24	; 0x01
    2a1e:	29 81       	ldd	r18, Y+1	; 0x01
    2a20:	3a 81       	ldd	r19, Y+2	; 0x02
    2a22:	8b 81       	ldd	r24, Y+3	; 0x03
    2a24:	9c 81       	ldd	r25, Y+4	; 0x04
    2a26:	28 17       	cp	r18, r24
    2a28:	39 07       	cpc	r19, r25
    2a2a:	60 f3       	brcs	.-40     	; 0x2a04 <STEPMOTOR_angleRotation+0x66>
		STEPMOTOR_fistStep();
		STEPMOTOR_secondStep();
		STEPMOTOR_thirdStep();
		STEPMOTOR_fourthStep();
	}
}
    2a2c:	26 96       	adiw	r28, 0x06	; 6
    2a2e:	0f b6       	in	r0, 0x3f	; 63
    2a30:	f8 94       	cli
    2a32:	de bf       	out	0x3e, r29	; 62
    2a34:	0f be       	out	0x3f, r0	; 63
    2a36:	cd bf       	out	0x3d, r28	; 61
    2a38:	cf 91       	pop	r28
    2a3a:	df 91       	pop	r29
    2a3c:	08 95       	ret

00002a3e <STEPMOTOR_oneStepRotationACW>:
void STEPMOTOR_oneStepRotationACW(void){//270
    2a3e:	df 93       	push	r29
    2a40:	cf 93       	push	r28
    2a42:	cd b7       	in	r28, 0x3d	; 61
    2a44:	de b7       	in	r29, 0x3e	; 62
		STEPMOTOR_fourthStep();
    2a46:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <STEPMOTOR_fourthStep>
		STEPMOTOR_thirdStep();
    2a4a:	0e 94 76 16 	call	0x2cec	; 0x2cec <STEPMOTOR_thirdStep>
		STEPMOTOR_secondStep();
    2a4e:	0e 94 e7 15 	call	0x2bce	; 0x2bce <STEPMOTOR_secondStep>
		STEPMOTOR_fistStep();
    2a52:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <STEPMOTOR_fistStep>
}
    2a56:	cf 91       	pop	r28
    2a58:	df 91       	pop	r29
    2a5a:	08 95       	ret

00002a5c <STEPMOTOR_oneStepRotation>:
void STEPMOTOR_oneStepRotation(void){//270
    2a5c:	df 93       	push	r29
    2a5e:	cf 93       	push	r28
    2a60:	cd b7       	in	r28, 0x3d	; 61
    2a62:	de b7       	in	r29, 0x3e	; 62
		STEPMOTOR_fistStep();
    2a64:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <STEPMOTOR_fistStep>
		STEPMOTOR_secondStep();
    2a68:	0e 94 e7 15 	call	0x2bce	; 0x2bce <STEPMOTOR_secondStep>
		STEPMOTOR_thirdStep();
    2a6c:	0e 94 76 16 	call	0x2cec	; 0x2cec <STEPMOTOR_thirdStep>
		STEPMOTOR_fourthStep();
    2a70:	0e 94 05 17 	call	0x2e0a	; 0x2e0a <STEPMOTOR_fourthStep>
}
    2a74:	cf 91       	pop	r28
    2a76:	df 91       	pop	r29
    2a78:	08 95       	ret

00002a7a <STEPMOTOR_Stop>:

void STEPMOTOR_Stop(void){
    2a7a:	df 93       	push	r29
    2a7c:	cf 93       	push	r28
    2a7e:	cd b7       	in	r28, 0x3d	; 61
    2a80:	de b7       	in	r29, 0x3e	; 62
	MDIO_ErrorS_SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_LOW);
    2a82:	84 e0       	ldi	r24, 0x04	; 4
    2a84:	60 e0       	ldi	r22, 0x00	; 0
    2a86:	40 e0       	ldi	r20, 0x00	; 0
    2a88:	0e 94 01 0b 	call	0x1602	; 0x1602 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_LOW);
    2a8c:	84 e0       	ldi	r24, 0x04	; 4
    2a8e:	61 e0       	ldi	r22, 0x01	; 1
    2a90:	40 e0       	ldi	r20, 0x00	; 0
    2a92:	0e 94 01 0b 	call	0x1602	; 0x1602 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_LOW);
    2a96:	84 e0       	ldi	r24, 0x04	; 4
    2a98:	62 e0       	ldi	r22, 0x02	; 2
    2a9a:	40 e0       	ldi	r20, 0x00	; 0
    2a9c:	0e 94 01 0b 	call	0x1602	; 0x1602 <MDIO_ErrorS_SetPinValue>
	MDIO_ErrorS_SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_LOW);
    2aa0:	84 e0       	ldi	r24, 0x04	; 4
    2aa2:	63 e0       	ldi	r22, 0x03	; 3
    2aa4:	40 e0       	ldi	r20, 0x00	; 0
    2aa6:	0e 94 01 0b 	call	0x1602	; 0x1602 <MDIO_ErrorS_SetPinValue>
}
    2aaa:	cf 91       	pop	r28
    2aac:	df 91       	pop	r29
    2aae:	08 95       	ret

00002ab0 <STEPMOTOR_fistStep>:
void STEPMOTOR_fistStep(){
    2ab0:	df 93       	push	r29
    2ab2:	cf 93       	push	r28
    2ab4:	cd b7       	in	r28, 0x3d	; 61
    2ab6:	de b7       	in	r29, 0x3e	; 62
    2ab8:	2e 97       	sbiw	r28, 0x0e	; 14
    2aba:	0f b6       	in	r0, 0x3f	; 63
    2abc:	f8 94       	cli
    2abe:	de bf       	out	0x3e, r29	; 62
    2ac0:	0f be       	out	0x3f, r0	; 63
    2ac2:	cd bf       	out	0x3d, r28	; 61
	MDIO_ErrorS_SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_HIGH);
    2ac4:	84 e0       	ldi	r24, 0x04	; 4
    2ac6:	60 e0       	ldi	r22, 0x00	; 0
    2ac8:	41 e0       	ldi	r20, 0x01	; 1
    2aca:	0e 94 01 0b 	call	0x1602	; 0x1602 <MDIO_ErrorS_SetPinValue>
    2ace:	80 e0       	ldi	r24, 0x00	; 0
    2ad0:	90 e0       	ldi	r25, 0x00	; 0
    2ad2:	a0 e0       	ldi	r26, 0x00	; 0
    2ad4:	b0 e4       	ldi	r27, 0x40	; 64
    2ad6:	8b 87       	std	Y+11, r24	; 0x0b
    2ad8:	9c 87       	std	Y+12, r25	; 0x0c
    2ada:	ad 87       	std	Y+13, r26	; 0x0d
    2adc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ade:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ae0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ae2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ae4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ae6:	20 e0       	ldi	r18, 0x00	; 0
    2ae8:	30 e0       	ldi	r19, 0x00	; 0
    2aea:	4a ef       	ldi	r20, 0xFA	; 250
    2aec:	54 e4       	ldi	r21, 0x44	; 68
    2aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2af2:	dc 01       	movw	r26, r24
    2af4:	cb 01       	movw	r24, r22
    2af6:	8f 83       	std	Y+7, r24	; 0x07
    2af8:	98 87       	std	Y+8, r25	; 0x08
    2afa:	a9 87       	std	Y+9, r26	; 0x09
    2afc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2afe:	6f 81       	ldd	r22, Y+7	; 0x07
    2b00:	78 85       	ldd	r23, Y+8	; 0x08
    2b02:	89 85       	ldd	r24, Y+9	; 0x09
    2b04:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b06:	20 e0       	ldi	r18, 0x00	; 0
    2b08:	30 e0       	ldi	r19, 0x00	; 0
    2b0a:	40 e8       	ldi	r20, 0x80	; 128
    2b0c:	5f e3       	ldi	r21, 0x3F	; 63
    2b0e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b12:	88 23       	and	r24, r24
    2b14:	2c f4       	brge	.+10     	; 0x2b20 <STEPMOTOR_fistStep+0x70>
		__ticks = 1;
    2b16:	81 e0       	ldi	r24, 0x01	; 1
    2b18:	90 e0       	ldi	r25, 0x00	; 0
    2b1a:	9e 83       	std	Y+6, r25	; 0x06
    2b1c:	8d 83       	std	Y+5, r24	; 0x05
    2b1e:	3f c0       	rjmp	.+126    	; 0x2b9e <STEPMOTOR_fistStep+0xee>
	else if (__tmp > 65535)
    2b20:	6f 81       	ldd	r22, Y+7	; 0x07
    2b22:	78 85       	ldd	r23, Y+8	; 0x08
    2b24:	89 85       	ldd	r24, Y+9	; 0x09
    2b26:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b28:	20 e0       	ldi	r18, 0x00	; 0
    2b2a:	3f ef       	ldi	r19, 0xFF	; 255
    2b2c:	4f e7       	ldi	r20, 0x7F	; 127
    2b2e:	57 e4       	ldi	r21, 0x47	; 71
    2b30:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b34:	18 16       	cp	r1, r24
    2b36:	4c f5       	brge	.+82     	; 0x2b8a <STEPMOTOR_fistStep+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b38:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b40:	20 e0       	ldi	r18, 0x00	; 0
    2b42:	30 e0       	ldi	r19, 0x00	; 0
    2b44:	40 e2       	ldi	r20, 0x20	; 32
    2b46:	51 e4       	ldi	r21, 0x41	; 65
    2b48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b4c:	dc 01       	movw	r26, r24
    2b4e:	cb 01       	movw	r24, r22
    2b50:	bc 01       	movw	r22, r24
    2b52:	cd 01       	movw	r24, r26
    2b54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b58:	dc 01       	movw	r26, r24
    2b5a:	cb 01       	movw	r24, r22
    2b5c:	9e 83       	std	Y+6, r25	; 0x06
    2b5e:	8d 83       	std	Y+5, r24	; 0x05
    2b60:	0f c0       	rjmp	.+30     	; 0x2b80 <STEPMOTOR_fistStep+0xd0>
    2b62:	88 ec       	ldi	r24, 0xC8	; 200
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	9c 83       	std	Y+4, r25	; 0x04
    2b68:	8b 83       	std	Y+3, r24	; 0x03
    2b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6c:	9c 81       	ldd	r25, Y+4	; 0x04
    2b6e:	01 97       	sbiw	r24, 0x01	; 1
    2b70:	f1 f7       	brne	.-4      	; 0x2b6e <STEPMOTOR_fistStep+0xbe>
    2b72:	9c 83       	std	Y+4, r25	; 0x04
    2b74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b76:	8d 81       	ldd	r24, Y+5	; 0x05
    2b78:	9e 81       	ldd	r25, Y+6	; 0x06
    2b7a:	01 97       	sbiw	r24, 0x01	; 1
    2b7c:	9e 83       	std	Y+6, r25	; 0x06
    2b7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b80:	8d 81       	ldd	r24, Y+5	; 0x05
    2b82:	9e 81       	ldd	r25, Y+6	; 0x06
    2b84:	00 97       	sbiw	r24, 0x00	; 0
    2b86:	69 f7       	brne	.-38     	; 0x2b62 <STEPMOTOR_fistStep+0xb2>
    2b88:	14 c0       	rjmp	.+40     	; 0x2bb2 <STEPMOTOR_fistStep+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b8a:	6f 81       	ldd	r22, Y+7	; 0x07
    2b8c:	78 85       	ldd	r23, Y+8	; 0x08
    2b8e:	89 85       	ldd	r24, Y+9	; 0x09
    2b90:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b96:	dc 01       	movw	r26, r24
    2b98:	cb 01       	movw	r24, r22
    2b9a:	9e 83       	std	Y+6, r25	; 0x06
    2b9c:	8d 83       	std	Y+5, r24	; 0x05
    2b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba2:	9a 83       	std	Y+2, r25	; 0x02
    2ba4:	89 83       	std	Y+1, r24	; 0x01
    2ba6:	89 81       	ldd	r24, Y+1	; 0x01
    2ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    2baa:	01 97       	sbiw	r24, 0x01	; 1
    2bac:	f1 f7       	brne	.-4      	; 0x2baa <STEPMOTOR_fistStep+0xfa>
    2bae:	9a 83       	std	Y+2, r25	; 0x02
    2bb0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_ErrorS_SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN1,DIO_LOW);
    2bb2:	84 e0       	ldi	r24, 0x04	; 4
    2bb4:	60 e0       	ldi	r22, 0x00	; 0
    2bb6:	40 e0       	ldi	r20, 0x00	; 0
    2bb8:	0e 94 01 0b 	call	0x1602	; 0x1602 <MDIO_ErrorS_SetPinValue>
}
    2bbc:	2e 96       	adiw	r28, 0x0e	; 14
    2bbe:	0f b6       	in	r0, 0x3f	; 63
    2bc0:	f8 94       	cli
    2bc2:	de bf       	out	0x3e, r29	; 62
    2bc4:	0f be       	out	0x3f, r0	; 63
    2bc6:	cd bf       	out	0x3d, r28	; 61
    2bc8:	cf 91       	pop	r28
    2bca:	df 91       	pop	r29
    2bcc:	08 95       	ret

00002bce <STEPMOTOR_secondStep>:
void STEPMOTOR_secondStep(){
    2bce:	df 93       	push	r29
    2bd0:	cf 93       	push	r28
    2bd2:	cd b7       	in	r28, 0x3d	; 61
    2bd4:	de b7       	in	r29, 0x3e	; 62
    2bd6:	2e 97       	sbiw	r28, 0x0e	; 14
    2bd8:	0f b6       	in	r0, 0x3f	; 63
    2bda:	f8 94       	cli
    2bdc:	de bf       	out	0x3e, r29	; 62
    2bde:	0f be       	out	0x3f, r0	; 63
    2be0:	cd bf       	out	0x3d, r28	; 61
	MDIO_ErrorS_SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_HIGH);
    2be2:	84 e0       	ldi	r24, 0x04	; 4
    2be4:	61 e0       	ldi	r22, 0x01	; 1
    2be6:	41 e0       	ldi	r20, 0x01	; 1
    2be8:	0e 94 01 0b 	call	0x1602	; 0x1602 <MDIO_ErrorS_SetPinValue>
    2bec:	80 e0       	ldi	r24, 0x00	; 0
    2bee:	90 e0       	ldi	r25, 0x00	; 0
    2bf0:	a0 e0       	ldi	r26, 0x00	; 0
    2bf2:	b0 e4       	ldi	r27, 0x40	; 64
    2bf4:	8b 87       	std	Y+11, r24	; 0x0b
    2bf6:	9c 87       	std	Y+12, r25	; 0x0c
    2bf8:	ad 87       	std	Y+13, r26	; 0x0d
    2bfa:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bfc:	6b 85       	ldd	r22, Y+11	; 0x0b
    2bfe:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c00:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c02:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c04:	20 e0       	ldi	r18, 0x00	; 0
    2c06:	30 e0       	ldi	r19, 0x00	; 0
    2c08:	4a ef       	ldi	r20, 0xFA	; 250
    2c0a:	54 e4       	ldi	r21, 0x44	; 68
    2c0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c10:	dc 01       	movw	r26, r24
    2c12:	cb 01       	movw	r24, r22
    2c14:	8f 83       	std	Y+7, r24	; 0x07
    2c16:	98 87       	std	Y+8, r25	; 0x08
    2c18:	a9 87       	std	Y+9, r26	; 0x09
    2c1a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c1c:	6f 81       	ldd	r22, Y+7	; 0x07
    2c1e:	78 85       	ldd	r23, Y+8	; 0x08
    2c20:	89 85       	ldd	r24, Y+9	; 0x09
    2c22:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	40 e8       	ldi	r20, 0x80	; 128
    2c2a:	5f e3       	ldi	r21, 0x3F	; 63
    2c2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c30:	88 23       	and	r24, r24
    2c32:	2c f4       	brge	.+10     	; 0x2c3e <STEPMOTOR_secondStep+0x70>
		__ticks = 1;
    2c34:	81 e0       	ldi	r24, 0x01	; 1
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	9e 83       	std	Y+6, r25	; 0x06
    2c3a:	8d 83       	std	Y+5, r24	; 0x05
    2c3c:	3f c0       	rjmp	.+126    	; 0x2cbc <STEPMOTOR_secondStep+0xee>
	else if (__tmp > 65535)
    2c3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2c40:	78 85       	ldd	r23, Y+8	; 0x08
    2c42:	89 85       	ldd	r24, Y+9	; 0x09
    2c44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c46:	20 e0       	ldi	r18, 0x00	; 0
    2c48:	3f ef       	ldi	r19, 0xFF	; 255
    2c4a:	4f e7       	ldi	r20, 0x7F	; 127
    2c4c:	57 e4       	ldi	r21, 0x47	; 71
    2c4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c52:	18 16       	cp	r1, r24
    2c54:	4c f5       	brge	.+82     	; 0x2ca8 <STEPMOTOR_secondStep+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c56:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c58:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c5a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c5c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c5e:	20 e0       	ldi	r18, 0x00	; 0
    2c60:	30 e0       	ldi	r19, 0x00	; 0
    2c62:	40 e2       	ldi	r20, 0x20	; 32
    2c64:	51 e4       	ldi	r21, 0x41	; 65
    2c66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c6a:	dc 01       	movw	r26, r24
    2c6c:	cb 01       	movw	r24, r22
    2c6e:	bc 01       	movw	r22, r24
    2c70:	cd 01       	movw	r24, r26
    2c72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c76:	dc 01       	movw	r26, r24
    2c78:	cb 01       	movw	r24, r22
    2c7a:	9e 83       	std	Y+6, r25	; 0x06
    2c7c:	8d 83       	std	Y+5, r24	; 0x05
    2c7e:	0f c0       	rjmp	.+30     	; 0x2c9e <STEPMOTOR_secondStep+0xd0>
    2c80:	88 ec       	ldi	r24, 0xC8	; 200
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	9c 83       	std	Y+4, r25	; 0x04
    2c86:	8b 83       	std	Y+3, r24	; 0x03
    2c88:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8a:	9c 81       	ldd	r25, Y+4	; 0x04
    2c8c:	01 97       	sbiw	r24, 0x01	; 1
    2c8e:	f1 f7       	brne	.-4      	; 0x2c8c <STEPMOTOR_secondStep+0xbe>
    2c90:	9c 83       	std	Y+4, r25	; 0x04
    2c92:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c94:	8d 81       	ldd	r24, Y+5	; 0x05
    2c96:	9e 81       	ldd	r25, Y+6	; 0x06
    2c98:	01 97       	sbiw	r24, 0x01	; 1
    2c9a:	9e 83       	std	Y+6, r25	; 0x06
    2c9c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c9e:	8d 81       	ldd	r24, Y+5	; 0x05
    2ca0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ca2:	00 97       	sbiw	r24, 0x00	; 0
    2ca4:	69 f7       	brne	.-38     	; 0x2c80 <STEPMOTOR_secondStep+0xb2>
    2ca6:	14 c0       	rjmp	.+40     	; 0x2cd0 <STEPMOTOR_secondStep+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ca8:	6f 81       	ldd	r22, Y+7	; 0x07
    2caa:	78 85       	ldd	r23, Y+8	; 0x08
    2cac:	89 85       	ldd	r24, Y+9	; 0x09
    2cae:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	cb 01       	movw	r24, r22
    2cb8:	9e 83       	std	Y+6, r25	; 0x06
    2cba:	8d 83       	std	Y+5, r24	; 0x05
    2cbc:	8d 81       	ldd	r24, Y+5	; 0x05
    2cbe:	9e 81       	ldd	r25, Y+6	; 0x06
    2cc0:	9a 83       	std	Y+2, r25	; 0x02
    2cc2:	89 83       	std	Y+1, r24	; 0x01
    2cc4:	89 81       	ldd	r24, Y+1	; 0x01
    2cc6:	9a 81       	ldd	r25, Y+2	; 0x02
    2cc8:	01 97       	sbiw	r24, 0x01	; 1
    2cca:	f1 f7       	brne	.-4      	; 0x2cc8 <STEPMOTOR_secondStep+0xfa>
    2ccc:	9a 83       	std	Y+2, r25	; 0x02
    2cce:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_ErrorS_SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN2,DIO_LOW);
    2cd0:	84 e0       	ldi	r24, 0x04	; 4
    2cd2:	61 e0       	ldi	r22, 0x01	; 1
    2cd4:	40 e0       	ldi	r20, 0x00	; 0
    2cd6:	0e 94 01 0b 	call	0x1602	; 0x1602 <MDIO_ErrorS_SetPinValue>
}
    2cda:	2e 96       	adiw	r28, 0x0e	; 14
    2cdc:	0f b6       	in	r0, 0x3f	; 63
    2cde:	f8 94       	cli
    2ce0:	de bf       	out	0x3e, r29	; 62
    2ce2:	0f be       	out	0x3f, r0	; 63
    2ce4:	cd bf       	out	0x3d, r28	; 61
    2ce6:	cf 91       	pop	r28
    2ce8:	df 91       	pop	r29
    2cea:	08 95       	ret

00002cec <STEPMOTOR_thirdStep>:
void STEPMOTOR_thirdStep(){
    2cec:	df 93       	push	r29
    2cee:	cf 93       	push	r28
    2cf0:	cd b7       	in	r28, 0x3d	; 61
    2cf2:	de b7       	in	r29, 0x3e	; 62
    2cf4:	2e 97       	sbiw	r28, 0x0e	; 14
    2cf6:	0f b6       	in	r0, 0x3f	; 63
    2cf8:	f8 94       	cli
    2cfa:	de bf       	out	0x3e, r29	; 62
    2cfc:	0f be       	out	0x3f, r0	; 63
    2cfe:	cd bf       	out	0x3d, r28	; 61
	MDIO_ErrorS_SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_HIGH);
    2d00:	84 e0       	ldi	r24, 0x04	; 4
    2d02:	62 e0       	ldi	r22, 0x02	; 2
    2d04:	41 e0       	ldi	r20, 0x01	; 1
    2d06:	0e 94 01 0b 	call	0x1602	; 0x1602 <MDIO_ErrorS_SetPinValue>
    2d0a:	80 e0       	ldi	r24, 0x00	; 0
    2d0c:	90 e0       	ldi	r25, 0x00	; 0
    2d0e:	a0 e0       	ldi	r26, 0x00	; 0
    2d10:	b0 e4       	ldi	r27, 0x40	; 64
    2d12:	8b 87       	std	Y+11, r24	; 0x0b
    2d14:	9c 87       	std	Y+12, r25	; 0x0c
    2d16:	ad 87       	std	Y+13, r26	; 0x0d
    2d18:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d1a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d1c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d1e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d20:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d22:	20 e0       	ldi	r18, 0x00	; 0
    2d24:	30 e0       	ldi	r19, 0x00	; 0
    2d26:	4a ef       	ldi	r20, 0xFA	; 250
    2d28:	54 e4       	ldi	r21, 0x44	; 68
    2d2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d2e:	dc 01       	movw	r26, r24
    2d30:	cb 01       	movw	r24, r22
    2d32:	8f 83       	std	Y+7, r24	; 0x07
    2d34:	98 87       	std	Y+8, r25	; 0x08
    2d36:	a9 87       	std	Y+9, r26	; 0x09
    2d38:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d3a:	6f 81       	ldd	r22, Y+7	; 0x07
    2d3c:	78 85       	ldd	r23, Y+8	; 0x08
    2d3e:	89 85       	ldd	r24, Y+9	; 0x09
    2d40:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d42:	20 e0       	ldi	r18, 0x00	; 0
    2d44:	30 e0       	ldi	r19, 0x00	; 0
    2d46:	40 e8       	ldi	r20, 0x80	; 128
    2d48:	5f e3       	ldi	r21, 0x3F	; 63
    2d4a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d4e:	88 23       	and	r24, r24
    2d50:	2c f4       	brge	.+10     	; 0x2d5c <STEPMOTOR_thirdStep+0x70>
		__ticks = 1;
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	9e 83       	std	Y+6, r25	; 0x06
    2d58:	8d 83       	std	Y+5, r24	; 0x05
    2d5a:	3f c0       	rjmp	.+126    	; 0x2dda <STEPMOTOR_thirdStep+0xee>
	else if (__tmp > 65535)
    2d5c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d5e:	78 85       	ldd	r23, Y+8	; 0x08
    2d60:	89 85       	ldd	r24, Y+9	; 0x09
    2d62:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d64:	20 e0       	ldi	r18, 0x00	; 0
    2d66:	3f ef       	ldi	r19, 0xFF	; 255
    2d68:	4f e7       	ldi	r20, 0x7F	; 127
    2d6a:	57 e4       	ldi	r21, 0x47	; 71
    2d6c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d70:	18 16       	cp	r1, r24
    2d72:	4c f5       	brge	.+82     	; 0x2dc6 <STEPMOTOR_thirdStep+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d74:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d76:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d78:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d7c:	20 e0       	ldi	r18, 0x00	; 0
    2d7e:	30 e0       	ldi	r19, 0x00	; 0
    2d80:	40 e2       	ldi	r20, 0x20	; 32
    2d82:	51 e4       	ldi	r21, 0x41	; 65
    2d84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d88:	dc 01       	movw	r26, r24
    2d8a:	cb 01       	movw	r24, r22
    2d8c:	bc 01       	movw	r22, r24
    2d8e:	cd 01       	movw	r24, r26
    2d90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d94:	dc 01       	movw	r26, r24
    2d96:	cb 01       	movw	r24, r22
    2d98:	9e 83       	std	Y+6, r25	; 0x06
    2d9a:	8d 83       	std	Y+5, r24	; 0x05
    2d9c:	0f c0       	rjmp	.+30     	; 0x2dbc <STEPMOTOR_thirdStep+0xd0>
    2d9e:	88 ec       	ldi	r24, 0xC8	; 200
    2da0:	90 e0       	ldi	r25, 0x00	; 0
    2da2:	9c 83       	std	Y+4, r25	; 0x04
    2da4:	8b 83       	std	Y+3, r24	; 0x03
    2da6:	8b 81       	ldd	r24, Y+3	; 0x03
    2da8:	9c 81       	ldd	r25, Y+4	; 0x04
    2daa:	01 97       	sbiw	r24, 0x01	; 1
    2dac:	f1 f7       	brne	.-4      	; 0x2daa <STEPMOTOR_thirdStep+0xbe>
    2dae:	9c 83       	std	Y+4, r25	; 0x04
    2db0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db2:	8d 81       	ldd	r24, Y+5	; 0x05
    2db4:	9e 81       	ldd	r25, Y+6	; 0x06
    2db6:	01 97       	sbiw	r24, 0x01	; 1
    2db8:	9e 83       	std	Y+6, r25	; 0x06
    2dba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dbc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dbe:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc0:	00 97       	sbiw	r24, 0x00	; 0
    2dc2:	69 f7       	brne	.-38     	; 0x2d9e <STEPMOTOR_thirdStep+0xb2>
    2dc4:	14 c0       	rjmp	.+40     	; 0x2dee <STEPMOTOR_thirdStep+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc6:	6f 81       	ldd	r22, Y+7	; 0x07
    2dc8:	78 85       	ldd	r23, Y+8	; 0x08
    2dca:	89 85       	ldd	r24, Y+9	; 0x09
    2dcc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd2:	dc 01       	movw	r26, r24
    2dd4:	cb 01       	movw	r24, r22
    2dd6:	9e 83       	std	Y+6, r25	; 0x06
    2dd8:	8d 83       	std	Y+5, r24	; 0x05
    2dda:	8d 81       	ldd	r24, Y+5	; 0x05
    2ddc:	9e 81       	ldd	r25, Y+6	; 0x06
    2dde:	9a 83       	std	Y+2, r25	; 0x02
    2de0:	89 83       	std	Y+1, r24	; 0x01
    2de2:	89 81       	ldd	r24, Y+1	; 0x01
    2de4:	9a 81       	ldd	r25, Y+2	; 0x02
    2de6:	01 97       	sbiw	r24, 0x01	; 1
    2de8:	f1 f7       	brne	.-4      	; 0x2de6 <STEPMOTOR_thirdStep+0xfa>
    2dea:	9a 83       	std	Y+2, r25	; 0x02
    2dec:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_ErrorS_SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN3,DIO_LOW);
    2dee:	84 e0       	ldi	r24, 0x04	; 4
    2df0:	62 e0       	ldi	r22, 0x02	; 2
    2df2:	40 e0       	ldi	r20, 0x00	; 0
    2df4:	0e 94 01 0b 	call	0x1602	; 0x1602 <MDIO_ErrorS_SetPinValue>
}
    2df8:	2e 96       	adiw	r28, 0x0e	; 14
    2dfa:	0f b6       	in	r0, 0x3f	; 63
    2dfc:	f8 94       	cli
    2dfe:	de bf       	out	0x3e, r29	; 62
    2e00:	0f be       	out	0x3f, r0	; 63
    2e02:	cd bf       	out	0x3d, r28	; 61
    2e04:	cf 91       	pop	r28
    2e06:	df 91       	pop	r29
    2e08:	08 95       	ret

00002e0a <STEPMOTOR_fourthStep>:
void STEPMOTOR_fourthStep(){
    2e0a:	df 93       	push	r29
    2e0c:	cf 93       	push	r28
    2e0e:	cd b7       	in	r28, 0x3d	; 61
    2e10:	de b7       	in	r29, 0x3e	; 62
    2e12:	2e 97       	sbiw	r28, 0x0e	; 14
    2e14:	0f b6       	in	r0, 0x3f	; 63
    2e16:	f8 94       	cli
    2e18:	de bf       	out	0x3e, r29	; 62
    2e1a:	0f be       	out	0x3f, r0	; 63
    2e1c:	cd bf       	out	0x3d, r28	; 61
	MDIO_ErrorS_SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_HIGH);
    2e1e:	84 e0       	ldi	r24, 0x04	; 4
    2e20:	63 e0       	ldi	r22, 0x03	; 3
    2e22:	41 e0       	ldi	r20, 0x01	; 1
    2e24:	0e 94 01 0b 	call	0x1602	; 0x1602 <MDIO_ErrorS_SetPinValue>
    2e28:	80 e0       	ldi	r24, 0x00	; 0
    2e2a:	90 e0       	ldi	r25, 0x00	; 0
    2e2c:	a0 e0       	ldi	r26, 0x00	; 0
    2e2e:	b0 e4       	ldi	r27, 0x40	; 64
    2e30:	8b 87       	std	Y+11, r24	; 0x0b
    2e32:	9c 87       	std	Y+12, r25	; 0x0c
    2e34:	ad 87       	std	Y+13, r26	; 0x0d
    2e36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e38:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e40:	20 e0       	ldi	r18, 0x00	; 0
    2e42:	30 e0       	ldi	r19, 0x00	; 0
    2e44:	4a ef       	ldi	r20, 0xFA	; 250
    2e46:	54 e4       	ldi	r21, 0x44	; 68
    2e48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e4c:	dc 01       	movw	r26, r24
    2e4e:	cb 01       	movw	r24, r22
    2e50:	8f 83       	std	Y+7, r24	; 0x07
    2e52:	98 87       	std	Y+8, r25	; 0x08
    2e54:	a9 87       	std	Y+9, r26	; 0x09
    2e56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e58:	6f 81       	ldd	r22, Y+7	; 0x07
    2e5a:	78 85       	ldd	r23, Y+8	; 0x08
    2e5c:	89 85       	ldd	r24, Y+9	; 0x09
    2e5e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e60:	20 e0       	ldi	r18, 0x00	; 0
    2e62:	30 e0       	ldi	r19, 0x00	; 0
    2e64:	40 e8       	ldi	r20, 0x80	; 128
    2e66:	5f e3       	ldi	r21, 0x3F	; 63
    2e68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e6c:	88 23       	and	r24, r24
    2e6e:	2c f4       	brge	.+10     	; 0x2e7a <STEPMOTOR_fourthStep+0x70>
		__ticks = 1;
    2e70:	81 e0       	ldi	r24, 0x01	; 1
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	9e 83       	std	Y+6, r25	; 0x06
    2e76:	8d 83       	std	Y+5, r24	; 0x05
    2e78:	3f c0       	rjmp	.+126    	; 0x2ef8 <STEPMOTOR_fourthStep+0xee>
	else if (__tmp > 65535)
    2e7a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e7c:	78 85       	ldd	r23, Y+8	; 0x08
    2e7e:	89 85       	ldd	r24, Y+9	; 0x09
    2e80:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	3f ef       	ldi	r19, 0xFF	; 255
    2e86:	4f e7       	ldi	r20, 0x7F	; 127
    2e88:	57 e4       	ldi	r21, 0x47	; 71
    2e8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e8e:	18 16       	cp	r1, r24
    2e90:	4c f5       	brge	.+82     	; 0x2ee4 <STEPMOTOR_fourthStep+0xda>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e92:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e94:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e96:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e98:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e9a:	20 e0       	ldi	r18, 0x00	; 0
    2e9c:	30 e0       	ldi	r19, 0x00	; 0
    2e9e:	40 e2       	ldi	r20, 0x20	; 32
    2ea0:	51 e4       	ldi	r21, 0x41	; 65
    2ea2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ea6:	dc 01       	movw	r26, r24
    2ea8:	cb 01       	movw	r24, r22
    2eaa:	bc 01       	movw	r22, r24
    2eac:	cd 01       	movw	r24, r26
    2eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eb2:	dc 01       	movw	r26, r24
    2eb4:	cb 01       	movw	r24, r22
    2eb6:	9e 83       	std	Y+6, r25	; 0x06
    2eb8:	8d 83       	std	Y+5, r24	; 0x05
    2eba:	0f c0       	rjmp	.+30     	; 0x2eda <STEPMOTOR_fourthStep+0xd0>
    2ebc:	88 ec       	ldi	r24, 0xC8	; 200
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	9c 83       	std	Y+4, r25	; 0x04
    2ec2:	8b 83       	std	Y+3, r24	; 0x03
    2ec4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ec6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec8:	01 97       	sbiw	r24, 0x01	; 1
    2eca:	f1 f7       	brne	.-4      	; 0x2ec8 <STEPMOTOR_fourthStep+0xbe>
    2ecc:	9c 83       	std	Y+4, r25	; 0x04
    2ece:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ed0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed4:	01 97       	sbiw	r24, 0x01	; 1
    2ed6:	9e 83       	std	Y+6, r25	; 0x06
    2ed8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2eda:	8d 81       	ldd	r24, Y+5	; 0x05
    2edc:	9e 81       	ldd	r25, Y+6	; 0x06
    2ede:	00 97       	sbiw	r24, 0x00	; 0
    2ee0:	69 f7       	brne	.-38     	; 0x2ebc <STEPMOTOR_fourthStep+0xb2>
    2ee2:	14 c0       	rjmp	.+40     	; 0x2f0c <STEPMOTOR_fourthStep+0x102>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ee4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ee6:	78 85       	ldd	r23, Y+8	; 0x08
    2ee8:	89 85       	ldd	r24, Y+9	; 0x09
    2eea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ef0:	dc 01       	movw	r26, r24
    2ef2:	cb 01       	movw	r24, r22
    2ef4:	9e 83       	std	Y+6, r25	; 0x06
    2ef6:	8d 83       	std	Y+5, r24	; 0x05
    2ef8:	8d 81       	ldd	r24, Y+5	; 0x05
    2efa:	9e 81       	ldd	r25, Y+6	; 0x06
    2efc:	9a 83       	std	Y+2, r25	; 0x02
    2efe:	89 83       	std	Y+1, r24	; 0x01
    2f00:	89 81       	ldd	r24, Y+1	; 0x01
    2f02:	9a 81       	ldd	r25, Y+2	; 0x02
    2f04:	01 97       	sbiw	r24, 0x01	; 1
    2f06:	f1 f7       	brne	.-4      	; 0x2f04 <STEPMOTOR_fourthStep+0xfa>
    2f08:	9a 83       	std	Y+2, r25	; 0x02
    2f0a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_ErrorS_SetPinValue(STEPPER_MOTOR_PORT,STEPPER_MOTOR_PIN4,DIO_LOW);
    2f0c:	84 e0       	ldi	r24, 0x04	; 4
    2f0e:	63 e0       	ldi	r22, 0x03	; 3
    2f10:	40 e0       	ldi	r20, 0x00	; 0
    2f12:	0e 94 01 0b 	call	0x1602	; 0x1602 <MDIO_ErrorS_SetPinValue>
}
    2f16:	2e 96       	adiw	r28, 0x0e	; 14
    2f18:	0f b6       	in	r0, 0x3f	; 63
    2f1a:	f8 94       	cli
    2f1c:	de bf       	out	0x3e, r29	; 62
    2f1e:	0f be       	out	0x3f, r0	; 63
    2f20:	cd bf       	out	0x3d, r28	; 61
    2f22:	cf 91       	pop	r28
    2f24:	df 91       	pop	r29
    2f26:	08 95       	ret

00002f28 <__udivmodqi4>:
    2f28:	99 1b       	sub	r25, r25
    2f2a:	79 e0       	ldi	r23, 0x09	; 9
    2f2c:	04 c0       	rjmp	.+8      	; 0x2f36 <__udivmodqi4_ep>

00002f2e <__udivmodqi4_loop>:
    2f2e:	99 1f       	adc	r25, r25
    2f30:	96 17       	cp	r25, r22
    2f32:	08 f0       	brcs	.+2      	; 0x2f36 <__udivmodqi4_ep>
    2f34:	96 1b       	sub	r25, r22

00002f36 <__udivmodqi4_ep>:
    2f36:	88 1f       	adc	r24, r24
    2f38:	7a 95       	dec	r23
    2f3a:	c9 f7       	brne	.-14     	; 0x2f2e <__udivmodqi4_loop>
    2f3c:	80 95       	com	r24
    2f3e:	08 95       	ret

00002f40 <__prologue_saves__>:
    2f40:	2f 92       	push	r2
    2f42:	3f 92       	push	r3
    2f44:	4f 92       	push	r4
    2f46:	5f 92       	push	r5
    2f48:	6f 92       	push	r6
    2f4a:	7f 92       	push	r7
    2f4c:	8f 92       	push	r8
    2f4e:	9f 92       	push	r9
    2f50:	af 92       	push	r10
    2f52:	bf 92       	push	r11
    2f54:	cf 92       	push	r12
    2f56:	df 92       	push	r13
    2f58:	ef 92       	push	r14
    2f5a:	ff 92       	push	r15
    2f5c:	0f 93       	push	r16
    2f5e:	1f 93       	push	r17
    2f60:	cf 93       	push	r28
    2f62:	df 93       	push	r29
    2f64:	cd b7       	in	r28, 0x3d	; 61
    2f66:	de b7       	in	r29, 0x3e	; 62
    2f68:	ca 1b       	sub	r28, r26
    2f6a:	db 0b       	sbc	r29, r27
    2f6c:	0f b6       	in	r0, 0x3f	; 63
    2f6e:	f8 94       	cli
    2f70:	de bf       	out	0x3e, r29	; 62
    2f72:	0f be       	out	0x3f, r0	; 63
    2f74:	cd bf       	out	0x3d, r28	; 61
    2f76:	09 94       	ijmp

00002f78 <__epilogue_restores__>:
    2f78:	2a 88       	ldd	r2, Y+18	; 0x12
    2f7a:	39 88       	ldd	r3, Y+17	; 0x11
    2f7c:	48 88       	ldd	r4, Y+16	; 0x10
    2f7e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f80:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f82:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f84:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f86:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f88:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f8a:	b9 84       	ldd	r11, Y+9	; 0x09
    2f8c:	c8 84       	ldd	r12, Y+8	; 0x08
    2f8e:	df 80       	ldd	r13, Y+7	; 0x07
    2f90:	ee 80       	ldd	r14, Y+6	; 0x06
    2f92:	fd 80       	ldd	r15, Y+5	; 0x05
    2f94:	0c 81       	ldd	r16, Y+4	; 0x04
    2f96:	1b 81       	ldd	r17, Y+3	; 0x03
    2f98:	aa 81       	ldd	r26, Y+2	; 0x02
    2f9a:	b9 81       	ldd	r27, Y+1	; 0x01
    2f9c:	ce 0f       	add	r28, r30
    2f9e:	d1 1d       	adc	r29, r1
    2fa0:	0f b6       	in	r0, 0x3f	; 63
    2fa2:	f8 94       	cli
    2fa4:	de bf       	out	0x3e, r29	; 62
    2fa6:	0f be       	out	0x3f, r0	; 63
    2fa8:	cd bf       	out	0x3d, r28	; 61
    2faa:	ed 01       	movw	r28, r26
    2fac:	08 95       	ret

00002fae <_exit>:
    2fae:	f8 94       	cli

00002fb0 <__stop_program>:
    2fb0:	ff cf       	rjmp	.-2      	; 0x2fb0 <__stop_program>
