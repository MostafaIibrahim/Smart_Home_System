
Smart_House_Master_V.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004570  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001e0  00800060  00004570  00004604  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000b  00800240  00800240  000047e4  2**0
                  ALLOC
  3 .stab         00004758  00000000  00000000  000047e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000020a5  00000000  00000000  00008f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000afe1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000b181  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000b373  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000d77e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000eb04  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000fcdc  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000fe9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00010192  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00010b00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 7c 15 	jmp	0x2af8	; 0x2af8 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 7b 12 	jmp	0x24f6	; 0x24f6 <__vector_10>
      2c:	0c 94 48 12 	jmp	0x2490	; 0x2490 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e7       	ldi	r30, 0x70	; 112
      68:	f5 e4       	ldi	r31, 0x45	; 69
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 34       	cpi	r26, 0x40	; 64
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a0 e4       	ldi	r26, 0x40	; 64
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 34       	cpi	r26, 0x4B	; 75
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 07 	call	0xe2e	; 0xe2e <main>
      8a:	0c 94 b6 22 	jmp	0x456c	; 0x456c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3a 22 	jmp	0x4474	; 0x4474 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa e0       	ldi	r26, 0x0A	; 10
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 56 22 	jmp	0x44ac	; 0x44ac <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 46 22 	jmp	0x448c	; 0x448c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 62 22 	jmp	0x44c4	; 0x44c4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 46 22 	jmp	0x448c	; 0x448c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 62 22 	jmp	0x44c4	; 0x44c4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3a 22 	jmp	0x4474	; 0x4474 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a e0       	ldi	r24, 0x0A	; 10
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 56 22 	jmp	0x44ac	; 0x44ac <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 42 22 	jmp	0x4484	; 0x4484 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a e0       	ldi	r22, 0x0A	; 10
     69c:	71 e0       	ldi	r23, 0x01	; 1
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 5e 22 	jmp	0x44bc	; 0x44bc <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 46 22 	jmp	0x448c	; 0x448c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 62 22 	jmp	0x44c4	; 0x44c4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 46 22 	jmp	0x448c	; 0x448c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 62 22 	jmp	0x44c4	; 0x44c4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 46 22 	jmp	0x448c	; 0x448c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 62 22 	jmp	0x44c4	; 0x44c4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 4a 22 	jmp	0x4494	; 0x4494 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 66 22 	jmp	0x44cc	; 0x44cc <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 42 22 	jmp	0x4484	; 0x4484 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 5e 22 	jmp	0x44bc	; 0x44bc <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ee 5e       	subi	r30, 0xEE	; 238
     aca:	fe 4f       	sbci	r31, 0xFE	; 254
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <main>:
void ISR_TIMER(void);
//void ISR_UART(void);
/* *****************************************************************************************
 *                                   Main Function                                         *
 *******************************************************************************************/
int main(){
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
     e36:	eb 97       	sbiw	r28, 0x3b	; 59
     e38:	0f b6       	in	r0, 0x3f	; 63
     e3a:	f8 94       	cli
     e3c:	de bf       	out	0x3e, r29	; 62
     e3e:	0f be       	out	0x3f, r0	; 63
     e40:	cd bf       	out	0x3d, r28	; 61
	u8 key = NO_KEY;
     e42:	8f ef       	ldi	r24, 0xFF	; 255
     e44:	89 af       	std	Y+57, r24	; 0x39

	initFuncs();
     e46:	0e 94 81 09 	call	0x1302	; 0x1302 <initFuncs>

	welcome_message();
     e4a:	0e 94 1a 0a 	call	0x1434	; 0x1434 <welcome_message>
	//	EEPROM_voidWrite(CHECK_REG_ADD,0xFF);
	//	_delay_ms(15);

	EEPROM_voidRead(CHECK_REG_ADD,&g_registerionFlag);
     e4e:	24 e4       	ldi	r18, 0x44	; 68
     e50:	32 e0       	ldi	r19, 0x02	; 2
     e52:	85 e1       	ldi	r24, 0x15	; 21
     e54:	b9 01       	movw	r22, r18
     e56:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <EEPROM_voidRead>

	while(1){
		if(g_registerionFlag){
     e5a:	80 91 44 02 	lds	r24, 0x0244
     e5e:	88 23       	and	r24, r24
     e60:	49 f0       	breq	.+18     	; 0xe74 <main+0x46>
			addnNew_User();
     e62:	0e 94 1f 0b 	call	0x163e	; 0x163e <addnNew_User>
			/*
			 * CHANGE FLAGE STATE & WRITE ON EEPROM
			 **/
			g_registerionFlag  = DONE_REG;
     e66:	10 92 44 02 	sts	0x0244, r1
			EEPROM_voidWrite(CHECK_REG_ADD,DONE_REG);
     e6a:	85 e1       	ldi	r24, 0x15	; 21
     e6c:	60 e0       	ldi	r22, 0x00	; 0
     e6e:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <EEPROM_voidWrite>
     e72:	f3 cf       	rjmp	.-26     	; 0xe5a <main+0x2c>
		}
		else{
			HLCD_clearScrean();
     e74:	0e 94 ad 1b 	call	0x375a	; 0x375a <HLCD_clearScrean>
			HLCD_displayString("1-Change pass");
     e78:	80 e6       	ldi	r24, 0x60	; 96
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <HLCD_displayString>
			HLCD_moveCursor(1,0);
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	60 e0       	ldi	r22, 0x00	; 0
     e84:	0e 94 0f 1b 	call	0x361e	; 0x361e <HLCD_moveCursor>
			HLCD_displayString("2-Add User  3-..");
     e88:	8e e6       	ldi	r24, 0x6E	; 110
     e8a:	90 e0       	ldi	r25, 0x00	; 0
     e8c:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <HLCD_displayString>

			do{
				key = H_KeyPad_u8GetKey();
     e90:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <H_KeyPad_u8GetKey>
     e94:	89 af       	std	Y+57, r24	; 0x39
			}while(key == NO_KEY);
     e96:	89 ad       	ldd	r24, Y+57	; 0x39
     e98:	8f 3f       	cpi	r24, 0xFF	; 255
     e9a:	d1 f3       	breq	.-12     	; 0xe90 <main+0x62>

			if(key == 3){
     e9c:	89 ad       	ldd	r24, Y+57	; 0x39
     e9e:	83 30       	cpi	r24, 0x03	; 3
     ea0:	a1 f4       	brne	.+40     	; 0xeca <main+0x9c>
				HLCD_clearScrean();
     ea2:	0e 94 ad 1b 	call	0x375a	; 0x375a <HLCD_clearScrean>
				HLCD_displayString("4-Open System");
     ea6:	8f e7       	ldi	r24, 0x7F	; 127
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <HLCD_displayString>
				HLCD_moveCursor(1,0);
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	0e 94 0f 1b 	call	0x361e	; 0x361e <HLCD_moveCursor>
				HLCD_displayString("5-Previous");
     eb6:	8d e8       	ldi	r24, 0x8D	; 141
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <HLCD_displayString>
				do{
					key = H_KeyPad_u8GetKey();
     ebe:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <H_KeyPad_u8GetKey>
     ec2:	89 af       	std	Y+57, r24	; 0x39
				}while(key == NO_KEY);
     ec4:	89 ad       	ldd	r24, Y+57	; 0x39
     ec6:	8f 3f       	cpi	r24, 0xFF	; 255
     ec8:	d1 f3       	breq	.-12     	; 0xebe <main+0x90>
			}

			switch (key){
     eca:	89 ad       	ldd	r24, Y+57	; 0x39
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	3b af       	std	Y+59, r19	; 0x3b
     ed2:	2a af       	std	Y+58, r18	; 0x3a
     ed4:	8a ad       	ldd	r24, Y+58	; 0x3a
     ed6:	9b ad       	ldd	r25, Y+59	; 0x3b
     ed8:	82 30       	cpi	r24, 0x02	; 2
     eda:	91 05       	cpc	r25, r1
     edc:	09 f4       	brne	.+2      	; 0xee0 <main+0xb2>
     ede:	98 c0       	rjmp	.+304    	; 0x1010 <main+0x1e2>
     ee0:	2a ad       	ldd	r18, Y+58	; 0x3a
     ee2:	3b ad       	ldd	r19, Y+59	; 0x3b
     ee4:	23 30       	cpi	r18, 0x03	; 3
     ee6:	31 05       	cpc	r19, r1
     ee8:	34 f4       	brge	.+12     	; 0xef6 <main+0xc8>
     eea:	8a ad       	ldd	r24, Y+58	; 0x3a
     eec:	9b ad       	ldd	r25, Y+59	; 0x3b
     eee:	81 30       	cpi	r24, 0x01	; 1
     ef0:	91 05       	cpc	r25, r1
     ef2:	71 f0       	breq	.+28     	; 0xf10 <main+0xe2>
     ef4:	8d c1       	rjmp	.+794    	; 0x1210 <main+0x3e2>
     ef6:	2a ad       	ldd	r18, Y+58	; 0x3a
     ef8:	3b ad       	ldd	r19, Y+59	; 0x3b
     efa:	24 30       	cpi	r18, 0x04	; 4
     efc:	31 05       	cpc	r19, r1
     efe:	09 f4       	brne	.+2      	; 0xf02 <main+0xd4>
     f00:	07 c1       	rjmp	.+526    	; 0x1110 <main+0x2e2>
     f02:	8a ad       	ldd	r24, Y+58	; 0x3a
     f04:	9b ad       	ldd	r25, Y+59	; 0x3b
     f06:	85 30       	cpi	r24, 0x05	; 5
     f08:	91 05       	cpc	r25, r1
     f0a:	09 f4       	brne	.+2      	; 0xf0e <main+0xe0>
     f0c:	a6 cf       	rjmp	.-180    	; 0xe5a <main+0x2c>
     f0e:	80 c1       	rjmp	.+768    	; 0x1210 <main+0x3e2>
			case 1:
				//Change Password
				if( Enter_Password() ){
     f10:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <Enter_Password>
     f14:	88 23       	and	r24, r24
     f16:	19 f0       	breq	.+6      	; 0xf1e <main+0xf0>
					Change_pass();
     f18:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <Change_pass>
     f1c:	9e cf       	rjmp	.-196    	; 0xe5a <main+0x2c>
				}
				else{
					HLCD_clearScrean();
     f1e:	0e 94 ad 1b 	call	0x375a	; 0x375a <HLCD_clearScrean>
					HLCD_displayString("You are Blocked");
     f22:	88 e9       	ldi	r24, 0x98	; 152
     f24:	90 e0       	ldi	r25, 0x00	; 0
     f26:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <HLCD_displayString>
     f2a:	80 e0       	ldi	r24, 0x00	; 0
     f2c:	90 e0       	ldi	r25, 0x00	; 0
     f2e:	aa e7       	ldi	r26, 0x7A	; 122
     f30:	b4 e4       	ldi	r27, 0x44	; 68
     f32:	8d ab       	std	Y+53, r24	; 0x35
     f34:	9e ab       	std	Y+54, r25	; 0x36
     f36:	af ab       	std	Y+55, r26	; 0x37
     f38:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f3a:	6d a9       	ldd	r22, Y+53	; 0x35
     f3c:	7e a9       	ldd	r23, Y+54	; 0x36
     f3e:	8f a9       	ldd	r24, Y+55	; 0x37
     f40:	98 ad       	ldd	r25, Y+56	; 0x38
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	30 e0       	ldi	r19, 0x00	; 0
     f46:	4a ef       	ldi	r20, 0xFA	; 250
     f48:	54 e4       	ldi	r21, 0x44	; 68
     f4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f4e:	dc 01       	movw	r26, r24
     f50:	cb 01       	movw	r24, r22
     f52:	89 ab       	std	Y+49, r24	; 0x31
     f54:	9a ab       	std	Y+50, r25	; 0x32
     f56:	ab ab       	std	Y+51, r26	; 0x33
     f58:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f5a:	69 a9       	ldd	r22, Y+49	; 0x31
     f5c:	7a a9       	ldd	r23, Y+50	; 0x32
     f5e:	8b a9       	ldd	r24, Y+51	; 0x33
     f60:	9c a9       	ldd	r25, Y+52	; 0x34
     f62:	20 e0       	ldi	r18, 0x00	; 0
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	40 e8       	ldi	r20, 0x80	; 128
     f68:	5f e3       	ldi	r21, 0x3F	; 63
     f6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
     f6e:	88 23       	and	r24, r24
     f70:	2c f4       	brge	.+10     	; 0xf7c <main+0x14e>
		__ticks = 1;
     f72:	81 e0       	ldi	r24, 0x01	; 1
     f74:	90 e0       	ldi	r25, 0x00	; 0
     f76:	98 ab       	std	Y+48, r25	; 0x30
     f78:	8f a7       	std	Y+47, r24	; 0x2f
     f7a:	3f c0       	rjmp	.+126    	; 0xffa <main+0x1cc>
	else if (__tmp > 65535)
     f7c:	69 a9       	ldd	r22, Y+49	; 0x31
     f7e:	7a a9       	ldd	r23, Y+50	; 0x32
     f80:	8b a9       	ldd	r24, Y+51	; 0x33
     f82:	9c a9       	ldd	r25, Y+52	; 0x34
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	3f ef       	ldi	r19, 0xFF	; 255
     f88:	4f e7       	ldi	r20, 0x7F	; 127
     f8a:	57 e4       	ldi	r21, 0x47	; 71
     f8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
     f90:	18 16       	cp	r1, r24
     f92:	4c f5       	brge	.+82     	; 0xfe6 <main+0x1b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f94:	6d a9       	ldd	r22, Y+53	; 0x35
     f96:	7e a9       	ldd	r23, Y+54	; 0x36
     f98:	8f a9       	ldd	r24, Y+55	; 0x37
     f9a:	98 ad       	ldd	r25, Y+56	; 0x38
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	30 e0       	ldi	r19, 0x00	; 0
     fa0:	40 e2       	ldi	r20, 0x20	; 32
     fa2:	51 e4       	ldi	r21, 0x41	; 65
     fa4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa8:	dc 01       	movw	r26, r24
     faa:	cb 01       	movw	r24, r22
     fac:	bc 01       	movw	r22, r24
     fae:	cd 01       	movw	r24, r26
     fb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb4:	dc 01       	movw	r26, r24
     fb6:	cb 01       	movw	r24, r22
     fb8:	98 ab       	std	Y+48, r25	; 0x30
     fba:	8f a7       	std	Y+47, r24	; 0x2f
     fbc:	0f c0       	rjmp	.+30     	; 0xfdc <main+0x1ae>
     fbe:	88 ec       	ldi	r24, 0xC8	; 200
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	9e a7       	std	Y+46, r25	; 0x2e
     fc4:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     fc6:	8d a5       	ldd	r24, Y+45	; 0x2d
     fc8:	9e a5       	ldd	r25, Y+46	; 0x2e
     fca:	01 97       	sbiw	r24, 0x01	; 1
     fcc:	f1 f7       	brne	.-4      	; 0xfca <main+0x19c>
     fce:	9e a7       	std	Y+46, r25	; 0x2e
     fd0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd2:	8f a5       	ldd	r24, Y+47	; 0x2f
     fd4:	98 a9       	ldd	r25, Y+48	; 0x30
     fd6:	01 97       	sbiw	r24, 0x01	; 1
     fd8:	98 ab       	std	Y+48, r25	; 0x30
     fda:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fdc:	8f a5       	ldd	r24, Y+47	; 0x2f
     fde:	98 a9       	ldd	r25, Y+48	; 0x30
     fe0:	00 97       	sbiw	r24, 0x00	; 0
     fe2:	69 f7       	brne	.-38     	; 0xfbe <main+0x190>
     fe4:	3a cf       	rjmp	.-396    	; 0xe5a <main+0x2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fe6:	69 a9       	ldd	r22, Y+49	; 0x31
     fe8:	7a a9       	ldd	r23, Y+50	; 0x32
     fea:	8b a9       	ldd	r24, Y+51	; 0x33
     fec:	9c a9       	ldd	r25, Y+52	; 0x34
     fee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff2:	dc 01       	movw	r26, r24
     ff4:	cb 01       	movw	r24, r22
     ff6:	98 ab       	std	Y+48, r25	; 0x30
     ff8:	8f a7       	std	Y+47, r24	; 0x2f
     ffa:	8f a5       	ldd	r24, Y+47	; 0x2f
     ffc:	98 a9       	ldd	r25, Y+48	; 0x30
     ffe:	9c a7       	std	Y+44, r25	; 0x2c
    1000:	8b a7       	std	Y+43, r24	; 0x2b
    1002:	8b a5       	ldd	r24, Y+43	; 0x2b
    1004:	9c a5       	ldd	r25, Y+44	; 0x2c
    1006:	01 97       	sbiw	r24, 0x01	; 1
    1008:	f1 f7       	brne	.-4      	; 0x1006 <main+0x1d8>
    100a:	9c a7       	std	Y+44, r25	; 0x2c
    100c:	8b a7       	std	Y+43, r24	; 0x2b
    100e:	25 cf       	rjmp	.-438    	; 0xe5a <main+0x2c>
				}
				break;

			case 2 :
				//Add user
				if( Enter_Password() ){
    1010:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <Enter_Password>
    1014:	88 23       	and	r24, r24
    1016:	19 f0       	breq	.+6      	; 0x101e <main+0x1f0>
					addnNew_User();
    1018:	0e 94 1f 0b 	call	0x163e	; 0x163e <addnNew_User>
    101c:	1e cf       	rjmp	.-452    	; 0xe5a <main+0x2c>
				}
				else{
					HLCD_clearScrean();
    101e:	0e 94 ad 1b 	call	0x375a	; 0x375a <HLCD_clearScrean>
					HLCD_displayString("You are Blocked");
    1022:	88 e9       	ldi	r24, 0x98	; 152
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <HLCD_displayString>
    102a:	80 e0       	ldi	r24, 0x00	; 0
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	aa e7       	ldi	r26, 0x7A	; 122
    1030:	b4 e4       	ldi	r27, 0x44	; 68
    1032:	8f a3       	std	Y+39, r24	; 0x27
    1034:	98 a7       	std	Y+40, r25	; 0x28
    1036:	a9 a7       	std	Y+41, r26	; 0x29
    1038:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    103a:	6f a1       	ldd	r22, Y+39	; 0x27
    103c:	78 a5       	ldd	r23, Y+40	; 0x28
    103e:	89 a5       	ldd	r24, Y+41	; 0x29
    1040:	9a a5       	ldd	r25, Y+42	; 0x2a
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	4a ef       	ldi	r20, 0xFA	; 250
    1048:	54 e4       	ldi	r21, 0x44	; 68
    104a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    104e:	dc 01       	movw	r26, r24
    1050:	cb 01       	movw	r24, r22
    1052:	8b a3       	std	Y+35, r24	; 0x23
    1054:	9c a3       	std	Y+36, r25	; 0x24
    1056:	ad a3       	std	Y+37, r26	; 0x25
    1058:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    105a:	6b a1       	ldd	r22, Y+35	; 0x23
    105c:	7c a1       	ldd	r23, Y+36	; 0x24
    105e:	8d a1       	ldd	r24, Y+37	; 0x25
    1060:	9e a1       	ldd	r25, Y+38	; 0x26
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	40 e8       	ldi	r20, 0x80	; 128
    1068:	5f e3       	ldi	r21, 0x3F	; 63
    106a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    106e:	88 23       	and	r24, r24
    1070:	2c f4       	brge	.+10     	; 0x107c <main+0x24e>
		__ticks = 1;
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	9a a3       	std	Y+34, r25	; 0x22
    1078:	89 a3       	std	Y+33, r24	; 0x21
    107a:	3f c0       	rjmp	.+126    	; 0x10fa <main+0x2cc>
	else if (__tmp > 65535)
    107c:	6b a1       	ldd	r22, Y+35	; 0x23
    107e:	7c a1       	ldd	r23, Y+36	; 0x24
    1080:	8d a1       	ldd	r24, Y+37	; 0x25
    1082:	9e a1       	ldd	r25, Y+38	; 0x26
    1084:	20 e0       	ldi	r18, 0x00	; 0
    1086:	3f ef       	ldi	r19, 0xFF	; 255
    1088:	4f e7       	ldi	r20, 0x7F	; 127
    108a:	57 e4       	ldi	r21, 0x47	; 71
    108c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1090:	18 16       	cp	r1, r24
    1092:	4c f5       	brge	.+82     	; 0x10e6 <main+0x2b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1094:	6f a1       	ldd	r22, Y+39	; 0x27
    1096:	78 a5       	ldd	r23, Y+40	; 0x28
    1098:	89 a5       	ldd	r24, Y+41	; 0x29
    109a:	9a a5       	ldd	r25, Y+42	; 0x2a
    109c:	20 e0       	ldi	r18, 0x00	; 0
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	40 e2       	ldi	r20, 0x20	; 32
    10a2:	51 e4       	ldi	r21, 0x41	; 65
    10a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10a8:	dc 01       	movw	r26, r24
    10aa:	cb 01       	movw	r24, r22
    10ac:	bc 01       	movw	r22, r24
    10ae:	cd 01       	movw	r24, r26
    10b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b4:	dc 01       	movw	r26, r24
    10b6:	cb 01       	movw	r24, r22
    10b8:	9a a3       	std	Y+34, r25	; 0x22
    10ba:	89 a3       	std	Y+33, r24	; 0x21
    10bc:	0f c0       	rjmp	.+30     	; 0x10dc <main+0x2ae>
    10be:	88 ec       	ldi	r24, 0xC8	; 200
    10c0:	90 e0       	ldi	r25, 0x00	; 0
    10c2:	98 a3       	std	Y+32, r25	; 0x20
    10c4:	8f 8f       	std	Y+31, r24	; 0x1f
    10c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10c8:	98 a1       	ldd	r25, Y+32	; 0x20
    10ca:	01 97       	sbiw	r24, 0x01	; 1
    10cc:	f1 f7       	brne	.-4      	; 0x10ca <main+0x29c>
    10ce:	98 a3       	std	Y+32, r25	; 0x20
    10d0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d2:	89 a1       	ldd	r24, Y+33	; 0x21
    10d4:	9a a1       	ldd	r25, Y+34	; 0x22
    10d6:	01 97       	sbiw	r24, 0x01	; 1
    10d8:	9a a3       	std	Y+34, r25	; 0x22
    10da:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10dc:	89 a1       	ldd	r24, Y+33	; 0x21
    10de:	9a a1       	ldd	r25, Y+34	; 0x22
    10e0:	00 97       	sbiw	r24, 0x00	; 0
    10e2:	69 f7       	brne	.-38     	; 0x10be <main+0x290>
    10e4:	ba ce       	rjmp	.-652    	; 0xe5a <main+0x2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10e6:	6b a1       	ldd	r22, Y+35	; 0x23
    10e8:	7c a1       	ldd	r23, Y+36	; 0x24
    10ea:	8d a1       	ldd	r24, Y+37	; 0x25
    10ec:	9e a1       	ldd	r25, Y+38	; 0x26
    10ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f2:	dc 01       	movw	r26, r24
    10f4:	cb 01       	movw	r24, r22
    10f6:	9a a3       	std	Y+34, r25	; 0x22
    10f8:	89 a3       	std	Y+33, r24	; 0x21
    10fa:	89 a1       	ldd	r24, Y+33	; 0x21
    10fc:	9a a1       	ldd	r25, Y+34	; 0x22
    10fe:	9e 8f       	std	Y+30, r25	; 0x1e
    1100:	8d 8f       	std	Y+29, r24	; 0x1d
    1102:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1104:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1106:	01 97       	sbiw	r24, 0x01	; 1
    1108:	f1 f7       	brne	.-4      	; 0x1106 <main+0x2d8>
    110a:	9e 8f       	std	Y+30, r25	; 0x1e
    110c:	8d 8f       	std	Y+29, r24	; 0x1d
    110e:	a5 ce       	rjmp	.-694    	; 0xe5a <main+0x2c>
					_delay_ms(1000);
				}

				break;
			case 4 :
				if(Enter_Password()){
    1110:	0e 94 0e 0d 	call	0x1a1c	; 0x1a1c <Enter_Password>
    1114:	88 23       	and	r24, r24
    1116:	19 f0       	breq	.+6      	; 0x111e <main+0x2f0>
					Open_System();
    1118:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <Open_System>
    111c:	9e ce       	rjmp	.-708    	; 0xe5a <main+0x2c>
				}
				else{
					HLCD_clearScrean();
    111e:	0e 94 ad 1b 	call	0x375a	; 0x375a <HLCD_clearScrean>
					HLCD_displayString("You are Blocked");
    1122:	88 e9       	ldi	r24, 0x98	; 152
    1124:	90 e0       	ldi	r25, 0x00	; 0
    1126:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <HLCD_displayString>
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	90 e0       	ldi	r25, 0x00	; 0
    112e:	aa e7       	ldi	r26, 0x7A	; 122
    1130:	b4 e4       	ldi	r27, 0x44	; 68
    1132:	89 8f       	std	Y+25, r24	; 0x19
    1134:	9a 8f       	std	Y+26, r25	; 0x1a
    1136:	ab 8f       	std	Y+27, r26	; 0x1b
    1138:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    113a:	69 8d       	ldd	r22, Y+25	; 0x19
    113c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    113e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1140:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1142:	20 e0       	ldi	r18, 0x00	; 0
    1144:	30 e0       	ldi	r19, 0x00	; 0
    1146:	4a ef       	ldi	r20, 0xFA	; 250
    1148:	54 e4       	ldi	r21, 0x44	; 68
    114a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    114e:	dc 01       	movw	r26, r24
    1150:	cb 01       	movw	r24, r22
    1152:	8d 8b       	std	Y+21, r24	; 0x15
    1154:	9e 8b       	std	Y+22, r25	; 0x16
    1156:	af 8b       	std	Y+23, r26	; 0x17
    1158:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    115a:	6d 89       	ldd	r22, Y+21	; 0x15
    115c:	7e 89       	ldd	r23, Y+22	; 0x16
    115e:	8f 89       	ldd	r24, Y+23	; 0x17
    1160:	98 8d       	ldd	r25, Y+24	; 0x18
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	40 e8       	ldi	r20, 0x80	; 128
    1168:	5f e3       	ldi	r21, 0x3F	; 63
    116a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    116e:	88 23       	and	r24, r24
    1170:	2c f4       	brge	.+10     	; 0x117c <main+0x34e>
		__ticks = 1;
    1172:	81 e0       	ldi	r24, 0x01	; 1
    1174:	90 e0       	ldi	r25, 0x00	; 0
    1176:	9c 8b       	std	Y+20, r25	; 0x14
    1178:	8b 8b       	std	Y+19, r24	; 0x13
    117a:	3f c0       	rjmp	.+126    	; 0x11fa <main+0x3cc>
	else if (__tmp > 65535)
    117c:	6d 89       	ldd	r22, Y+21	; 0x15
    117e:	7e 89       	ldd	r23, Y+22	; 0x16
    1180:	8f 89       	ldd	r24, Y+23	; 0x17
    1182:	98 8d       	ldd	r25, Y+24	; 0x18
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	3f ef       	ldi	r19, 0xFF	; 255
    1188:	4f e7       	ldi	r20, 0x7F	; 127
    118a:	57 e4       	ldi	r21, 0x47	; 71
    118c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1190:	18 16       	cp	r1, r24
    1192:	4c f5       	brge	.+82     	; 0x11e6 <main+0x3b8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1194:	69 8d       	ldd	r22, Y+25	; 0x19
    1196:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1198:	8b 8d       	ldd	r24, Y+27	; 0x1b
    119a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	40 e2       	ldi	r20, 0x20	; 32
    11a2:	51 e4       	ldi	r21, 0x41	; 65
    11a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	bc 01       	movw	r22, r24
    11ae:	cd 01       	movw	r24, r26
    11b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	9c 8b       	std	Y+20, r25	; 0x14
    11ba:	8b 8b       	std	Y+19, r24	; 0x13
    11bc:	0f c0       	rjmp	.+30     	; 0x11dc <main+0x3ae>
    11be:	88 ec       	ldi	r24, 0xC8	; 200
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	9a 8b       	std	Y+18, r25	; 0x12
    11c4:	89 8b       	std	Y+17, r24	; 0x11
    11c6:	89 89       	ldd	r24, Y+17	; 0x11
    11c8:	9a 89       	ldd	r25, Y+18	; 0x12
    11ca:	01 97       	sbiw	r24, 0x01	; 1
    11cc:	f1 f7       	brne	.-4      	; 0x11ca <main+0x39c>
    11ce:	9a 8b       	std	Y+18, r25	; 0x12
    11d0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11d2:	8b 89       	ldd	r24, Y+19	; 0x13
    11d4:	9c 89       	ldd	r25, Y+20	; 0x14
    11d6:	01 97       	sbiw	r24, 0x01	; 1
    11d8:	9c 8b       	std	Y+20, r25	; 0x14
    11da:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11dc:	8b 89       	ldd	r24, Y+19	; 0x13
    11de:	9c 89       	ldd	r25, Y+20	; 0x14
    11e0:	00 97       	sbiw	r24, 0x00	; 0
    11e2:	69 f7       	brne	.-38     	; 0x11be <main+0x390>
    11e4:	3a ce       	rjmp	.-908    	; 0xe5a <main+0x2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11e6:	6d 89       	ldd	r22, Y+21	; 0x15
    11e8:	7e 89       	ldd	r23, Y+22	; 0x16
    11ea:	8f 89       	ldd	r24, Y+23	; 0x17
    11ec:	98 8d       	ldd	r25, Y+24	; 0x18
    11ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f2:	dc 01       	movw	r26, r24
    11f4:	cb 01       	movw	r24, r22
    11f6:	9c 8b       	std	Y+20, r25	; 0x14
    11f8:	8b 8b       	std	Y+19, r24	; 0x13
    11fa:	8b 89       	ldd	r24, Y+19	; 0x13
    11fc:	9c 89       	ldd	r25, Y+20	; 0x14
    11fe:	98 8b       	std	Y+16, r25	; 0x10
    1200:	8f 87       	std	Y+15, r24	; 0x0f
    1202:	8f 85       	ldd	r24, Y+15	; 0x0f
    1204:	98 89       	ldd	r25, Y+16	; 0x10
    1206:	01 97       	sbiw	r24, 0x01	; 1
    1208:	f1 f7       	brne	.-4      	; 0x1206 <main+0x3d8>
    120a:	98 8b       	std	Y+16, r25	; 0x10
    120c:	8f 87       	std	Y+15, r24	; 0x0f
    120e:	25 ce       	rjmp	.-950    	; 0xe5a <main+0x2c>
			case 5 :
				//prev menue

				break;
			default:
				HLCD_clearScrean();
    1210:	0e 94 ad 1b 	call	0x375a	; 0x375a <HLCD_clearScrean>
				HLCD_displayString("Wrong Input");
    1214:	88 ea       	ldi	r24, 0xA8	; 168
    1216:	90 e0       	ldi	r25, 0x00	; 0
    1218:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <HLCD_displayString>
    121c:	80 e0       	ldi	r24, 0x00	; 0
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	a6 e9       	ldi	r26, 0x96	; 150
    1222:	b3 e4       	ldi	r27, 0x43	; 67
    1224:	8b 87       	std	Y+11, r24	; 0x0b
    1226:	9c 87       	std	Y+12, r25	; 0x0c
    1228:	ad 87       	std	Y+13, r26	; 0x0d
    122a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    122c:	6b 85       	ldd	r22, Y+11	; 0x0b
    122e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1230:	8d 85       	ldd	r24, Y+13	; 0x0d
    1232:	9e 85       	ldd	r25, Y+14	; 0x0e
    1234:	20 e0       	ldi	r18, 0x00	; 0
    1236:	30 e0       	ldi	r19, 0x00	; 0
    1238:	4a ef       	ldi	r20, 0xFA	; 250
    123a:	54 e4       	ldi	r21, 0x44	; 68
    123c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1240:	dc 01       	movw	r26, r24
    1242:	cb 01       	movw	r24, r22
    1244:	8f 83       	std	Y+7, r24	; 0x07
    1246:	98 87       	std	Y+8, r25	; 0x08
    1248:	a9 87       	std	Y+9, r26	; 0x09
    124a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    124c:	6f 81       	ldd	r22, Y+7	; 0x07
    124e:	78 85       	ldd	r23, Y+8	; 0x08
    1250:	89 85       	ldd	r24, Y+9	; 0x09
    1252:	9a 85       	ldd	r25, Y+10	; 0x0a
    1254:	20 e0       	ldi	r18, 0x00	; 0
    1256:	30 e0       	ldi	r19, 0x00	; 0
    1258:	40 e8       	ldi	r20, 0x80	; 128
    125a:	5f e3       	ldi	r21, 0x3F	; 63
    125c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1260:	88 23       	and	r24, r24
    1262:	2c f4       	brge	.+10     	; 0x126e <main+0x440>
		__ticks = 1;
    1264:	81 e0       	ldi	r24, 0x01	; 1
    1266:	90 e0       	ldi	r25, 0x00	; 0
    1268:	9e 83       	std	Y+6, r25	; 0x06
    126a:	8d 83       	std	Y+5, r24	; 0x05
    126c:	3f c0       	rjmp	.+126    	; 0x12ec <main+0x4be>
	else if (__tmp > 65535)
    126e:	6f 81       	ldd	r22, Y+7	; 0x07
    1270:	78 85       	ldd	r23, Y+8	; 0x08
    1272:	89 85       	ldd	r24, Y+9	; 0x09
    1274:	9a 85       	ldd	r25, Y+10	; 0x0a
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	3f ef       	ldi	r19, 0xFF	; 255
    127a:	4f e7       	ldi	r20, 0x7F	; 127
    127c:	57 e4       	ldi	r21, 0x47	; 71
    127e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1282:	18 16       	cp	r1, r24
    1284:	4c f5       	brge	.+82     	; 0x12d8 <main+0x4aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1286:	6b 85       	ldd	r22, Y+11	; 0x0b
    1288:	7c 85       	ldd	r23, Y+12	; 0x0c
    128a:	8d 85       	ldd	r24, Y+13	; 0x0d
    128c:	9e 85       	ldd	r25, Y+14	; 0x0e
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 e2       	ldi	r20, 0x20	; 32
    1294:	51 e4       	ldi	r21, 0x41	; 65
    1296:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    129a:	dc 01       	movw	r26, r24
    129c:	cb 01       	movw	r24, r22
    129e:	bc 01       	movw	r22, r24
    12a0:	cd 01       	movw	r24, r26
    12a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12a6:	dc 01       	movw	r26, r24
    12a8:	cb 01       	movw	r24, r22
    12aa:	9e 83       	std	Y+6, r25	; 0x06
    12ac:	8d 83       	std	Y+5, r24	; 0x05
    12ae:	0f c0       	rjmp	.+30     	; 0x12ce <main+0x4a0>
    12b0:	88 ec       	ldi	r24, 0xC8	; 200
    12b2:	90 e0       	ldi	r25, 0x00	; 0
    12b4:	9c 83       	std	Y+4, r25	; 0x04
    12b6:	8b 83       	std	Y+3, r24	; 0x03
    12b8:	8b 81       	ldd	r24, Y+3	; 0x03
    12ba:	9c 81       	ldd	r25, Y+4	; 0x04
    12bc:	01 97       	sbiw	r24, 0x01	; 1
    12be:	f1 f7       	brne	.-4      	; 0x12bc <main+0x48e>
    12c0:	9c 83       	std	Y+4, r25	; 0x04
    12c2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12c4:	8d 81       	ldd	r24, Y+5	; 0x05
    12c6:	9e 81       	ldd	r25, Y+6	; 0x06
    12c8:	01 97       	sbiw	r24, 0x01	; 1
    12ca:	9e 83       	std	Y+6, r25	; 0x06
    12cc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12ce:	8d 81       	ldd	r24, Y+5	; 0x05
    12d0:	9e 81       	ldd	r25, Y+6	; 0x06
    12d2:	00 97       	sbiw	r24, 0x00	; 0
    12d4:	69 f7       	brne	.-38     	; 0x12b0 <main+0x482>
    12d6:	c1 cd       	rjmp	.-1150   	; 0xe5a <main+0x2c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12d8:	6f 81       	ldd	r22, Y+7	; 0x07
    12da:	78 85       	ldd	r23, Y+8	; 0x08
    12dc:	89 85       	ldd	r24, Y+9	; 0x09
    12de:	9a 85       	ldd	r25, Y+10	; 0x0a
    12e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12e4:	dc 01       	movw	r26, r24
    12e6:	cb 01       	movw	r24, r22
    12e8:	9e 83       	std	Y+6, r25	; 0x06
    12ea:	8d 83       	std	Y+5, r24	; 0x05
    12ec:	8d 81       	ldd	r24, Y+5	; 0x05
    12ee:	9e 81       	ldd	r25, Y+6	; 0x06
    12f0:	9a 83       	std	Y+2, r25	; 0x02
    12f2:	89 83       	std	Y+1, r24	; 0x01
    12f4:	89 81       	ldd	r24, Y+1	; 0x01
    12f6:	9a 81       	ldd	r25, Y+2	; 0x02
    12f8:	01 97       	sbiw	r24, 0x01	; 1
    12fa:	f1 f7       	brne	.-4      	; 0x12f8 <main+0x4ca>
    12fc:	9a 83       	std	Y+2, r25	; 0x02
    12fe:	89 83       	std	Y+1, r24	; 0x01
    1300:	ac cd       	rjmp	.-1192   	; 0xe5a <main+0x2c>

00001302 <initFuncs>:
	}
}
/* *****************************************************************************************
 *                                    Funcs Definition                                     *
 *******************************************************************************************/
void initFuncs(void){
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	cd b7       	in	r28, 0x3d	; 61
    1308:	de b7       	in	r29, 0x3e	; 62
    130a:	a2 97       	sbiw	r28, 0x22	; 34
    130c:	0f b6       	in	r0, 0x3f	; 63
    130e:	f8 94       	cli
    1310:	de bf       	out	0x3e, r29	; 62
    1312:	0f be       	out	0x3f, r0	; 63
    1314:	cd bf       	out	0x3d, r28	; 61
	/* Declare pins configs */
	SPI_ConfigType  config_spi   = {RISING,LEADING_EDGE,F_CPU_64A};
    1316:	ce 01       	movw	r24, r28
    1318:	01 96       	adiw	r24, 0x01	; 1
    131a:	9d 8b       	std	Y+21, r25	; 0x15
    131c:	8c 8b       	std	Y+20, r24	; 0x14
    131e:	ac e2       	ldi	r26, 0x2C	; 44
    1320:	b2 e0       	ldi	r27, 0x02	; 2
    1322:	bf 8b       	std	Y+23, r27	; 0x17
    1324:	ae 8b       	std	Y+22, r26	; 0x16
    1326:	b3 e0       	ldi	r27, 0x03	; 3
    1328:	b8 8f       	std	Y+24, r27	; 0x18
    132a:	ee 89       	ldd	r30, Y+22	; 0x16
    132c:	ff 89       	ldd	r31, Y+23	; 0x17
    132e:	00 80       	ld	r0, Z
    1330:	8e 89       	ldd	r24, Y+22	; 0x16
    1332:	9f 89       	ldd	r25, Y+23	; 0x17
    1334:	01 96       	adiw	r24, 0x01	; 1
    1336:	9f 8b       	std	Y+23, r25	; 0x17
    1338:	8e 8b       	std	Y+22, r24	; 0x16
    133a:	ac 89       	ldd	r26, Y+20	; 0x14
    133c:	bd 89       	ldd	r27, Y+21	; 0x15
    133e:	0c 92       	st	X, r0
    1340:	ec 89       	ldd	r30, Y+20	; 0x14
    1342:	fd 89       	ldd	r31, Y+21	; 0x15
    1344:	31 96       	adiw	r30, 0x01	; 1
    1346:	fd 8b       	std	Y+21, r31	; 0x15
    1348:	ec 8b       	std	Y+20, r30	; 0x14
    134a:	f8 8d       	ldd	r31, Y+24	; 0x18
    134c:	f1 50       	subi	r31, 0x01	; 1
    134e:	f8 8f       	std	Y+24, r31	; 0x18
    1350:	88 8d       	ldd	r24, Y+24	; 0x18
    1352:	88 23       	and	r24, r24
    1354:	51 f7       	brne	.-44     	; 0x132a <initFuncs+0x28>
	ADC_ConfigType  config_adc   = {free_running_mode,AVCC,PRESCALER_16};
    1356:	de 01       	movw	r26, r28
    1358:	14 96       	adiw	r26, 0x04	; 4
    135a:	ba 8f       	std	Y+26, r27	; 0x1a
    135c:	a9 8f       	std	Y+25, r26	; 0x19
    135e:	e9 e2       	ldi	r30, 0x29	; 41
    1360:	f2 e0       	ldi	r31, 0x02	; 2
    1362:	fc 8f       	std	Y+28, r31	; 0x1c
    1364:	eb 8f       	std	Y+27, r30	; 0x1b
    1366:	f3 e0       	ldi	r31, 0x03	; 3
    1368:	fd 8f       	std	Y+29, r31	; 0x1d
    136a:	ab 8d       	ldd	r26, Y+27	; 0x1b
    136c:	bc 8d       	ldd	r27, Y+28	; 0x1c
    136e:	0c 90       	ld	r0, X
    1370:	eb 8d       	ldd	r30, Y+27	; 0x1b
    1372:	fc 8d       	ldd	r31, Y+28	; 0x1c
    1374:	31 96       	adiw	r30, 0x01	; 1
    1376:	fc 8f       	std	Y+28, r31	; 0x1c
    1378:	eb 8f       	std	Y+27, r30	; 0x1b
    137a:	a9 8d       	ldd	r26, Y+25	; 0x19
    137c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    137e:	0c 92       	st	X, r0
    1380:	e9 8d       	ldd	r30, Y+25	; 0x19
    1382:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1384:	31 96       	adiw	r30, 0x01	; 1
    1386:	fa 8f       	std	Y+26, r31	; 0x1a
    1388:	e9 8f       	std	Y+25, r30	; 0x19
    138a:	fd 8d       	ldd	r31, Y+29	; 0x1d
    138c:	f1 50       	subi	r31, 0x01	; 1
    138e:	fd 8f       	std	Y+29, r31	; 0x1d
    1390:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1392:	88 23       	and	r24, r24
    1394:	51 f7       	brne	.-44     	; 0x136a <initFuncs+0x68>
	UART_ConfigType config_uart  = {DISABLED,ONE_BIT,EIGHT_BIT,9600};
    1396:	de 01       	movw	r26, r28
    1398:	17 96       	adiw	r26, 0x07	; 7
    139a:	bf 8f       	std	Y+31, r27	; 0x1f
    139c:	ae 8f       	std	Y+30, r26	; 0x1e
    139e:	e2 e2       	ldi	r30, 0x22	; 34
    13a0:	f2 e0       	ldi	r31, 0x02	; 2
    13a2:	f9 a3       	std	Y+33, r31	; 0x21
    13a4:	e8 a3       	std	Y+32, r30	; 0x20
    13a6:	f7 e0       	ldi	r31, 0x07	; 7
    13a8:	fa a3       	std	Y+34, r31	; 0x22
    13aa:	a8 a1       	ldd	r26, Y+32	; 0x20
    13ac:	b9 a1       	ldd	r27, Y+33	; 0x21
    13ae:	0c 90       	ld	r0, X
    13b0:	e8 a1       	ldd	r30, Y+32	; 0x20
    13b2:	f9 a1       	ldd	r31, Y+33	; 0x21
    13b4:	31 96       	adiw	r30, 0x01	; 1
    13b6:	f9 a3       	std	Y+33, r31	; 0x21
    13b8:	e8 a3       	std	Y+32, r30	; 0x20
    13ba:	ae 8d       	ldd	r26, Y+30	; 0x1e
    13bc:	bf 8d       	ldd	r27, Y+31	; 0x1f
    13be:	0c 92       	st	X, r0
    13c0:	ee 8d       	ldd	r30, Y+30	; 0x1e
    13c2:	ff 8d       	ldd	r31, Y+31	; 0x1f
    13c4:	31 96       	adiw	r30, 0x01	; 1
    13c6:	ff 8f       	std	Y+31, r31	; 0x1f
    13c8:	ee 8f       	std	Y+30, r30	; 0x1e
    13ca:	fa a1       	ldd	r31, Y+34	; 0x22
    13cc:	f1 50       	subi	r31, 0x01	; 1
    13ce:	fa a3       	std	Y+34, r31	; 0x22
    13d0:	8a a1       	ldd	r24, Y+34	; 0x22
    13d2:	88 23       	and	r24, r24
    13d4:	51 f7       	brne	.-44     	; 0x13aa <initFuncs+0xa8>
	TIMER0_Config   config_timer = {TIMER0_NORMAL_MODE,NO_CLK,6};
    13d6:	86 e0       	ldi	r24, 0x06	; 6
    13d8:	fe 01       	movw	r30, r28
    13da:	3e 96       	adiw	r30, 0x0e	; 14
    13dc:	df 01       	movw	r26, r30
    13de:	98 2f       	mov	r25, r24
    13e0:	1d 92       	st	X+, r1
    13e2:	9a 95       	dec	r25
    13e4:	e9 f7       	brne	.-6      	; 0x13e0 <initFuncs+0xde>
    13e6:	86 e0       	ldi	r24, 0x06	; 6
    13e8:	88 8b       	std	Y+16, r24	; 0x10

	Port_voidInit();
    13ea:	0e 94 78 1e 	call	0x3cf0	; 0x3cf0 <Port_voidInit>
	HLCD_voidInit();
    13ee:	0e 94 11 16 	call	0x2c22	; 0x2c22 <HLCD_voidInit>
	MTWI_voidInit();
    13f2:	0e 94 5b 0f 	call	0x1eb6	; 0x1eb6 <MTWI_voidInit>
	MADC_voidInit(&config_adc);
    13f6:	ce 01       	movw	r24, r28
    13f8:	04 96       	adiw	r24, 0x04	; 4
    13fa:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <MADC_voidInit>
	M_SPI_initMaster(&config_spi);
    13fe:	ce 01       	movw	r24, r28
    1400:	01 96       	adiw	r24, 0x01	; 1
    1402:	0e 94 3c 1c 	call	0x3878	; 0x3878 <M_SPI_initMaster>
	M_UART_voidInit(&config_uart);
    1406:	ce 01       	movw	r24, r28
    1408:	07 96       	adiw	r24, 0x07	; 7
    140a:	0e 94 6b 1d 	call	0x3ad6	; 0x3ad6 <M_UART_voidInit>
	M_TIMER0_voidInit(&config_timer);
    140e:	ce 01       	movw	r24, r28
    1410:	0e 96       	adiw	r24, 0x0e	; 14
    1412:	0e 94 08 10 	call	0x2010	; 0x2010 <M_TIMER0_voidInit>
	M_TIMER0_voidSetCallBack(ISR_TIMER);
    1416:	89 e3       	ldi	r24, 0x39	; 57
    1418:	9e e0       	ldi	r25, 0x0E	; 14
    141a:	0e 94 21 12 	call	0x2442	; 0x2442 <M_TIMER0_voidSetCallBack>
	MGIE_voidEnable();
    141e:	0e 94 dd 21 	call	0x43ba	; 0x43ba <MGIE_voidEnable>
}
    1422:	a2 96       	adiw	r28, 0x22	; 34
    1424:	0f b6       	in	r0, 0x3f	; 63
    1426:	f8 94       	cli
    1428:	de bf       	out	0x3e, r29	; 62
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	cd bf       	out	0x3d, r28	; 61
    142e:	cf 91       	pop	r28
    1430:	df 91       	pop	r29
    1432:	08 95       	ret

00001434 <welcome_message>:
void welcome_message(void){
    1434:	df 93       	push	r29
    1436:	cf 93       	push	r28
    1438:	cd b7       	in	r28, 0x3d	; 61
    143a:	de b7       	in	r29, 0x3e	; 62
    143c:	6c 97       	sbiw	r28, 0x1c	; 28
    143e:	0f b6       	in	r0, 0x3f	; 63
    1440:	f8 94       	cli
    1442:	de bf       	out	0x3e, r29	; 62
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	cd bf       	out	0x3d, r28	; 61
	HLCD_displayString(" Welcome Smart ");
    1448:	84 eb       	ldi	r24, 0xB4	; 180
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <HLCD_displayString>
    1450:	80 e0       	ldi	r24, 0x00	; 0
    1452:	90 e0       	ldi	r25, 0x00	; 0
    1454:	a8 ec       	ldi	r26, 0xC8	; 200
    1456:	b2 e4       	ldi	r27, 0x42	; 66
    1458:	89 8f       	std	Y+25, r24	; 0x19
    145a:	9a 8f       	std	Y+26, r25	; 0x1a
    145c:	ab 8f       	std	Y+27, r26	; 0x1b
    145e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1460:	69 8d       	ldd	r22, Y+25	; 0x19
    1462:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1464:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1466:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1468:	20 e0       	ldi	r18, 0x00	; 0
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	4a ef       	ldi	r20, 0xFA	; 250
    146e:	54 e4       	ldi	r21, 0x44	; 68
    1470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1474:	dc 01       	movw	r26, r24
    1476:	cb 01       	movw	r24, r22
    1478:	8d 8b       	std	Y+21, r24	; 0x15
    147a:	9e 8b       	std	Y+22, r25	; 0x16
    147c:	af 8b       	std	Y+23, r26	; 0x17
    147e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1480:	6d 89       	ldd	r22, Y+21	; 0x15
    1482:	7e 89       	ldd	r23, Y+22	; 0x16
    1484:	8f 89       	ldd	r24, Y+23	; 0x17
    1486:	98 8d       	ldd	r25, Y+24	; 0x18
    1488:	20 e0       	ldi	r18, 0x00	; 0
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	40 e8       	ldi	r20, 0x80	; 128
    148e:	5f e3       	ldi	r21, 0x3F	; 63
    1490:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1494:	88 23       	and	r24, r24
    1496:	2c f4       	brge	.+10     	; 0x14a2 <welcome_message+0x6e>
		__ticks = 1;
    1498:	81 e0       	ldi	r24, 0x01	; 1
    149a:	90 e0       	ldi	r25, 0x00	; 0
    149c:	9c 8b       	std	Y+20, r25	; 0x14
    149e:	8b 8b       	std	Y+19, r24	; 0x13
    14a0:	3f c0       	rjmp	.+126    	; 0x1520 <welcome_message+0xec>
	else if (__tmp > 65535)
    14a2:	6d 89       	ldd	r22, Y+21	; 0x15
    14a4:	7e 89       	ldd	r23, Y+22	; 0x16
    14a6:	8f 89       	ldd	r24, Y+23	; 0x17
    14a8:	98 8d       	ldd	r25, Y+24	; 0x18
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	3f ef       	ldi	r19, 0xFF	; 255
    14ae:	4f e7       	ldi	r20, 0x7F	; 127
    14b0:	57 e4       	ldi	r21, 0x47	; 71
    14b2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    14b6:	18 16       	cp	r1, r24
    14b8:	4c f5       	brge	.+82     	; 0x150c <welcome_message+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ba:	69 8d       	ldd	r22, Y+25	; 0x19
    14bc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14be:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14c0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14c2:	20 e0       	ldi	r18, 0x00	; 0
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	40 e2       	ldi	r20, 0x20	; 32
    14c8:	51 e4       	ldi	r21, 0x41	; 65
    14ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14ce:	dc 01       	movw	r26, r24
    14d0:	cb 01       	movw	r24, r22
    14d2:	bc 01       	movw	r22, r24
    14d4:	cd 01       	movw	r24, r26
    14d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14da:	dc 01       	movw	r26, r24
    14dc:	cb 01       	movw	r24, r22
    14de:	9c 8b       	std	Y+20, r25	; 0x14
    14e0:	8b 8b       	std	Y+19, r24	; 0x13
    14e2:	0f c0       	rjmp	.+30     	; 0x1502 <welcome_message+0xce>
    14e4:	88 ec       	ldi	r24, 0xC8	; 200
    14e6:	90 e0       	ldi	r25, 0x00	; 0
    14e8:	9a 8b       	std	Y+18, r25	; 0x12
    14ea:	89 8b       	std	Y+17, r24	; 0x11
    14ec:	89 89       	ldd	r24, Y+17	; 0x11
    14ee:	9a 89       	ldd	r25, Y+18	; 0x12
    14f0:	01 97       	sbiw	r24, 0x01	; 1
    14f2:	f1 f7       	brne	.-4      	; 0x14f0 <welcome_message+0xbc>
    14f4:	9a 8b       	std	Y+18, r25	; 0x12
    14f6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    14f8:	8b 89       	ldd	r24, Y+19	; 0x13
    14fa:	9c 89       	ldd	r25, Y+20	; 0x14
    14fc:	01 97       	sbiw	r24, 0x01	; 1
    14fe:	9c 8b       	std	Y+20, r25	; 0x14
    1500:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1502:	8b 89       	ldd	r24, Y+19	; 0x13
    1504:	9c 89       	ldd	r25, Y+20	; 0x14
    1506:	00 97       	sbiw	r24, 0x00	; 0
    1508:	69 f7       	brne	.-38     	; 0x14e4 <welcome_message+0xb0>
    150a:	14 c0       	rjmp	.+40     	; 0x1534 <welcome_message+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    150c:	6d 89       	ldd	r22, Y+21	; 0x15
    150e:	7e 89       	ldd	r23, Y+22	; 0x16
    1510:	8f 89       	ldd	r24, Y+23	; 0x17
    1512:	98 8d       	ldd	r25, Y+24	; 0x18
    1514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	9c 8b       	std	Y+20, r25	; 0x14
    151e:	8b 8b       	std	Y+19, r24	; 0x13
    1520:	8b 89       	ldd	r24, Y+19	; 0x13
    1522:	9c 89       	ldd	r25, Y+20	; 0x14
    1524:	98 8b       	std	Y+16, r25	; 0x10
    1526:	8f 87       	std	Y+15, r24	; 0x0f
    1528:	8f 85       	ldd	r24, Y+15	; 0x0f
    152a:	98 89       	ldd	r25, Y+16	; 0x10
    152c:	01 97       	sbiw	r24, 0x01	; 1
    152e:	f1 f7       	brne	.-4      	; 0x152c <welcome_message+0xf8>
    1530:	98 8b       	std	Y+16, r25	; 0x10
    1532:	8f 87       	std	Y+15, r24	; 0x0f
	// Delay
	_delay_ms(100);
	HLCD_moveCursor(1,5);
    1534:	81 e0       	ldi	r24, 0x01	; 1
    1536:	65 e0       	ldi	r22, 0x05	; 5
    1538:	0e 94 0f 1b 	call	0x361e	; 0x361e <HLCD_moveCursor>
	HLCD_displayString("Home");
    153c:	84 ec       	ldi	r24, 0xC4	; 196
    153e:	90 e0       	ldi	r25, 0x00	; 0
    1540:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <HLCD_displayString>
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	a8 ec       	ldi	r26, 0xC8	; 200
    154a:	b2 e4       	ldi	r27, 0x42	; 66
    154c:	8b 87       	std	Y+11, r24	; 0x0b
    154e:	9c 87       	std	Y+12, r25	; 0x0c
    1550:	ad 87       	std	Y+13, r26	; 0x0d
    1552:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1554:	6b 85       	ldd	r22, Y+11	; 0x0b
    1556:	7c 85       	ldd	r23, Y+12	; 0x0c
    1558:	8d 85       	ldd	r24, Y+13	; 0x0d
    155a:	9e 85       	ldd	r25, Y+14	; 0x0e
    155c:	20 e0       	ldi	r18, 0x00	; 0
    155e:	30 e0       	ldi	r19, 0x00	; 0
    1560:	4a ef       	ldi	r20, 0xFA	; 250
    1562:	54 e4       	ldi	r21, 0x44	; 68
    1564:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1568:	dc 01       	movw	r26, r24
    156a:	cb 01       	movw	r24, r22
    156c:	8f 83       	std	Y+7, r24	; 0x07
    156e:	98 87       	std	Y+8, r25	; 0x08
    1570:	a9 87       	std	Y+9, r26	; 0x09
    1572:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1574:	6f 81       	ldd	r22, Y+7	; 0x07
    1576:	78 85       	ldd	r23, Y+8	; 0x08
    1578:	89 85       	ldd	r24, Y+9	; 0x09
    157a:	9a 85       	ldd	r25, Y+10	; 0x0a
    157c:	20 e0       	ldi	r18, 0x00	; 0
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	40 e8       	ldi	r20, 0x80	; 128
    1582:	5f e3       	ldi	r21, 0x3F	; 63
    1584:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1588:	88 23       	and	r24, r24
    158a:	2c f4       	brge	.+10     	; 0x1596 <welcome_message+0x162>
		__ticks = 1;
    158c:	81 e0       	ldi	r24, 0x01	; 1
    158e:	90 e0       	ldi	r25, 0x00	; 0
    1590:	9e 83       	std	Y+6, r25	; 0x06
    1592:	8d 83       	std	Y+5, r24	; 0x05
    1594:	3f c0       	rjmp	.+126    	; 0x1614 <welcome_message+0x1e0>
	else if (__tmp > 65535)
    1596:	6f 81       	ldd	r22, Y+7	; 0x07
    1598:	78 85       	ldd	r23, Y+8	; 0x08
    159a:	89 85       	ldd	r24, Y+9	; 0x09
    159c:	9a 85       	ldd	r25, Y+10	; 0x0a
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	3f ef       	ldi	r19, 0xFF	; 255
    15a2:	4f e7       	ldi	r20, 0x7F	; 127
    15a4:	57 e4       	ldi	r21, 0x47	; 71
    15a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    15aa:	18 16       	cp	r1, r24
    15ac:	4c f5       	brge	.+82     	; 0x1600 <welcome_message+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    15b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    15b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    15b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    15b6:	20 e0       	ldi	r18, 0x00	; 0
    15b8:	30 e0       	ldi	r19, 0x00	; 0
    15ba:	40 e2       	ldi	r20, 0x20	; 32
    15bc:	51 e4       	ldi	r21, 0x41	; 65
    15be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15c2:	dc 01       	movw	r26, r24
    15c4:	cb 01       	movw	r24, r22
    15c6:	bc 01       	movw	r22, r24
    15c8:	cd 01       	movw	r24, r26
    15ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15ce:	dc 01       	movw	r26, r24
    15d0:	cb 01       	movw	r24, r22
    15d2:	9e 83       	std	Y+6, r25	; 0x06
    15d4:	8d 83       	std	Y+5, r24	; 0x05
    15d6:	0f c0       	rjmp	.+30     	; 0x15f6 <welcome_message+0x1c2>
    15d8:	88 ec       	ldi	r24, 0xC8	; 200
    15da:	90 e0       	ldi	r25, 0x00	; 0
    15dc:	9c 83       	std	Y+4, r25	; 0x04
    15de:	8b 83       	std	Y+3, r24	; 0x03
    15e0:	8b 81       	ldd	r24, Y+3	; 0x03
    15e2:	9c 81       	ldd	r25, Y+4	; 0x04
    15e4:	01 97       	sbiw	r24, 0x01	; 1
    15e6:	f1 f7       	brne	.-4      	; 0x15e4 <welcome_message+0x1b0>
    15e8:	9c 83       	std	Y+4, r25	; 0x04
    15ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15ec:	8d 81       	ldd	r24, Y+5	; 0x05
    15ee:	9e 81       	ldd	r25, Y+6	; 0x06
    15f0:	01 97       	sbiw	r24, 0x01	; 1
    15f2:	9e 83       	std	Y+6, r25	; 0x06
    15f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15f6:	8d 81       	ldd	r24, Y+5	; 0x05
    15f8:	9e 81       	ldd	r25, Y+6	; 0x06
    15fa:	00 97       	sbiw	r24, 0x00	; 0
    15fc:	69 f7       	brne	.-38     	; 0x15d8 <welcome_message+0x1a4>
    15fe:	14 c0       	rjmp	.+40     	; 0x1628 <welcome_message+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1600:	6f 81       	ldd	r22, Y+7	; 0x07
    1602:	78 85       	ldd	r23, Y+8	; 0x08
    1604:	89 85       	ldd	r24, Y+9	; 0x09
    1606:	9a 85       	ldd	r25, Y+10	; 0x0a
    1608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    160c:	dc 01       	movw	r26, r24
    160e:	cb 01       	movw	r24, r22
    1610:	9e 83       	std	Y+6, r25	; 0x06
    1612:	8d 83       	std	Y+5, r24	; 0x05
    1614:	8d 81       	ldd	r24, Y+5	; 0x05
    1616:	9e 81       	ldd	r25, Y+6	; 0x06
    1618:	9a 83       	std	Y+2, r25	; 0x02
    161a:	89 83       	std	Y+1, r24	; 0x01
    161c:	89 81       	ldd	r24, Y+1	; 0x01
    161e:	9a 81       	ldd	r25, Y+2	; 0x02
    1620:	01 97       	sbiw	r24, 0x01	; 1
    1622:	f1 f7       	brne	.-4      	; 0x1620 <welcome_message+0x1ec>
    1624:	9a 83       	std	Y+2, r25	; 0x02
    1626:	89 83       	std	Y+1, r24	; 0x01
	//Delay
	_delay_ms(100);
	HLCD_clearScrean();
    1628:	0e 94 ad 1b 	call	0x375a	; 0x375a <HLCD_clearScrean>
}
    162c:	6c 96       	adiw	r28, 0x1c	; 28
    162e:	0f b6       	in	r0, 0x3f	; 63
    1630:	f8 94       	cli
    1632:	de bf       	out	0x3e, r29	; 62
    1634:	0f be       	out	0x3f, r0	; 63
    1636:	cd bf       	out	0x3d, r28	; 61
    1638:	cf 91       	pop	r28
    163a:	df 91       	pop	r29
    163c:	08 95       	ret

0000163e <addnNew_User>:
void addnNew_User(void){
    163e:	df 93       	push	r29
    1640:	cf 93       	push	r28
    1642:	cd b7       	in	r28, 0x3d	; 61
    1644:	de b7       	in	r29, 0x3e	; 62
    1646:	a5 97       	sbiw	r28, 0x25	; 37
    1648:	0f b6       	in	r0, 0x3f	; 63
    164a:	f8 94       	cli
    164c:	de bf       	out	0x3e, r29	; 62
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	cd bf       	out	0x3d, r28	; 61
	u8 key = NO_KEY , confirm_pass[MAX_DIGITS_PASS] = {0} , i ;
    1652:	8f ef       	ldi	r24, 0xFF	; 255
    1654:	89 a3       	std	Y+33, r24	; 0x21
    1656:	1a a2       	std	Y+34, r1	; 0x22
    1658:	1b a2       	std	Y+35, r1	; 0x23
    165a:	1c a2       	std	Y+36, r1	; 0x24
    165c:	1d a2       	std	Y+37, r1	; 0x25
	Error_Status state = SUCCESS;
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	8f 8f       	std	Y+31, r24	; 0x1f

	do{
		/*
		 * ENTER PASSWORD FOR FIRST TIME
		 */
		HLCD_clearScrean();
    1662:	0e 94 ad 1b 	call	0x375a	; 0x375a <HLCD_clearScrean>
		HLCD_displayString("Enter Password: ");
    1666:	89 ec       	ldi	r24, 0xC9	; 201
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <HLCD_displayString>
		HLCD_moveCursor(1,0);
    166e:	81 e0       	ldi	r24, 0x01	; 1
    1670:	60 e0       	ldi	r22, 0x00	; 0
    1672:	0e 94 0f 1b 	call	0x361e	; 0x361e <HLCD_moveCursor>

		for( i = 0 ; i < MAX_DIGITS_PASS ; i++){
    1676:	18 a2       	std	Y+32, r1	; 0x20
    1678:	1c c0       	rjmp	.+56     	; 0x16b2 <addnNew_User+0x74>
			do{
				key = H_KeyPad_u8GetKey();
    167a:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <H_KeyPad_u8GetKey>
    167e:	89 a3       	std	Y+33, r24	; 0x21
			}while(key == NO_KEY);
    1680:	89 a1       	ldd	r24, Y+33	; 0x21
    1682:	8f 3f       	cpi	r24, 0xFF	; 255
    1684:	d1 f3       	breq	.-12     	; 0x167a <addnNew_User+0x3c>
			g_password[i] = key;
    1686:	88 a1       	ldd	r24, Y+32	; 0x20
    1688:	88 2f       	mov	r24, r24
    168a:	90 e0       	ldi	r25, 0x00	; 0
    168c:	fc 01       	movw	r30, r24
    168e:	e0 5c       	subi	r30, 0xC0	; 192
    1690:	fd 4f       	sbci	r31, 0xFD	; 253
    1692:	89 a1       	ldd	r24, Y+33	; 0x21
    1694:	80 83       	st	Z, r24
			HLCD_intgerToString(g_password[i]);
    1696:	88 a1       	ldd	r24, Y+32	; 0x20
    1698:	88 2f       	mov	r24, r24
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	fc 01       	movw	r30, r24
    169e:	e0 5c       	subi	r30, 0xC0	; 192
    16a0:	fd 4f       	sbci	r31, 0xFD	; 253
    16a2:	80 81       	ld	r24, Z
    16a4:	88 2f       	mov	r24, r24
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	0e 94 8a 1b 	call	0x3714	; 0x3714 <HLCD_intgerToString>
		 */
		HLCD_clearScrean();
		HLCD_displayString("Enter Password: ");
		HLCD_moveCursor(1,0);

		for( i = 0 ; i < MAX_DIGITS_PASS ; i++){
    16ac:	88 a1       	ldd	r24, Y+32	; 0x20
    16ae:	8f 5f       	subi	r24, 0xFF	; 255
    16b0:	88 a3       	std	Y+32, r24	; 0x20
    16b2:	88 a1       	ldd	r24, Y+32	; 0x20
    16b4:	84 30       	cpi	r24, 0x04	; 4
    16b6:	08 f3       	brcs	.-62     	; 0x167a <addnNew_User+0x3c>
			}while(key == NO_KEY);
			g_password[i] = key;
			HLCD_intgerToString(g_password[i]);
		}

		HLCD_clearScrean();
    16b8:	0e 94 ad 1b 	call	0x375a	; 0x375a <HLCD_clearScrean>
		HLCD_displayString("Renter Password:");
    16bc:	8a ed       	ldi	r24, 0xDA	; 218
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <HLCD_displayString>
		HLCD_moveCursor(1,0);
    16c4:	81 e0       	ldi	r24, 0x01	; 1
    16c6:	60 e0       	ldi	r22, 0x00	; 0
    16c8:	0e 94 0f 1b 	call	0x361e	; 0x361e <HLCD_moveCursor>
		for( i = 0 ; i < MAX_DIGITS_PASS ; i++){
    16cc:	18 a2       	std	Y+32, r1	; 0x20
    16ce:	18 c0       	rjmp	.+48     	; 0x1700 <addnNew_User+0xc2>
			do{
				key = H_KeyPad_u8GetKey();
    16d0:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <H_KeyPad_u8GetKey>
    16d4:	89 a3       	std	Y+33, r24	; 0x21
			}while(key == NO_KEY);
    16d6:	89 a1       	ldd	r24, Y+33	; 0x21
    16d8:	8f 3f       	cpi	r24, 0xFF	; 255
    16da:	d1 f3       	breq	.-12     	; 0x16d0 <addnNew_User+0x92>
			confirm_pass[i] = key;
    16dc:	88 a1       	ldd	r24, Y+32	; 0x20
    16de:	28 2f       	mov	r18, r24
    16e0:	30 e0       	ldi	r19, 0x00	; 0
    16e2:	ce 01       	movw	r24, r28
    16e4:	82 96       	adiw	r24, 0x22	; 34
    16e6:	fc 01       	movw	r30, r24
    16e8:	e2 0f       	add	r30, r18
    16ea:	f3 1f       	adc	r31, r19
    16ec:	89 a1       	ldd	r24, Y+33	; 0x21
    16ee:	80 83       	st	Z, r24
			HLCD_intgerToString(key);
    16f0:	89 a1       	ldd	r24, Y+33	; 0x21
    16f2:	88 2f       	mov	r24, r24
    16f4:	90 e0       	ldi	r25, 0x00	; 0
    16f6:	0e 94 8a 1b 	call	0x3714	; 0x3714 <HLCD_intgerToString>
		}

		HLCD_clearScrean();
		HLCD_displayString("Renter Password:");
		HLCD_moveCursor(1,0);
		for( i = 0 ; i < MAX_DIGITS_PASS ; i++){
    16fa:	88 a1       	ldd	r24, Y+32	; 0x20
    16fc:	8f 5f       	subi	r24, 0xFF	; 255
    16fe:	88 a3       	std	Y+32, r24	; 0x20
    1700:	88 a1       	ldd	r24, Y+32	; 0x20
    1702:	84 30       	cpi	r24, 0x04	; 4
    1704:	28 f3       	brcs	.-54     	; 0x16d0 <addnNew_User+0x92>
			}while(key == NO_KEY);
			confirm_pass[i] = key;
			HLCD_intgerToString(key);
		}

		for(i = 0 ; i < MAX_DIGITS_PASS ; i++){
    1706:	18 a2       	std	Y+32, r1	; 0x20
    1708:	19 c0       	rjmp	.+50     	; 0x173c <addnNew_User+0xfe>
			if(confirm_pass[i] != g_password[i]){
    170a:	88 a1       	ldd	r24, Y+32	; 0x20
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	ce 01       	movw	r24, r28
    1712:	82 96       	adiw	r24, 0x22	; 34
    1714:	fc 01       	movw	r30, r24
    1716:	e2 0f       	add	r30, r18
    1718:	f3 1f       	adc	r31, r19
    171a:	20 81       	ld	r18, Z
    171c:	88 a1       	ldd	r24, Y+32	; 0x20
    171e:	88 2f       	mov	r24, r24
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	fc 01       	movw	r30, r24
    1724:	e0 5c       	subi	r30, 0xC0	; 192
    1726:	fd 4f       	sbci	r31, 0xFD	; 253
    1728:	80 81       	ld	r24, Z
    172a:	28 17       	cp	r18, r24
    172c:	11 f0       	breq	.+4      	; 0x1732 <addnNew_User+0xf4>
				state = FAILED;
    172e:	1f 8e       	std	Y+31, r1	; 0x1f
    1730:	08 c0       	rjmp	.+16     	; 0x1742 <addnNew_User+0x104>
				break;
			}else{
				state = SUCCESS;
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	8f 8f       	std	Y+31, r24	; 0x1f
			}while(key == NO_KEY);
			confirm_pass[i] = key;
			HLCD_intgerToString(key);
		}

		for(i = 0 ; i < MAX_DIGITS_PASS ; i++){
    1736:	88 a1       	ldd	r24, Y+32	; 0x20
    1738:	8f 5f       	subi	r24, 0xFF	; 255
    173a:	88 a3       	std	Y+32, r24	; 0x20
    173c:	88 a1       	ldd	r24, Y+32	; 0x20
    173e:	84 30       	cpi	r24, 0x04	; 4
    1740:	20 f3       	brcs	.-56     	; 0x170a <addnNew_User+0xcc>
				break;
			}else{
				state = SUCCESS;
			}
		}
	}while(state == FAILED);
    1742:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1744:	88 23       	and	r24, r24
    1746:	09 f4       	brne	.+2      	; 0x174a <addnNew_User+0x10c>
    1748:	8c cf       	rjmp	.-232    	; 0x1662 <addnNew_User+0x24>
	/*
	 *STORE PASSWORD AT EEPROM
	 */
	for(u8 i = 0 ; i < MAX_DIGITS_PASS ; i++){
    174a:	1e 8e       	std	Y+30, r1	; 0x1e
    174c:	87 c0       	rjmp	.+270    	; 0x185c <addnNew_User+0x21e>
		EEPROM_voidWrite(address_pass[0][i],g_password[i]);
    174e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1750:	88 2f       	mov	r24, r24
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	fc 01       	movw	r30, r24
    1756:	ee 5e       	subi	r30, 0xEE	; 238
    1758:	fd 4f       	sbci	r31, 0xFD	; 253
    175a:	20 81       	ld	r18, Z
    175c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    175e:	88 2f       	mov	r24, r24
    1760:	90 e0       	ldi	r25, 0x00	; 0
    1762:	fc 01       	movw	r30, r24
    1764:	e0 5c       	subi	r30, 0xC0	; 192
    1766:	fd 4f       	sbci	r31, 0xFD	; 253
    1768:	90 81       	ld	r25, Z
    176a:	82 2f       	mov	r24, r18
    176c:	69 2f       	mov	r22, r25
    176e:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <EEPROM_voidWrite>
    1772:	80 e0       	ldi	r24, 0x00	; 0
    1774:	90 e0       	ldi	r25, 0x00	; 0
    1776:	a0 ea       	ldi	r26, 0xA0	; 160
    1778:	b1 e4       	ldi	r27, 0x41	; 65
    177a:	89 8f       	std	Y+25, r24	; 0x19
    177c:	9a 8f       	std	Y+26, r25	; 0x1a
    177e:	ab 8f       	std	Y+27, r26	; 0x1b
    1780:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1782:	69 8d       	ldd	r22, Y+25	; 0x19
    1784:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1786:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1788:	9c 8d       	ldd	r25, Y+28	; 0x1c
    178a:	20 e0       	ldi	r18, 0x00	; 0
    178c:	30 e0       	ldi	r19, 0x00	; 0
    178e:	4a ef       	ldi	r20, 0xFA	; 250
    1790:	54 e4       	ldi	r21, 0x44	; 68
    1792:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	8d 8b       	std	Y+21, r24	; 0x15
    179c:	9e 8b       	std	Y+22, r25	; 0x16
    179e:	af 8b       	std	Y+23, r26	; 0x17
    17a0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    17a2:	6d 89       	ldd	r22, Y+21	; 0x15
    17a4:	7e 89       	ldd	r23, Y+22	; 0x16
    17a6:	8f 89       	ldd	r24, Y+23	; 0x17
    17a8:	98 8d       	ldd	r25, Y+24	; 0x18
    17aa:	20 e0       	ldi	r18, 0x00	; 0
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	40 e8       	ldi	r20, 0x80	; 128
    17b0:	5f e3       	ldi	r21, 0x3F	; 63
    17b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    17b6:	88 23       	and	r24, r24
    17b8:	2c f4       	brge	.+10     	; 0x17c4 <addnNew_User+0x186>
		__ticks = 1;
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	9c 8b       	std	Y+20, r25	; 0x14
    17c0:	8b 8b       	std	Y+19, r24	; 0x13
    17c2:	3f c0       	rjmp	.+126    	; 0x1842 <addnNew_User+0x204>
	else if (__tmp > 65535)
    17c4:	6d 89       	ldd	r22, Y+21	; 0x15
    17c6:	7e 89       	ldd	r23, Y+22	; 0x16
    17c8:	8f 89       	ldd	r24, Y+23	; 0x17
    17ca:	98 8d       	ldd	r25, Y+24	; 0x18
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	3f ef       	ldi	r19, 0xFF	; 255
    17d0:	4f e7       	ldi	r20, 0x7F	; 127
    17d2:	57 e4       	ldi	r21, 0x47	; 71
    17d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    17d8:	18 16       	cp	r1, r24
    17da:	4c f5       	brge	.+82     	; 0x182e <addnNew_User+0x1f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17dc:	69 8d       	ldd	r22, Y+25	; 0x19
    17de:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17e0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17e2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17e4:	20 e0       	ldi	r18, 0x00	; 0
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	40 e2       	ldi	r20, 0x20	; 32
    17ea:	51 e4       	ldi	r21, 0x41	; 65
    17ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17f0:	dc 01       	movw	r26, r24
    17f2:	cb 01       	movw	r24, r22
    17f4:	bc 01       	movw	r22, r24
    17f6:	cd 01       	movw	r24, r26
    17f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	9c 8b       	std	Y+20, r25	; 0x14
    1802:	8b 8b       	std	Y+19, r24	; 0x13
    1804:	0f c0       	rjmp	.+30     	; 0x1824 <addnNew_User+0x1e6>
    1806:	88 ec       	ldi	r24, 0xC8	; 200
    1808:	90 e0       	ldi	r25, 0x00	; 0
    180a:	9a 8b       	std	Y+18, r25	; 0x12
    180c:	89 8b       	std	Y+17, r24	; 0x11
    180e:	89 89       	ldd	r24, Y+17	; 0x11
    1810:	9a 89       	ldd	r25, Y+18	; 0x12
    1812:	01 97       	sbiw	r24, 0x01	; 1
    1814:	f1 f7       	brne	.-4      	; 0x1812 <addnNew_User+0x1d4>
    1816:	9a 8b       	std	Y+18, r25	; 0x12
    1818:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    181a:	8b 89       	ldd	r24, Y+19	; 0x13
    181c:	9c 89       	ldd	r25, Y+20	; 0x14
    181e:	01 97       	sbiw	r24, 0x01	; 1
    1820:	9c 8b       	std	Y+20, r25	; 0x14
    1822:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1824:	8b 89       	ldd	r24, Y+19	; 0x13
    1826:	9c 89       	ldd	r25, Y+20	; 0x14
    1828:	00 97       	sbiw	r24, 0x00	; 0
    182a:	69 f7       	brne	.-38     	; 0x1806 <addnNew_User+0x1c8>
    182c:	14 c0       	rjmp	.+40     	; 0x1856 <addnNew_User+0x218>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    182e:	6d 89       	ldd	r22, Y+21	; 0x15
    1830:	7e 89       	ldd	r23, Y+22	; 0x16
    1832:	8f 89       	ldd	r24, Y+23	; 0x17
    1834:	98 8d       	ldd	r25, Y+24	; 0x18
    1836:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    183a:	dc 01       	movw	r26, r24
    183c:	cb 01       	movw	r24, r22
    183e:	9c 8b       	std	Y+20, r25	; 0x14
    1840:	8b 8b       	std	Y+19, r24	; 0x13
    1842:	8b 89       	ldd	r24, Y+19	; 0x13
    1844:	9c 89       	ldd	r25, Y+20	; 0x14
    1846:	98 8b       	std	Y+16, r25	; 0x10
    1848:	8f 87       	std	Y+15, r24	; 0x0f
    184a:	8f 85       	ldd	r24, Y+15	; 0x0f
    184c:	98 89       	ldd	r25, Y+16	; 0x10
    184e:	01 97       	sbiw	r24, 0x01	; 1
    1850:	f1 f7       	brne	.-4      	; 0x184e <addnNew_User+0x210>
    1852:	98 8b       	std	Y+16, r25	; 0x10
    1854:	8f 87       	std	Y+15, r24	; 0x0f
		}
	}while(state == FAILED);
	/*
	 *STORE PASSWORD AT EEPROM
	 */
	for(u8 i = 0 ; i < MAX_DIGITS_PASS ; i++){
    1856:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1858:	8f 5f       	subi	r24, 0xFF	; 255
    185a:	8e 8f       	std	Y+30, r24	; 0x1e
    185c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    185e:	84 30       	cpi	r24, 0x04	; 4
    1860:	08 f4       	brcc	.+2      	; 0x1864 <addnNew_User+0x226>
    1862:	75 cf       	rjmp	.-278    	; 0x174e <addnNew_User+0x110>
		EEPROM_voidWrite(address_pass[0][i],g_password[i]);
		_delay_ms(20);
	}

	HLCD_clearScrean();
    1864:	0e 94 ad 1b 	call	0x375a	; 0x375a <HLCD_clearScrean>
	for(u8 i = 0 ; i < MAX_DIGITS_PASS ; i++){
    1868:	1d 8e       	std	Y+29, r1	; 0x1d
    186a:	91 c0       	rjmp	.+290    	; 0x198e <addnNew_User+0x350>
		EEPROM_voidRead(address_pass[0][i],&g_test_pass[i]);
    186c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    186e:	88 2f       	mov	r24, r24
    1870:	90 e0       	ldi	r25, 0x00	; 0
    1872:	fc 01       	movw	r30, r24
    1874:	ee 5e       	subi	r30, 0xEE	; 238
    1876:	fd 4f       	sbci	r31, 0xFD	; 253
    1878:	40 81       	ld	r20, Z
    187a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    187c:	88 2f       	mov	r24, r24
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	9c 01       	movw	r18, r24
    1882:	22 5e       	subi	r18, 0xE2	; 226
    1884:	3d 4f       	sbci	r19, 0xFD	; 253
    1886:	84 2f       	mov	r24, r20
    1888:	b9 01       	movw	r22, r18
    188a:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <EEPROM_voidRead>
		HLCD_intgerToString(g_test_pass[i]);
    188e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1890:	88 2f       	mov	r24, r24
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	fc 01       	movw	r30, r24
    1896:	e2 5e       	subi	r30, 0xE2	; 226
    1898:	fd 4f       	sbci	r31, 0xFD	; 253
    189a:	80 81       	ld	r24, Z
    189c:	88 2f       	mov	r24, r24
    189e:	90 e0       	ldi	r25, 0x00	; 0
    18a0:	0e 94 8a 1b 	call	0x3714	; 0x3714 <HLCD_intgerToString>
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	a8 e4       	ldi	r26, 0x48	; 72
    18aa:	b3 e4       	ldi	r27, 0x43	; 67
    18ac:	8b 87       	std	Y+11, r24	; 0x0b
    18ae:	9c 87       	std	Y+12, r25	; 0x0c
    18b0:	ad 87       	std	Y+13, r26	; 0x0d
    18b2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    18b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    18b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    18ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    18bc:	20 e0       	ldi	r18, 0x00	; 0
    18be:	30 e0       	ldi	r19, 0x00	; 0
    18c0:	4a ef       	ldi	r20, 0xFA	; 250
    18c2:	54 e4       	ldi	r21, 0x44	; 68
    18c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18c8:	dc 01       	movw	r26, r24
    18ca:	cb 01       	movw	r24, r22
    18cc:	8f 83       	std	Y+7, r24	; 0x07
    18ce:	98 87       	std	Y+8, r25	; 0x08
    18d0:	a9 87       	std	Y+9, r26	; 0x09
    18d2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    18d4:	6f 81       	ldd	r22, Y+7	; 0x07
    18d6:	78 85       	ldd	r23, Y+8	; 0x08
    18d8:	89 85       	ldd	r24, Y+9	; 0x09
    18da:	9a 85       	ldd	r25, Y+10	; 0x0a
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	30 e0       	ldi	r19, 0x00	; 0
    18e0:	40 e8       	ldi	r20, 0x80	; 128
    18e2:	5f e3       	ldi	r21, 0x3F	; 63
    18e4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    18e8:	88 23       	and	r24, r24
    18ea:	2c f4       	brge	.+10     	; 0x18f6 <addnNew_User+0x2b8>
		__ticks = 1;
    18ec:	81 e0       	ldi	r24, 0x01	; 1
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	9e 83       	std	Y+6, r25	; 0x06
    18f2:	8d 83       	std	Y+5, r24	; 0x05
    18f4:	3f c0       	rjmp	.+126    	; 0x1974 <addnNew_User+0x336>
	else if (__tmp > 65535)
    18f6:	6f 81       	ldd	r22, Y+7	; 0x07
    18f8:	78 85       	ldd	r23, Y+8	; 0x08
    18fa:	89 85       	ldd	r24, Y+9	; 0x09
    18fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    18fe:	20 e0       	ldi	r18, 0x00	; 0
    1900:	3f ef       	ldi	r19, 0xFF	; 255
    1902:	4f e7       	ldi	r20, 0x7F	; 127
    1904:	57 e4       	ldi	r21, 0x47	; 71
    1906:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    190a:	18 16       	cp	r1, r24
    190c:	4c f5       	brge	.+82     	; 0x1960 <addnNew_User+0x322>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    190e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1910:	7c 85       	ldd	r23, Y+12	; 0x0c
    1912:	8d 85       	ldd	r24, Y+13	; 0x0d
    1914:	9e 85       	ldd	r25, Y+14	; 0x0e
    1916:	20 e0       	ldi	r18, 0x00	; 0
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	40 e2       	ldi	r20, 0x20	; 32
    191c:	51 e4       	ldi	r21, 0x41	; 65
    191e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1922:	dc 01       	movw	r26, r24
    1924:	cb 01       	movw	r24, r22
    1926:	bc 01       	movw	r22, r24
    1928:	cd 01       	movw	r24, r26
    192a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    192e:	dc 01       	movw	r26, r24
    1930:	cb 01       	movw	r24, r22
    1932:	9e 83       	std	Y+6, r25	; 0x06
    1934:	8d 83       	std	Y+5, r24	; 0x05
    1936:	0f c0       	rjmp	.+30     	; 0x1956 <addnNew_User+0x318>
    1938:	88 ec       	ldi	r24, 0xC8	; 200
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	9c 83       	std	Y+4, r25	; 0x04
    193e:	8b 83       	std	Y+3, r24	; 0x03
    1940:	8b 81       	ldd	r24, Y+3	; 0x03
    1942:	9c 81       	ldd	r25, Y+4	; 0x04
    1944:	01 97       	sbiw	r24, 0x01	; 1
    1946:	f1 f7       	brne	.-4      	; 0x1944 <addnNew_User+0x306>
    1948:	9c 83       	std	Y+4, r25	; 0x04
    194a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    194c:	8d 81       	ldd	r24, Y+5	; 0x05
    194e:	9e 81       	ldd	r25, Y+6	; 0x06
    1950:	01 97       	sbiw	r24, 0x01	; 1
    1952:	9e 83       	std	Y+6, r25	; 0x06
    1954:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1956:	8d 81       	ldd	r24, Y+5	; 0x05
    1958:	9e 81       	ldd	r25, Y+6	; 0x06
    195a:	00 97       	sbiw	r24, 0x00	; 0
    195c:	69 f7       	brne	.-38     	; 0x1938 <addnNew_User+0x2fa>
    195e:	14 c0       	rjmp	.+40     	; 0x1988 <addnNew_User+0x34a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1960:	6f 81       	ldd	r22, Y+7	; 0x07
    1962:	78 85       	ldd	r23, Y+8	; 0x08
    1964:	89 85       	ldd	r24, Y+9	; 0x09
    1966:	9a 85       	ldd	r25, Y+10	; 0x0a
    1968:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    196c:	dc 01       	movw	r26, r24
    196e:	cb 01       	movw	r24, r22
    1970:	9e 83       	std	Y+6, r25	; 0x06
    1972:	8d 83       	std	Y+5, r24	; 0x05
    1974:	8d 81       	ldd	r24, Y+5	; 0x05
    1976:	9e 81       	ldd	r25, Y+6	; 0x06
    1978:	9a 83       	std	Y+2, r25	; 0x02
    197a:	89 83       	std	Y+1, r24	; 0x01
    197c:	89 81       	ldd	r24, Y+1	; 0x01
    197e:	9a 81       	ldd	r25, Y+2	; 0x02
    1980:	01 97       	sbiw	r24, 0x01	; 1
    1982:	f1 f7       	brne	.-4      	; 0x1980 <addnNew_User+0x342>
    1984:	9a 83       	std	Y+2, r25	; 0x02
    1986:	89 83       	std	Y+1, r24	; 0x01
		EEPROM_voidWrite(address_pass[0][i],g_password[i]);
		_delay_ms(20);
	}

	HLCD_clearScrean();
	for(u8 i = 0 ; i < MAX_DIGITS_PASS ; i++){
    1988:	8d 8d       	ldd	r24, Y+29	; 0x1d
    198a:	8f 5f       	subi	r24, 0xFF	; 255
    198c:	8d 8f       	std	Y+29, r24	; 0x1d
    198e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1990:	84 30       	cpi	r24, 0x04	; 4
    1992:	08 f4       	brcc	.+2      	; 0x1996 <addnNew_User+0x358>
    1994:	6b cf       	rjmp	.-298    	; 0x186c <addnNew_User+0x22e>
		_delay_ms(200);
	}
	//until here all done ass required but still wrong pass in EEPROM
	//I need to check on the value at add

}
    1996:	a5 96       	adiw	r28, 0x25	; 37
    1998:	0f b6       	in	r0, 0x3f	; 63
    199a:	f8 94       	cli
    199c:	de bf       	out	0x3e, r29	; 62
    199e:	0f be       	out	0x3f, r0	; 63
    19a0:	cd bf       	out	0x3d, r28	; 61
    19a2:	cf 91       	pop	r28
    19a4:	df 91       	pop	r29
    19a6:	08 95       	ret

000019a8 <Change_pass>:

void Change_pass(void){
    19a8:	df 93       	push	r29
    19aa:	cf 93       	push	r28
    19ac:	00 d0       	rcall	.+0      	; 0x19ae <Change_pass+0x6>
    19ae:	cd b7       	in	r28, 0x3d	; 61
    19b0:	de b7       	in	r29, 0x3e	; 62
	u8 key = NO_KEY;
    19b2:	8f ef       	ldi	r24, 0xFF	; 255
    19b4:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0 ;
    19b6:	19 82       	std	Y+1, r1	; 0x01

	HLCD_clearScrean();
    19b8:	0e 94 ad 1b 	call	0x375a	; 0x375a <HLCD_clearScrean>
	HLCD_displayString("Enter New Pass:");
    19bc:	8b ee       	ldi	r24, 0xEB	; 235
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <HLCD_displayString>
	HLCD_moveCursor(1,0);
    19c4:	81 e0       	ldi	r24, 0x01	; 1
    19c6:	60 e0       	ldi	r22, 0x00	; 0
    19c8:	0e 94 0f 1b 	call	0x361e	; 0x361e <HLCD_moveCursor>

	do{
		do{
			key = H_KeyPad_u8GetKey();
    19cc:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <H_KeyPad_u8GetKey>
    19d0:	8a 83       	std	Y+2, r24	; 0x02
		}while(key == NO_KEY);
    19d2:	8a 81       	ldd	r24, Y+2	; 0x02
    19d4:	8f 3f       	cpi	r24, 0xFF	; 255
    19d6:	d1 f3       	breq	.-12     	; 0x19cc <Change_pass+0x24>
		g_password[i] = key;
    19d8:	89 81       	ldd	r24, Y+1	; 0x01
    19da:	88 2f       	mov	r24, r24
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	fc 01       	movw	r30, r24
    19e0:	e0 5c       	subi	r30, 0xC0	; 192
    19e2:	fd 4f       	sbci	r31, 0xFD	; 253
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	80 83       	st	Z, r24
		HLCD_intgerToString(key);
    19e8:	8a 81       	ldd	r24, Y+2	; 0x02
    19ea:	88 2f       	mov	r24, r24
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	0e 94 8a 1b 	call	0x3714	; 0x3714 <HLCD_intgerToString>
		EEPROM_voidWrite(address_pass[0][i],key);
    19f2:	89 81       	ldd	r24, Y+1	; 0x01
    19f4:	88 2f       	mov	r24, r24
    19f6:	90 e0       	ldi	r25, 0x00	; 0
    19f8:	fc 01       	movw	r30, r24
    19fa:	ee 5e       	subi	r30, 0xEE	; 238
    19fc:	fd 4f       	sbci	r31, 0xFD	; 253
    19fe:	80 81       	ld	r24, Z
    1a00:	6a 81       	ldd	r22, Y+2	; 0x02
    1a02:	0e 94 63 0e 	call	0x1cc6	; 0x1cc6 <EEPROM_voidWrite>
		i++;
    1a06:	89 81       	ldd	r24, Y+1	; 0x01
    1a08:	8f 5f       	subi	r24, 0xFF	; 255
    1a0a:	89 83       	std	Y+1, r24	; 0x01
	}while(i < MAX_DIGITS_PASS);
    1a0c:	89 81       	ldd	r24, Y+1	; 0x01
    1a0e:	84 30       	cpi	r24, 0x04	; 4
    1a10:	e8 f2       	brcs	.-70     	; 0x19cc <Change_pass+0x24>
}
    1a12:	0f 90       	pop	r0
    1a14:	0f 90       	pop	r0
    1a16:	cf 91       	pop	r28
    1a18:	df 91       	pop	r29
    1a1a:	08 95       	ret

00001a1c <Enter_Password>:

Error_Status Enter_Password(void){
    1a1c:	df 93       	push	r29
    1a1e:	cf 93       	push	r28
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
    1a24:	6b 97       	sbiw	r28, 0x1b	; 27
    1a26:	0f b6       	in	r0, 0x3f	; 63
    1a28:	f8 94       	cli
    1a2a:	de bf       	out	0x3e, r29	; 62
    1a2c:	0f be       	out	0x3f, r0	; 63
    1a2e:	cd bf       	out	0x3d, r28	; 61

	u8 key = NO_KEY , pass_iterator = 0 , trials_Flag = 0 , i = 0 ;
    1a30:	8f ef       	ldi	r24, 0xFF	; 255
    1a32:	8b 8b       	std	Y+19, r24	; 0x13
    1a34:	1a 8a       	std	Y+18, r1	; 0x12
    1a36:	19 8a       	std	Y+17, r1	; 0x11
    1a38:	18 8a       	std	Y+16, r1	; 0x10
	Error_Status state = SUCCESS;
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	8f 87       	std	Y+15, r24	; 0x0f
	u8 temp_pass[MAX_DIGITS_PASS]= {0};
    1a3e:	1c 8a       	std	Y+20, r1	; 0x14
    1a40:	1d 8a       	std	Y+21, r1	; 0x15
    1a42:	1e 8a       	std	Y+22, r1	; 0x16
    1a44:	1f 8a       	std	Y+23, r1	; 0x17
	u8 EEPROM_pass[MAX_DIGITS_PASS]= {0};
    1a46:	18 8e       	std	Y+24, r1	; 0x18
    1a48:	19 8e       	std	Y+25, r1	; 0x19
    1a4a:	1a 8e       	std	Y+26, r1	; 0x1a
    1a4c:	1b 8e       	std	Y+27, r1	; 0x1b

	/*
	 * Read password form memory
	 * */
	do{
		EEPROM_voidRead(address_pass[0][i],&EEPROM_pass[i]);
    1a4e:	88 89       	ldd	r24, Y+16	; 0x10
    1a50:	88 2f       	mov	r24, r24
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	fc 01       	movw	r30, r24
    1a56:	ee 5e       	subi	r30, 0xEE	; 238
    1a58:	fd 4f       	sbci	r31, 0xFD	; 253
    1a5a:	40 81       	ld	r20, Z
    1a5c:	88 89       	ldd	r24, Y+16	; 0x10
    1a5e:	88 2f       	mov	r24, r24
    1a60:	90 e0       	ldi	r25, 0x00	; 0
    1a62:	9e 01       	movw	r18, r28
    1a64:	28 5e       	subi	r18, 0xE8	; 232
    1a66:	3f 4f       	sbci	r19, 0xFF	; 255
    1a68:	28 0f       	add	r18, r24
    1a6a:	39 1f       	adc	r19, r25
    1a6c:	84 2f       	mov	r24, r20
    1a6e:	b9 01       	movw	r22, r18
    1a70:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <EEPROM_voidRead>
    1a74:	80 e0       	ldi	r24, 0x00	; 0
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	a0 e7       	ldi	r26, 0x70	; 112
    1a7a:	b1 e4       	ldi	r27, 0x41	; 65
    1a7c:	8b 87       	std	Y+11, r24	; 0x0b
    1a7e:	9c 87       	std	Y+12, r25	; 0x0c
    1a80:	ad 87       	std	Y+13, r26	; 0x0d
    1a82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a84:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a86:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a88:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a8c:	20 e0       	ldi	r18, 0x00	; 0
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	4a ef       	ldi	r20, 0xFA	; 250
    1a92:	54 e4       	ldi	r21, 0x44	; 68
    1a94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a98:	dc 01       	movw	r26, r24
    1a9a:	cb 01       	movw	r24, r22
    1a9c:	8f 83       	std	Y+7, r24	; 0x07
    1a9e:	98 87       	std	Y+8, r25	; 0x08
    1aa0:	a9 87       	std	Y+9, r26	; 0x09
    1aa2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1aa4:	6f 81       	ldd	r22, Y+7	; 0x07
    1aa6:	78 85       	ldd	r23, Y+8	; 0x08
    1aa8:	89 85       	ldd	r24, Y+9	; 0x09
    1aaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aac:	20 e0       	ldi	r18, 0x00	; 0
    1aae:	30 e0       	ldi	r19, 0x00	; 0
    1ab0:	40 e8       	ldi	r20, 0x80	; 128
    1ab2:	5f e3       	ldi	r21, 0x3F	; 63
    1ab4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ab8:	88 23       	and	r24, r24
    1aba:	2c f4       	brge	.+10     	; 0x1ac6 <Enter_Password+0xaa>
		__ticks = 1;
    1abc:	81 e0       	ldi	r24, 0x01	; 1
    1abe:	90 e0       	ldi	r25, 0x00	; 0
    1ac0:	9e 83       	std	Y+6, r25	; 0x06
    1ac2:	8d 83       	std	Y+5, r24	; 0x05
    1ac4:	3f c0       	rjmp	.+126    	; 0x1b44 <Enter_Password+0x128>
	else if (__tmp > 65535)
    1ac6:	6f 81       	ldd	r22, Y+7	; 0x07
    1ac8:	78 85       	ldd	r23, Y+8	; 0x08
    1aca:	89 85       	ldd	r24, Y+9	; 0x09
    1acc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ace:	20 e0       	ldi	r18, 0x00	; 0
    1ad0:	3f ef       	ldi	r19, 0xFF	; 255
    1ad2:	4f e7       	ldi	r20, 0x7F	; 127
    1ad4:	57 e4       	ldi	r21, 0x47	; 71
    1ad6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ada:	18 16       	cp	r1, r24
    1adc:	4c f5       	brge	.+82     	; 0x1b30 <Enter_Password+0x114>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ade:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ae0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ae2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ae4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ae6:	20 e0       	ldi	r18, 0x00	; 0
    1ae8:	30 e0       	ldi	r19, 0x00	; 0
    1aea:	40 e2       	ldi	r20, 0x20	; 32
    1aec:	51 e4       	ldi	r21, 0x41	; 65
    1aee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1af2:	dc 01       	movw	r26, r24
    1af4:	cb 01       	movw	r24, r22
    1af6:	bc 01       	movw	r22, r24
    1af8:	cd 01       	movw	r24, r26
    1afa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1afe:	dc 01       	movw	r26, r24
    1b00:	cb 01       	movw	r24, r22
    1b02:	9e 83       	std	Y+6, r25	; 0x06
    1b04:	8d 83       	std	Y+5, r24	; 0x05
    1b06:	0f c0       	rjmp	.+30     	; 0x1b26 <Enter_Password+0x10a>
    1b08:	88 ec       	ldi	r24, 0xC8	; 200
    1b0a:	90 e0       	ldi	r25, 0x00	; 0
    1b0c:	9c 83       	std	Y+4, r25	; 0x04
    1b0e:	8b 83       	std	Y+3, r24	; 0x03
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	9c 81       	ldd	r25, Y+4	; 0x04
    1b14:	01 97       	sbiw	r24, 0x01	; 1
    1b16:	f1 f7       	brne	.-4      	; 0x1b14 <Enter_Password+0xf8>
    1b18:	9c 83       	std	Y+4, r25	; 0x04
    1b1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b20:	01 97       	sbiw	r24, 0x01	; 1
    1b22:	9e 83       	std	Y+6, r25	; 0x06
    1b24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b26:	8d 81       	ldd	r24, Y+5	; 0x05
    1b28:	9e 81       	ldd	r25, Y+6	; 0x06
    1b2a:	00 97       	sbiw	r24, 0x00	; 0
    1b2c:	69 f7       	brne	.-38     	; 0x1b08 <Enter_Password+0xec>
    1b2e:	14 c0       	rjmp	.+40     	; 0x1b58 <Enter_Password+0x13c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b30:	6f 81       	ldd	r22, Y+7	; 0x07
    1b32:	78 85       	ldd	r23, Y+8	; 0x08
    1b34:	89 85       	ldd	r24, Y+9	; 0x09
    1b36:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b3c:	dc 01       	movw	r26, r24
    1b3e:	cb 01       	movw	r24, r22
    1b40:	9e 83       	std	Y+6, r25	; 0x06
    1b42:	8d 83       	std	Y+5, r24	; 0x05
    1b44:	8d 81       	ldd	r24, Y+5	; 0x05
    1b46:	9e 81       	ldd	r25, Y+6	; 0x06
    1b48:	9a 83       	std	Y+2, r25	; 0x02
    1b4a:	89 83       	std	Y+1, r24	; 0x01
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    1b50:	01 97       	sbiw	r24, 0x01	; 1
    1b52:	f1 f7       	brne	.-4      	; 0x1b50 <Enter_Password+0x134>
    1b54:	9a 83       	std	Y+2, r25	; 0x02
    1b56:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(15);
		i++;
    1b58:	88 89       	ldd	r24, Y+16	; 0x10
    1b5a:	8f 5f       	subi	r24, 0xFF	; 255
    1b5c:	88 8b       	std	Y+16, r24	; 0x10
	}while(i < MAX_DIGITS_PASS );
    1b5e:	88 89       	ldd	r24, Y+16	; 0x10
    1b60:	84 30       	cpi	r24, 0x04	; 4
    1b62:	08 f4       	brcc	.+2      	; 0x1b66 <Enter_Password+0x14a>
    1b64:	74 cf       	rjmp	.-280    	; 0x1a4e <Enter_Password+0x32>

	do{
		HLCD_clearScrean();
    1b66:	0e 94 ad 1b 	call	0x375a	; 0x375a <HLCD_clearScrean>
		HLCD_displayString("Enter Password: ");
    1b6a:	89 ec       	ldi	r24, 0xC9	; 201
    1b6c:	90 e0       	ldi	r25, 0x00	; 0
    1b6e:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <HLCD_displayString>
		HLCD_moveCursor(1,0);
    1b72:	81 e0       	ldi	r24, 0x01	; 1
    1b74:	60 e0       	ldi	r22, 0x00	; 0
    1b76:	0e 94 0f 1b 	call	0x361e	; 0x361e <HLCD_moveCursor>
		pass_iterator=0;
    1b7a:	1a 8a       	std	Y+18, r1	; 0x12
		trials_Flag++;
    1b7c:	89 89       	ldd	r24, Y+17	; 0x11
    1b7e:	8f 5f       	subi	r24, 0xFF	; 255
    1b80:	89 8b       	std	Y+17, r24	; 0x11
		do{
			/*
			 * Scan from keypad
			 */
			do{
				key = H_KeyPad_u8GetKey();
    1b82:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <H_KeyPad_u8GetKey>
    1b86:	8b 8b       	std	Y+19, r24	; 0x13
			}while(key == NO_KEY);
    1b88:	8b 89       	ldd	r24, Y+19	; 0x13
    1b8a:	8f 3f       	cpi	r24, 0xFF	; 255
    1b8c:	d1 f3       	breq	.-12     	; 0x1b82 <Enter_Password+0x166>
			/*
			 * Store Number at array and display it at LCD
			 */
			temp_pass[pass_iterator] = key;
    1b8e:	8a 89       	ldd	r24, Y+18	; 0x12
    1b90:	28 2f       	mov	r18, r24
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	ce 01       	movw	r24, r28
    1b96:	44 96       	adiw	r24, 0x14	; 20
    1b98:	fc 01       	movw	r30, r24
    1b9a:	e2 0f       	add	r30, r18
    1b9c:	f3 1f       	adc	r31, r19
    1b9e:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba0:	80 83       	st	Z, r24
			HLCD_intgerToString(key);
    1ba2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ba4:	88 2f       	mov	r24, r24
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	0e 94 8a 1b 	call	0x3714	; 0x3714 <HLCD_intgerToString>
			pass_iterator++;
    1bac:	8a 89       	ldd	r24, Y+18	; 0x12
    1bae:	8f 5f       	subi	r24, 0xFF	; 255
    1bb0:	8a 8b       	std	Y+18, r24	; 0x12

		}while(pass_iterator < MAX_DIGITS_PASS);
    1bb2:	8a 89       	ldd	r24, Y+18	; 0x12
    1bb4:	84 30       	cpi	r24, 0x04	; 4
    1bb6:	28 f3       	brcs	.-54     	; 0x1b82 <Enter_Password+0x166>

		state = SUCCESS;
    1bb8:	81 e0       	ldi	r24, 0x01	; 1
    1bba:	8f 87       	std	Y+15, r24	; 0x0f

		for(pass_iterator = 0 ; pass_iterator < MAX_DIGITS_PASS ; pass_iterator++){
    1bbc:	1a 8a       	std	Y+18, r1	; 0x12
    1bbe:	19 c0       	rjmp	.+50     	; 0x1bf2 <Enter_Password+0x1d6>

			if(temp_pass[pass_iterator] != EEPROM_pass[pass_iterator]){
    1bc0:	8a 89       	ldd	r24, Y+18	; 0x12
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	ce 01       	movw	r24, r28
    1bc8:	44 96       	adiw	r24, 0x14	; 20
    1bca:	fc 01       	movw	r30, r24
    1bcc:	e2 0f       	add	r30, r18
    1bce:	f3 1f       	adc	r31, r19
    1bd0:	40 81       	ld	r20, Z
    1bd2:	8a 89       	ldd	r24, Y+18	; 0x12
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	ce 01       	movw	r24, r28
    1bda:	48 96       	adiw	r24, 0x18	; 24
    1bdc:	fc 01       	movw	r30, r24
    1bde:	e2 0f       	add	r30, r18
    1be0:	f3 1f       	adc	r31, r19
    1be2:	80 81       	ld	r24, Z
    1be4:	48 17       	cp	r20, r24
    1be6:	11 f0       	breq	.+4      	; 0x1bec <Enter_Password+0x1d0>
				state = FAILED;
    1be8:	1f 86       	std	Y+15, r1	; 0x0f
    1bea:	06 c0       	rjmp	.+12     	; 0x1bf8 <Enter_Password+0x1dc>

		}while(pass_iterator < MAX_DIGITS_PASS);

		state = SUCCESS;

		for(pass_iterator = 0 ; pass_iterator < MAX_DIGITS_PASS ; pass_iterator++){
    1bec:	8a 89       	ldd	r24, Y+18	; 0x12
    1bee:	8f 5f       	subi	r24, 0xFF	; 255
    1bf0:	8a 8b       	std	Y+18, r24	; 0x12
    1bf2:	8a 89       	ldd	r24, Y+18	; 0x12
    1bf4:	84 30       	cpi	r24, 0x04	; 4
    1bf6:	20 f3       	brcs	.-56     	; 0x1bc0 <Enter_Password+0x1a4>
				state = FAILED;
				break;
			}
		}

	}while( (trials_Flag <3 ) && (state == FAILED) );
    1bf8:	89 89       	ldd	r24, Y+17	; 0x11
    1bfa:	83 30       	cpi	r24, 0x03	; 3
    1bfc:	20 f4       	brcc	.+8      	; 0x1c06 <Enter_Password+0x1ea>
    1bfe:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c00:	88 23       	and	r24, r24
    1c02:	09 f4       	brne	.+2      	; 0x1c06 <Enter_Password+0x1ea>
    1c04:	b0 cf       	rjmp	.-160    	; 0x1b66 <Enter_Password+0x14a>

	return state;
    1c06:	8f 85       	ldd	r24, Y+15	; 0x0f
}
    1c08:	6b 96       	adiw	r28, 0x1b	; 27
    1c0a:	0f b6       	in	r0, 0x3f	; 63
    1c0c:	f8 94       	cli
    1c0e:	de bf       	out	0x3e, r29	; 62
    1c10:	0f be       	out	0x3f, r0	; 63
    1c12:	cd bf       	out	0x3d, r28	; 61
    1c14:	cf 91       	pop	r28
    1c16:	df 91       	pop	r29
    1c18:	08 95       	ret

00001c1a <Open_System>:

void Open_System(void){
    1c1a:	df 93       	push	r29
    1c1c:	cf 93       	push	r28
    1c1e:	0f 92       	push	r0
    1c20:	cd b7       	in	r28, 0x3d	; 61
    1c22:	de b7       	in	r29, 0x3e	; 62
	u8 key = NO_KEY ;
    1c24:	8f ef       	ldi	r24, 0xFF	; 255
    1c26:	89 83       	std	Y+1, r24	; 0x01
	HLCD_clearScrean();
    1c28:	0e 94 ad 1b 	call	0x375a	; 0x375a <HLCD_clearScrean>
	HLCD_displayString("System is Open");
    1c2c:	8b ef       	ldi	r24, 0xFB	; 251
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <HLCD_displayString>
	M_SPI_sendReceiveByte(READY);
    1c34:	8c ec       	ldi	r24, 0xCC	; 204
    1c36:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <M_SPI_sendReceiveByte>
	M_TIMER0_voidSelectPrescaler(PRESC_8);
    1c3a:	82 e0       	ldi	r24, 0x02	; 2
    1c3c:	0e 94 33 12 	call	0x2466	; 0x2466 <M_TIMER0_voidSelectPrescaler>
	do{
		if(M_UART_u8RxcFlagState()){
    1c40:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <M_UART_u8RxcFlagState>
    1c44:	88 23       	and	r24, r24
    1c46:	41 f0       	breq	.+16     	; 0x1c58 <Open_System+0x3e>
			SendChar_Spi = MUART_u8ReturnValReceived();
    1c48:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <MUART_u8ReturnValReceived>
    1c4c:	80 93 46 02 	sts	0x0246, r24
			M_SPI_sendReceiveByte(SendChar_Spi);
    1c50:	80 91 46 02 	lds	r24, 0x0246
    1c54:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <M_SPI_sendReceiveByte>
			else if(Sync_flag == 2){
				Sync_flag=0;
				SendChar_Spi = HLDR_u16GetSensorRead();
			}
		}*/
		key = H_KeyPad_u8GetKey();
    1c58:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <H_KeyPad_u8GetKey>
    1c5c:	89 83       	std	Y+1, r24	; 0x01
	}while(key != '#');
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	83 32       	cpi	r24, 0x23	; 35
    1c62:	71 f7       	brne	.-36     	; 0x1c40 <Open_System+0x26>
	M_TIMER0_voidSelectPrescaler(NO_CLK);
    1c64:	80 e0       	ldi	r24, 0x00	; 0
    1c66:	0e 94 33 12 	call	0x2466	; 0x2466 <M_TIMER0_voidSelectPrescaler>
}
    1c6a:	0f 90       	pop	r0
    1c6c:	cf 91       	pop	r28
    1c6e:	df 91       	pop	r29
    1c70:	08 95       	ret

00001c72 <ISR_TIMER>:
void ISR_TIMER(void){
    1c72:	df 93       	push	r29
    1c74:	cf 93       	push	r28
    1c76:	cd b7       	in	r28, 0x3d	; 61
    1c78:	de b7       	in	r29, 0x3e	; 62
	M_TIMER0_voidSetPreLoad(6);
    1c7a:	86 e0       	ldi	r24, 0x06	; 6
    1c7c:	0e 94 13 12 	call	0x2426	; 0x2426 <M_TIMER0_voidSetPreLoad>
	g_timer++;
    1c80:	80 91 45 02 	lds	r24, 0x0245
    1c84:	8f 5f       	subi	r24, 0xFF	; 255
    1c86:	80 93 45 02 	sts	0x0245, r24
	if(g_timer == 100){
    1c8a:	80 91 45 02 	lds	r24, 0x0245
    1c8e:	84 36       	cpi	r24, 0x64	; 100
    1c90:	49 f4       	brne	.+18     	; 0x1ca4 <ISR_TIMER+0x32>
		SendChar_Spi = LM35_getTemperature();
    1c92:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <LM35_getTemperature>
    1c96:	80 93 46 02 	sts	0x0246, r24
		M_SPI_sendReceiveByte(SendChar_Spi);
    1c9a:	80 91 46 02 	lds	r24, 0x0246
    1c9e:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <M_SPI_sendReceiveByte>
    1ca2:	0e c0       	rjmp	.+28     	; 0x1cc0 <ISR_TIMER+0x4e>
	}else if(g_timer == 120){
    1ca4:	80 91 45 02 	lds	r24, 0x0245
    1ca8:	88 37       	cpi	r24, 0x78	; 120
    1caa:	51 f4       	brne	.+20     	; 0x1cc0 <ISR_TIMER+0x4e>
		g_timer = 0 ;
    1cac:	10 92 45 02 	sts	0x0245, r1
		SendChar_Spi = HLDR_u16GetSensorRead();
    1cb0:	0e 94 b7 1b 	call	0x376e	; 0x376e <HLDR_u16GetSensorRead>
    1cb4:	80 93 46 02 	sts	0x0246, r24
		M_SPI_sendReceiveByte(SendChar_Spi);
    1cb8:	80 91 46 02 	lds	r24, 0x0246
    1cbc:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <M_SPI_sendReceiveByte>
	}
}
    1cc0:	cf 91       	pop	r28
    1cc2:	df 91       	pop	r29
    1cc4:	08 95       	ret

00001cc6 <EEPROM_voidWrite>:
#include "MTWI_interface.h"
#include "EEPROM_interface.h"


void EEPROM_voidWrite(u8  Copy_u8Address, u8 Copy_u8Data)
{
    1cc6:	df 93       	push	r29
    1cc8:	cf 93       	push	r28
    1cca:	00 d0       	rcall	.+0      	; 0x1ccc <EEPROM_voidWrite+0x6>
    1ccc:	cd b7       	in	r28, 0x3d	; 61
    1cce:	de b7       	in	r29, 0x3e	; 62
    1cd0:	89 83       	std	Y+1, r24	; 0x01
    1cd2:	6a 83       	std	Y+2, r22	; 0x02
	MTWI_voidStart();
    1cd4:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <MTWI_voidStart>

	/* send SLAVE ADDRESS with write*/
	MTWI_voidWrite(0xA0);
    1cd8:	80 ea       	ldi	r24, 0xA0	; 160
    1cda:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <MTWI_voidWrite>

	/* Send memory location */
	MTWI_voidWrite(Copy_u8Address);
    1cde:	89 81       	ldd	r24, Y+1	; 0x01
    1ce0:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <MTWI_voidWrite>

	/* Send Data */
	MTWI_voidWrite(Copy_u8Data);
    1ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce6:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <MTWI_voidWrite>

	MTWI_voidStop();
    1cea:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <MTWI_voidStop>

}
    1cee:	0f 90       	pop	r0
    1cf0:	0f 90       	pop	r0
    1cf2:	cf 91       	pop	r28
    1cf4:	df 91       	pop	r29
    1cf6:	08 95       	ret

00001cf8 <EEPROM_voidRead>:

void EEPROM_voidRead(u8 Copy_u8Address , u8 *Copy_pu8Data)
{
    1cf8:	df 93       	push	r29
    1cfa:	cf 93       	push	r28
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <EEPROM_voidRead+0x6>
    1cfe:	0f 92       	push	r0
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
    1d04:	89 83       	std	Y+1, r24	; 0x01
    1d06:	7b 83       	std	Y+3, r23	; 0x03
    1d08:	6a 83       	std	Y+2, r22	; 0x02
	MTWI_voidStart();
    1d0a:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <MTWI_voidStart>

	/* send SLAVE ADDRESS with write*/
	MTWI_voidWrite(0xA0);
    1d0e:	80 ea       	ldi	r24, 0xA0	; 160
    1d10:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <MTWI_voidWrite>

	/* Send memory location */
	MTWI_voidWrite(Copy_u8Address);
    1d14:	89 81       	ldd	r24, Y+1	; 0x01
    1d16:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <MTWI_voidWrite>

	/* Send repeated start */
	MTWI_voidStart();
    1d1a:	0e 94 74 0f 	call	0x1ee8	; 0x1ee8 <MTWI_voidStart>
	/* send SLAVE ADDRESS with READ*/
	MTWI_voidWrite(0xA1);
    1d1e:	81 ea       	ldi	r24, 0xA1	; 161
    1d20:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <MTWI_voidWrite>

	/* master read data byte */
	*Copy_pu8Data = MTWI_u8ReadWithACK();
    1d24:	0e 94 bd 0f 	call	0x1f7a	; 0x1f7a <MTWI_u8ReadWithACK>
    1d28:	ea 81       	ldd	r30, Y+2	; 0x02
    1d2a:	fb 81       	ldd	r31, Y+3	; 0x03
    1d2c:	80 83       	st	Z, r24

	MTWI_voidStop();
    1d2e:	0e 94 e1 0f 	call	0x1fc2	; 0x1fc2 <MTWI_voidStop>

}
    1d32:	0f 90       	pop	r0
    1d34:	0f 90       	pop	r0
    1d36:	0f 90       	pop	r0
    1d38:	cf 91       	pop	r28
    1d3a:	df 91       	pop	r29
    1d3c:	08 95       	ret

00001d3e <H_KeyPad_u8GetKey>:
#include "H_KEYPAD_private.h"
#include "H_KEYPAD_config.h"
#include "H_KEYPAD_interface.h"
//static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number);

u8 H_KeyPad_u8GetKey(void){
    1d3e:	df 93       	push	r29
    1d40:	cf 93       	push	r28
    1d42:	cd b7       	in	r28, 0x3d	; 61
    1d44:	de b7       	in	r29, 0x3e	; 62
    1d46:	a2 97       	sbiw	r28, 0x22	; 34
    1d48:	0f b6       	in	r0, 0x3f	; 63
    1d4a:	f8 94       	cli
    1d4c:	de bf       	out	0x3e, r29	; 62
    1d4e:	0f be       	out	0x3f, r0	; 63
    1d50:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8PressedKey = NO_KEY;
    1d52:	8f ef       	ldi	r24, 0xFF	; 255
    1d54:	8c 83       	std	Y+4, r24	; 0x04
	u8 col = 0;
    1d56:	1b 82       	std	Y+3, r1	; 0x03
	u8 row = 0;
    1d58:	1a 82       	std	Y+2, r1	; 0x02
	u8 KeyIsPressed = NOT_PRESSED;
    1d5a:	81 e0       	ldi	r24, 0x01	; 1
    1d5c:	8d 83       	std	Y+5, r24	; 0x05
	u8 flag = 0;
    1d5e:	19 82       	std	Y+1, r1	; 0x01


	u8 Col_array[COL_SIZE] = {KEYPAD_C0, KEYPAD_C1, KEYPAD_C2, KEYPAD_C3};
    1d60:	87 e0       	ldi	r24, 0x07	; 7
    1d62:	8e 83       	std	Y+6, r24	; 0x06
    1d64:	86 e0       	ldi	r24, 0x06	; 6
    1d66:	8f 83       	std	Y+7, r24	; 0x07
    1d68:	85 e0       	ldi	r24, 0x05	; 5
    1d6a:	88 87       	std	Y+8, r24	; 0x08
    1d6c:	84 e0       	ldi	r24, 0x04	; 4
    1d6e:	89 87       	std	Y+9, r24	; 0x09
	u8 Row_array[ROW_SIZE] = {KEYPAD_R0, KEYPAD_R1, KEYPAD_R2, KEYPAD_R3};
    1d70:	84 e0       	ldi	r24, 0x04	; 4
    1d72:	8a 87       	std	Y+10, r24	; 0x0a
    1d74:	85 e0       	ldi	r24, 0x05	; 5
    1d76:	8b 87       	std	Y+11, r24	; 0x0b
    1d78:	86 e0       	ldi	r24, 0x06	; 6
    1d7a:	8c 87       	std	Y+12, r24	; 0x0c
    1d7c:	87 e0       	ldi	r24, 0x07	; 7
    1d7e:	8d 87       	std	Y+13, r24	; 0x0d

	u8 Keypad_arr[ROW_SIZE][COL_SIZE] = KEYPAD_TYPE;
    1d80:	ce 01       	movw	r24, r28
    1d82:	0e 96       	adiw	r24, 0x0e	; 14
    1d84:	9f 8f       	std	Y+31, r25	; 0x1f
    1d86:	8e 8f       	std	Y+30, r24	; 0x1e
    1d88:	ef e2       	ldi	r30, 0x2F	; 47
    1d8a:	f2 e0       	ldi	r31, 0x02	; 2
    1d8c:	f9 a3       	std	Y+33, r31	; 0x21
    1d8e:	e8 a3       	std	Y+32, r30	; 0x20
    1d90:	f0 e1       	ldi	r31, 0x10	; 16
    1d92:	fa a3       	std	Y+34, r31	; 0x22
    1d94:	e8 a1       	ldd	r30, Y+32	; 0x20
    1d96:	f9 a1       	ldd	r31, Y+33	; 0x21
    1d98:	00 80       	ld	r0, Z
    1d9a:	88 a1       	ldd	r24, Y+32	; 0x20
    1d9c:	99 a1       	ldd	r25, Y+33	; 0x21
    1d9e:	01 96       	adiw	r24, 0x01	; 1
    1da0:	99 a3       	std	Y+33, r25	; 0x21
    1da2:	88 a3       	std	Y+32, r24	; 0x20
    1da4:	ee 8d       	ldd	r30, Y+30	; 0x1e
    1da6:	ff 8d       	ldd	r31, Y+31	; 0x1f
    1da8:	00 82       	st	Z, r0
    1daa:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1dac:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1dae:	01 96       	adiw	r24, 0x01	; 1
    1db0:	9f 8f       	std	Y+31, r25	; 0x1f
    1db2:	8e 8f       	std	Y+30, r24	; 0x1e
    1db4:	9a a1       	ldd	r25, Y+34	; 0x22
    1db6:	91 50       	subi	r25, 0x01	; 1
    1db8:	9a a3       	std	Y+34, r25	; 0x22
    1dba:	ea a1       	ldd	r30, Y+34	; 0x22
    1dbc:	ee 23       	and	r30, r30
    1dbe:	51 f7       	brne	.-44     	; 0x1d94 <H_KeyPad_u8GetKey+0x56>

	for(col = 0; col <COL_SIZE ; col++){
    1dc0:	1b 82       	std	Y+3, r1	; 0x03
    1dc2:	6b c0       	rjmp	.+214    	; 0x1e9a <H_KeyPad_u8GetKey+0x15c>
		MDIO_errorStateSetPinValue(KEYPAD_COL_PORT ,Col_array[col],DIO_LOW);
    1dc4:	8b 81       	ldd	r24, Y+3	; 0x03
    1dc6:	28 2f       	mov	r18, r24
    1dc8:	30 e0       	ldi	r19, 0x00	; 0
    1dca:	ce 01       	movw	r24, r28
    1dcc:	06 96       	adiw	r24, 0x06	; 6
    1dce:	fc 01       	movw	r30, r24
    1dd0:	e2 0f       	add	r30, r18
    1dd2:	f3 1f       	adc	r31, r19
    1dd4:	90 81       	ld	r25, Z
    1dd6:	81 e0       	ldi	r24, 0x01	; 1
    1dd8:	69 2f       	mov	r22, r25
    1dda:	40 e0       	ldi	r20, 0x00	; 0
    1ddc:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <MDIO_errorStateSetPinValue>

		for(row =0 ;row<ROW_SIZE;row++){
    1de0:	1a 82       	std	Y+2, r1	; 0x02
    1de2:	43 c0       	rjmp	.+134    	; 0x1e6a <H_KeyPad_u8GetKey+0x12c>
			MDIO_errorStateGetPinValue(KEYPAD_ROW_PORT, Row_array[row], &KeyIsPressed);
    1de4:	8a 81       	ldd	r24, Y+2	; 0x02
    1de6:	28 2f       	mov	r18, r24
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	ce 01       	movw	r24, r28
    1dec:	0a 96       	adiw	r24, 0x0a	; 10
    1dee:	fc 01       	movw	r30, r24
    1df0:	e2 0f       	add	r30, r18
    1df2:	f3 1f       	adc	r31, r19
    1df4:	90 81       	ld	r25, Z
    1df6:	9e 01       	movw	r18, r28
    1df8:	2b 5f       	subi	r18, 0xFB	; 251
    1dfa:	3f 4f       	sbci	r19, 0xFF	; 255
    1dfc:	84 e0       	ldi	r24, 0x04	; 4
    1dfe:	69 2f       	mov	r22, r25
    1e00:	a9 01       	movw	r20, r18
    1e02:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <MDIO_errorStateGetPinValue>
			if(KeyIsPressed == PRESSED)
    1e06:	8d 81       	ldd	r24, Y+5	; 0x05
    1e08:	88 23       	and	r24, r24
    1e0a:	61 f5       	brne	.+88     	; 0x1e64 <H_KeyPad_u8GetKey+0x126>
    1e0c:	11 c0       	rjmp	.+34     	; 0x1e30 <H_KeyPad_u8GetKey+0xf2>
			{
				/* For busy wait to avoid bouncing */
				while(KeyIsPressed == PRESSED)
				{
					MDIO_errorStateGetPinValue(KEYPAD_ROW_PORT, Row_array[row], &KeyIsPressed);
    1e0e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e10:	28 2f       	mov	r18, r24
    1e12:	30 e0       	ldi	r19, 0x00	; 0
    1e14:	ce 01       	movw	r24, r28
    1e16:	0a 96       	adiw	r24, 0x0a	; 10
    1e18:	fc 01       	movw	r30, r24
    1e1a:	e2 0f       	add	r30, r18
    1e1c:	f3 1f       	adc	r31, r19
    1e1e:	90 81       	ld	r25, Z
    1e20:	9e 01       	movw	r18, r28
    1e22:	2b 5f       	subi	r18, 0xFB	; 251
    1e24:	3f 4f       	sbci	r19, 0xFF	; 255
    1e26:	84 e0       	ldi	r24, 0x04	; 4
    1e28:	69 2f       	mov	r22, r25
    1e2a:	a9 01       	movw	r20, r18
    1e2c:	0e 94 f8 20 	call	0x41f0	; 0x41f0 <MDIO_errorStateGetPinValue>
		for(row =0 ;row<ROW_SIZE;row++){
			MDIO_errorStateGetPinValue(KEYPAD_ROW_PORT, Row_array[row], &KeyIsPressed);
			if(KeyIsPressed == PRESSED)
			{
				/* For busy wait to avoid bouncing */
				while(KeyIsPressed == PRESSED)
    1e30:	8d 81       	ldd	r24, Y+5	; 0x05
    1e32:	88 23       	and	r24, r24
    1e34:	61 f3       	breq	.-40     	; 0x1e0e <H_KeyPad_u8GetKey+0xd0>
				{
					MDIO_errorStateGetPinValue(KEYPAD_ROW_PORT, Row_array[row], &KeyIsPressed);
				}
				Local_u8PressedKey = Keypad_arr[row][col];
    1e36:	8a 81       	ldd	r24, Y+2	; 0x02
    1e38:	28 2f       	mov	r18, r24
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e3e:	48 2f       	mov	r20, r24
    1e40:	50 e0       	ldi	r21, 0x00	; 0
    1e42:	22 0f       	add	r18, r18
    1e44:	33 1f       	adc	r19, r19
    1e46:	22 0f       	add	r18, r18
    1e48:	33 1f       	adc	r19, r19
    1e4a:	ce 01       	movw	r24, r28
    1e4c:	01 96       	adiw	r24, 0x01	; 1
    1e4e:	82 0f       	add	r24, r18
    1e50:	93 1f       	adc	r25, r19
    1e52:	84 0f       	add	r24, r20
    1e54:	95 1f       	adc	r25, r21
    1e56:	fc 01       	movw	r30, r24
    1e58:	3d 96       	adiw	r30, 0x0d	; 13
    1e5a:	80 81       	ld	r24, Z
    1e5c:	8c 83       	std	Y+4, r24	; 0x04
				flag = 1;
    1e5e:	81 e0       	ldi	r24, 0x01	; 1
    1e60:	89 83       	std	Y+1, r24	; 0x01
    1e62:	07 c0       	rjmp	.+14     	; 0x1e72 <H_KeyPad_u8GetKey+0x134>
	u8 Keypad_arr[ROW_SIZE][COL_SIZE] = KEYPAD_TYPE;

	for(col = 0; col <COL_SIZE ; col++){
		MDIO_errorStateSetPinValue(KEYPAD_COL_PORT ,Col_array[col],DIO_LOW);

		for(row =0 ;row<ROW_SIZE;row++){
    1e64:	8a 81       	ldd	r24, Y+2	; 0x02
    1e66:	8f 5f       	subi	r24, 0xFF	; 255
    1e68:	8a 83       	std	Y+2, r24	; 0x02
    1e6a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6c:	84 30       	cpi	r24, 0x04	; 4
    1e6e:	08 f4       	brcc	.+2      	; 0x1e72 <H_KeyPad_u8GetKey+0x134>
    1e70:	b9 cf       	rjmp	.-142    	; 0x1de4 <H_KeyPad_u8GetKey+0xa6>
			else
			{

			}
		}
		MDIO_errorStateSetPinValue(KEYPAD_COL_PORT, Col_array[col], DIO_HIGH);									//set the keypad columns to be low
    1e72:	8b 81       	ldd	r24, Y+3	; 0x03
    1e74:	28 2f       	mov	r18, r24
    1e76:	30 e0       	ldi	r19, 0x00	; 0
    1e78:	ce 01       	movw	r24, r28
    1e7a:	06 96       	adiw	r24, 0x06	; 6
    1e7c:	fc 01       	movw	r30, r24
    1e7e:	e2 0f       	add	r30, r18
    1e80:	f3 1f       	adc	r31, r19
    1e82:	90 81       	ld	r25, Z
    1e84:	81 e0       	ldi	r24, 0x01	; 1
    1e86:	69 2f       	mov	r22, r25
    1e88:	41 e0       	ldi	r20, 0x01	; 1
    1e8a:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <MDIO_errorStateSetPinValue>
		if(flag)
    1e8e:	89 81       	ldd	r24, Y+1	; 0x01
    1e90:	88 23       	and	r24, r24
    1e92:	39 f4       	brne	.+14     	; 0x1ea2 <H_KeyPad_u8GetKey+0x164>
	u8 Col_array[COL_SIZE] = {KEYPAD_C0, KEYPAD_C1, KEYPAD_C2, KEYPAD_C3};
	u8 Row_array[ROW_SIZE] = {KEYPAD_R0, KEYPAD_R1, KEYPAD_R2, KEYPAD_R3};

	u8 Keypad_arr[ROW_SIZE][COL_SIZE] = KEYPAD_TYPE;

	for(col = 0; col <COL_SIZE ; col++){
    1e94:	8b 81       	ldd	r24, Y+3	; 0x03
    1e96:	8f 5f       	subi	r24, 0xFF	; 255
    1e98:	8b 83       	std	Y+3, r24	; 0x03
    1e9a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e9c:	84 30       	cpi	r24, 0x04	; 4
    1e9e:	08 f4       	brcc	.+2      	; 0x1ea2 <H_KeyPad_u8GetKey+0x164>
    1ea0:	91 cf       	rjmp	.-222    	; 0x1dc4 <H_KeyPad_u8GetKey+0x86>
		{
			break;
		}
		else{}
	}
	return Local_u8PressedKey;
    1ea2:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1ea4:	a2 96       	adiw	r28, 0x22	; 34
    1ea6:	0f b6       	in	r0, 0x3f	; 63
    1ea8:	f8 94       	cli
    1eaa:	de bf       	out	0x3e, r29	; 62
    1eac:	0f be       	out	0x3f, r0	; 63
    1eae:	cd bf       	out	0x3d, r28	; 61
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	08 95       	ret

00001eb6 <MTWI_voidInit>:
#include "MTWI_config.h"



void MTWI_voidInit(void)
{
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	cd b7       	in	r28, 0x3d	; 61
    1ebc:	de b7       	in	r29, 0x3e	; 62
	/* Set Master | Slave Address */
	TWAR = MY_ADDRESS << 1;
    1ebe:	e2 e2       	ldi	r30, 0x22	; 34
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	82 e0       	ldi	r24, 0x02	; 2
    1ec4:	80 83       	st	Z, r24
	/*Set PRESCALER Value */
#if TWI_PRESCALER == TWI_DIV_1
	TWSR = 0b00000000;
    1ec6:	e1 e2       	ldi	r30, 0x21	; 33
    1ec8:	f0 e0       	ldi	r31, 0x00	; 0
    1eca:	10 82       	st	Z, r1
#elif TWI_PRESCALER == TWI_DIV_64
	TWSR = 0b00000011;

#endif
	/*Set PRESCALER TWBR Value */
	TWBR = TWBR_VALUE;
    1ecc:	e0 e2       	ldi	r30, 0x20	; 32
    1ece:	f0 e0       	ldi	r31, 0x00	; 0
    1ed0:	82 e0       	ldi	r24, 0x02	; 2
    1ed2:	80 83       	st	Z, r24


	/*Set TWEN to enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    1ed4:	a6 e5       	ldi	r26, 0x56	; 86
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	e6 e5       	ldi	r30, 0x56	; 86
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	84 60       	ori	r24, 0x04	; 4
    1ee0:	8c 93       	st	X, r24
}
    1ee2:	cf 91       	pop	r28
    1ee4:	df 91       	pop	r29
    1ee6:	08 95       	ret

00001ee8 <MTWI_voidStart>:

void MTWI_voidStart(void)
{
    1ee8:	df 93       	push	r29
    1eea:	cf 93       	push	r28
    1eec:	cd b7       	in	r28, 0x3d	; 61
    1eee:	de b7       	in	r29, 0x3e	; 62
	/* set TWSTA to start condition */
	SET_BIT(TWCR , TWCR_TWSTA);
    1ef0:	a6 e5       	ldi	r26, 0x56	; 86
    1ef2:	b0 e0       	ldi	r27, 0x00	; 0
    1ef4:	e6 e5       	ldi	r30, 0x56	; 86
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	80 81       	ld	r24, Z
    1efa:	80 62       	ori	r24, 0x20	; 32
    1efc:	8c 93       	st	X, r24
	/* CLR TWI flag */
	SET_BIT(TWCR , TWCR_TWINT);
    1efe:	a6 e5       	ldi	r26, 0x56	; 86
    1f00:	b0 e0       	ldi	r27, 0x00	; 0
    1f02:	e6 e5       	ldi	r30, 0x56	; 86
    1f04:	f0 e0       	ldi	r31, 0x00	; 0
    1f06:	80 81       	ld	r24, Z
    1f08:	80 68       	ori	r24, 0x80	; 128
    1f0a:	8c 93       	st	X, r24
	/* SET TWEN to enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    1f0c:	a6 e5       	ldi	r26, 0x56	; 86
    1f0e:	b0 e0       	ldi	r27, 0x00	; 0
    1f10:	e6 e5       	ldi	r30, 0x56	; 86
    1f12:	f0 e0       	ldi	r31, 0x00	; 0
    1f14:	80 81       	ld	r24, Z
    1f16:	84 60       	ori	r24, 0x04	; 4
    1f18:	8c 93       	st	X, r24

	/* busy wait for TWINT */
	while((GET_BIT(TWCR , TWCR_TWINT)) == 0);
    1f1a:	e6 e5       	ldi	r30, 0x56	; 86
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	88 23       	and	r24, r24
    1f22:	dc f7       	brge	.-10     	; 0x1f1a <MTWI_voidStart+0x32>


}
    1f24:	cf 91       	pop	r28
    1f26:	df 91       	pop	r29
    1f28:	08 95       	ret

00001f2a <MTWI_voidWrite>:

void MTWI_voidWrite(u8 Copy_u8Data)
{
    1f2a:	df 93       	push	r29
    1f2c:	cf 93       	push	r28
    1f2e:	0f 92       	push	r0
    1f30:	cd b7       	in	r28, 0x3d	; 61
    1f32:	de b7       	in	r29, 0x3e	; 62
    1f34:	89 83       	std	Y+1, r24	; 0x01
	/* Set Data | Address to TWDR */
	TWDR = Copy_u8Data;
    1f36:	e3 e2       	ldi	r30, 0x23	; 35
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
    1f3c:	80 83       	st	Z, r24

	/* CLR start condition */
	CLEAR_BIT(TWCR , TWCR_TWSTA);
    1f3e:	a6 e5       	ldi	r26, 0x56	; 86
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	e6 e5       	ldi	r30, 0x56	; 86
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	80 81       	ld	r24, Z
    1f48:	8f 7d       	andi	r24, 0xDF	; 223
    1f4a:	8c 93       	st	X, r24
	/* CLR TWI flag */
	SET_BIT(TWCR , TWCR_TWINT);
    1f4c:	a6 e5       	ldi	r26, 0x56	; 86
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	e6 e5       	ldi	r30, 0x56	; 86
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	80 81       	ld	r24, Z
    1f56:	80 68       	ori	r24, 0x80	; 128
    1f58:	8c 93       	st	X, r24
	/* SET TWEN to enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    1f5a:	a6 e5       	ldi	r26, 0x56	; 86
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	e6 e5       	ldi	r30, 0x56	; 86
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	84 60       	ori	r24, 0x04	; 4
    1f66:	8c 93       	st	X, r24

	/* busy wait for TWINT */
	while((GET_BIT(TWCR , TWCR_TWINT)) == 0);
    1f68:	e6 e5       	ldi	r30, 0x56	; 86
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	88 23       	and	r24, r24
    1f70:	dc f7       	brge	.-10     	; 0x1f68 <MTWI_voidWrite+0x3e>

}
    1f72:	0f 90       	pop	r0
    1f74:	cf 91       	pop	r28
    1f76:	df 91       	pop	r29
    1f78:	08 95       	ret

00001f7a <MTWI_u8ReadWithACK>:

u8 MTWI_u8ReadWithACK(void)
{
    1f7a:	df 93       	push	r29
    1f7c:	cf 93       	push	r28
    1f7e:	cd b7       	in	r28, 0x3d	; 61
    1f80:	de b7       	in	r29, 0x3e	; 62
	/* CLR start condition */
	CLEAR_BIT(TWCR , TWCR_TWSTA);
    1f82:	a6 e5       	ldi	r26, 0x56	; 86
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	e6 e5       	ldi	r30, 0x56	; 86
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	80 81       	ld	r24, Z
    1f8c:	8f 7d       	andi	r24, 0xDF	; 223
    1f8e:	8c 93       	st	X, r24
	/* CLR TWI flag */
	SET_BIT(TWCR , TWCR_TWINT);
    1f90:	a6 e5       	ldi	r26, 0x56	; 86
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	e6 e5       	ldi	r30, 0x56	; 86
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	80 81       	ld	r24, Z
    1f9a:	80 68       	ori	r24, 0x80	; 128
    1f9c:	8c 93       	st	X, r24
	/* SET TWEN to enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    1f9e:	a6 e5       	ldi	r26, 0x56	; 86
    1fa0:	b0 e0       	ldi	r27, 0x00	; 0
    1fa2:	e6 e5       	ldi	r30, 0x56	; 86
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	84 60       	ori	r24, 0x04	; 4
    1faa:	8c 93       	st	X, r24



	/* busy wait for TWINT */
	while((GET_BIT(TWCR , TWCR_TWINT)) == 0);
    1fac:	e6 e5       	ldi	r30, 0x56	; 86
    1fae:	f0 e0       	ldi	r31, 0x00	; 0
    1fb0:	80 81       	ld	r24, Z
    1fb2:	88 23       	and	r24, r24
    1fb4:	dc f7       	brge	.-10     	; 0x1fac <MTWI_u8ReadWithACK+0x32>

	return TWDR;
    1fb6:	e3 e2       	ldi	r30, 0x23	; 35
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 81       	ld	r24, Z
}
    1fbc:	cf 91       	pop	r28
    1fbe:	df 91       	pop	r29
    1fc0:	08 95       	ret

00001fc2 <MTWI_voidStop>:

void MTWI_voidStop(void)
{
    1fc2:	df 93       	push	r29
    1fc4:	cf 93       	push	r28
    1fc6:	cd b7       	in	r28, 0x3d	; 61
    1fc8:	de b7       	in	r29, 0x3e	; 62
	/* Set TWSTO to make stop condition */
	SET_BIT(TWCR , TWCR_TWSTO);
    1fca:	a6 e5       	ldi	r26, 0x56	; 86
    1fcc:	b0 e0       	ldi	r27, 0x00	; 0
    1fce:	e6 e5       	ldi	r30, 0x56	; 86
    1fd0:	f0 e0       	ldi	r31, 0x00	; 0
    1fd2:	80 81       	ld	r24, Z
    1fd4:	80 61       	ori	r24, 0x10	; 16
    1fd6:	8c 93       	st	X, r24
	/* CLR TWI flag */
	SET_BIT(TWCR , TWCR_TWINT);
    1fd8:	a6 e5       	ldi	r26, 0x56	; 86
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e6 e5       	ldi	r30, 0x56	; 86
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	80 68       	ori	r24, 0x80	; 128
    1fe4:	8c 93       	st	X, r24
	/* SET TWEN to enable TWI */
	SET_BIT(TWCR , TWCR_TWEN);
    1fe6:	a6 e5       	ldi	r26, 0x56	; 86
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	e6 e5       	ldi	r30, 0x56	; 86
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 81       	ld	r24, Z
    1ff0:	84 60       	ori	r24, 0x04	; 4
    1ff2:	8c 93       	st	X, r24

}
    1ff4:	cf 91       	pop	r28
    1ff6:	df 91       	pop	r29
    1ff8:	08 95       	ret

00001ffa <MTWI_u8GetStatus>:

u8 MTWI_u8GetStatus(void)
{
    1ffa:	df 93       	push	r29
    1ffc:	cf 93       	push	r28
    1ffe:	cd b7       	in	r28, 0x3d	; 61
    2000:	de b7       	in	r29, 0x3e	; 62
	return (TWSR & 0xF8);
    2002:	e1 e2       	ldi	r30, 0x21	; 33
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	88 7f       	andi	r24, 0xF8	; 248
}
    200a:	cf 91       	pop	r28
    200c:	df 91       	pop	r29
    200e:	08 95       	ret

00002010 <M_TIMER0_voidInit>:
 ************************************************************************************************/
/*
 * Function to Initialize Timer0
 */

void M_TIMER0_voidInit(const TIMER0_Config *timer_config){
    2010:	df 93       	push	r29
    2012:	cf 93       	push	r28
    2014:	00 d0       	rcall	.+0      	; 0x2016 <M_TIMER0_voidInit+0x6>
    2016:	00 d0       	rcall	.+0      	; 0x2018 <M_TIMER0_voidInit+0x8>
    2018:	cd b7       	in	r28, 0x3d	; 61
    201a:	de b7       	in	r29, 0x3e	; 62
    201c:	9a 83       	std	Y+2, r25	; 0x02
    201e:	89 83       	std	Y+1, r24	; 0x01
#ifdef PREV
	TCNT0 = timer_config->TCNT0_value ;
    2020:	a2 e5       	ldi	r26, 0x52	; 82
    2022:	b0 e0       	ldi	r27, 0x00	; 0
    2024:	e9 81       	ldd	r30, Y+1	; 0x01
    2026:	fa 81       	ldd	r31, Y+2	; 0x02
    2028:	82 81       	ldd	r24, Z+2	; 0x02
    202a:	8c 93       	st	X, r24
	/* Configure Wave generation bits based on user selection */
	if(timer_config->timer0_mode == TIMER0_NORMAL_MODE) {
    202c:	e9 81       	ldd	r30, Y+1	; 0x01
    202e:	fa 81       	ldd	r31, Y+2	; 0x02
    2030:	80 81       	ld	r24, Z
    2032:	88 23       	and	r24, r24
    2034:	b1 f4       	brne	.+44     	; 0x2062 <M_TIMER0_voidInit+0x52>
		CLEAR_BIT(TCCR0,TCCR0_WGM00);
    2036:	a3 e5       	ldi	r26, 0x53	; 83
    2038:	b0 e0       	ldi	r27, 0x00	; 0
    203a:	e3 e5       	ldi	r30, 0x53	; 83
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	80 81       	ld	r24, Z
    2040:	8f 7b       	andi	r24, 0xBF	; 191
    2042:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_WGM01);
    2044:	a3 e5       	ldi	r26, 0x53	; 83
    2046:	b0 e0       	ldi	r27, 0x00	; 0
    2048:	e3 e5       	ldi	r30, 0x53	; 83
    204a:	f0 e0       	ldi	r31, 0x00	; 0
    204c:	80 81       	ld	r24, Z
    204e:	87 7f       	andi	r24, 0xF7	; 247
    2050:	8c 93       	st	X, r24

		/* Enable Interrupt bit for this mode */
		SET_BIT(TIMSK,TIMSK_TOIE0);
    2052:	a9 e5       	ldi	r26, 0x59	; 89
    2054:	b0 e0       	ldi	r27, 0x00	; 0
    2056:	e9 e5       	ldi	r30, 0x59	; 89
    2058:	f0 e0       	ldi	r31, 0x00	; 0
    205a:	80 81       	ld	r24, Z
    205c:	81 60       	ori	r24, 0x01	; 1
    205e:	8c 93       	st	X, r24
    2060:	c7 c0       	rjmp	.+398    	; 0x21f0 <M_TIMER0_voidInit+0x1e0>
	}
	else if(timer_config->timer0_mode == TIMER0_CTC_MODE){
    2062:	e9 81       	ldd	r30, Y+1	; 0x01
    2064:	fa 81       	ldd	r31, Y+2	; 0x02
    2066:	80 81       	ld	r24, Z
    2068:	82 30       	cpi	r24, 0x02	; 2
    206a:	09 f0       	breq	.+2      	; 0x206e <M_TIMER0_voidInit+0x5e>
    206c:	6c c0       	rjmp	.+216    	; 0x2146 <M_TIMER0_voidInit+0x136>
		CLEAR_BIT(TCCR0,TCCR0_WGM00);
    206e:	a3 e5       	ldi	r26, 0x53	; 83
    2070:	b0 e0       	ldi	r27, 0x00	; 0
    2072:	e3 e5       	ldi	r30, 0x53	; 83
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	80 81       	ld	r24, Z
    2078:	8f 7b       	andi	r24, 0xBF	; 191
    207a:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_WGM01);
    207c:	a3 e5       	ldi	r26, 0x53	; 83
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	e3 e5       	ldi	r30, 0x53	; 83
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	88 60       	ori	r24, 0x08	; 8
    2088:	8c 93       	st	X, r24

		SET_BIT(TIMSK,TIMSK_OCIE0);
    208a:	a9 e5       	ldi	r26, 0x59	; 89
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	e9 e5       	ldi	r30, 0x59	; 89
    2090:	f0 e0       	ldi	r31, 0x00	; 0
    2092:	80 81       	ld	r24, Z
    2094:	82 60       	ori	r24, 0x02	; 2
    2096:	8c 93       	st	X, r24
		OCR0 = timer_config->OCR_value;
    2098:	ac e5       	ldi	r26, 0x5C	; 92
    209a:	b0 e0       	ldi	r27, 0x00	; 0
    209c:	e9 81       	ldd	r30, Y+1	; 0x01
    209e:	fa 81       	ldd	r31, Y+2	; 0x02
    20a0:	83 81       	ldd	r24, Z+3	; 0x03
    20a2:	8c 93       	st	X, r24
		/* ******************* To configure operation mode********************* */
		if(timer_config->CTC_nonPWM_mode == TIMER0_NORMAL_OP){
    20a4:	e9 81       	ldd	r30, Y+1	; 0x01
    20a6:	fa 81       	ldd	r31, Y+2	; 0x02
    20a8:	84 81       	ldd	r24, Z+4	; 0x04
    20aa:	88 23       	and	r24, r24
    20ac:	79 f4       	brne	.+30     	; 0x20cc <M_TIMER0_voidInit+0xbc>
			CLEAR_BIT(TCCR0,TCCR0_COM00);
    20ae:	a3 e5       	ldi	r26, 0x53	; 83
    20b0:	b0 e0       	ldi	r27, 0x00	; 0
    20b2:	e3 e5       	ldi	r30, 0x53	; 83
    20b4:	f0 e0       	ldi	r31, 0x00	; 0
    20b6:	80 81       	ld	r24, Z
    20b8:	8f 7e       	andi	r24, 0xEF	; 239
    20ba:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,TCCR0_COM01);
    20bc:	a3 e5       	ldi	r26, 0x53	; 83
    20be:	b0 e0       	ldi	r27, 0x00	; 0
    20c0:	e3 e5       	ldi	r30, 0x53	; 83
    20c2:	f0 e0       	ldi	r31, 0x00	; 0
    20c4:	80 81       	ld	r24, Z
    20c6:	8f 7d       	andi	r24, 0xDF	; 223
    20c8:	8c 93       	st	X, r24
    20ca:	92 c0       	rjmp	.+292    	; 0x21f0 <M_TIMER0_voidInit+0x1e0>
		}
		else if(timer_config->CTC_nonPWM_mode == TIMER0_TOGGLE_OC0_OP){
    20cc:	e9 81       	ldd	r30, Y+1	; 0x01
    20ce:	fa 81       	ldd	r31, Y+2	; 0x02
    20d0:	84 81       	ldd	r24, Z+4	; 0x04
    20d2:	81 30       	cpi	r24, 0x01	; 1
    20d4:	79 f4       	brne	.+30     	; 0x20f4 <M_TIMER0_voidInit+0xe4>
			SET_BIT(TCCR0,TCCR0_COM00);
    20d6:	a3 e5       	ldi	r26, 0x53	; 83
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	e3 e5       	ldi	r30, 0x53	; 83
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	80 81       	ld	r24, Z
    20e0:	80 61       	ori	r24, 0x10	; 16
    20e2:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,TCCR0_COM01);
    20e4:	a3 e5       	ldi	r26, 0x53	; 83
    20e6:	b0 e0       	ldi	r27, 0x00	; 0
    20e8:	e3 e5       	ldi	r30, 0x53	; 83
    20ea:	f0 e0       	ldi	r31, 0x00	; 0
    20ec:	80 81       	ld	r24, Z
    20ee:	8f 7d       	andi	r24, 0xDF	; 223
    20f0:	8c 93       	st	X, r24
    20f2:	7e c0       	rjmp	.+252    	; 0x21f0 <M_TIMER0_voidInit+0x1e0>
		}
		else if(timer_config->CTC_nonPWM_mode == TIMER0_CLEAR_OC0_OP){
    20f4:	e9 81       	ldd	r30, Y+1	; 0x01
    20f6:	fa 81       	ldd	r31, Y+2	; 0x02
    20f8:	84 81       	ldd	r24, Z+4	; 0x04
    20fa:	82 30       	cpi	r24, 0x02	; 2
    20fc:	79 f4       	brne	.+30     	; 0x211c <M_TIMER0_voidInit+0x10c>
			CLEAR_BIT(TCCR0,TCCR0_COM00);
    20fe:	a3 e5       	ldi	r26, 0x53	; 83
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	e3 e5       	ldi	r30, 0x53	; 83
    2104:	f0 e0       	ldi	r31, 0x00	; 0
    2106:	80 81       	ld	r24, Z
    2108:	8f 7e       	andi	r24, 0xEF	; 239
    210a:	8c 93       	st	X, r24
			SET_BIT(TCCR0,TCCR0_COM01);
    210c:	a3 e5       	ldi	r26, 0x53	; 83
    210e:	b0 e0       	ldi	r27, 0x00	; 0
    2110:	e3 e5       	ldi	r30, 0x53	; 83
    2112:	f0 e0       	ldi	r31, 0x00	; 0
    2114:	80 81       	ld	r24, Z
    2116:	80 62       	ori	r24, 0x20	; 32
    2118:	8c 93       	st	X, r24
    211a:	6a c0       	rjmp	.+212    	; 0x21f0 <M_TIMER0_voidInit+0x1e0>
		}
		else if(timer_config->CTC_nonPWM_mode == TIMER0_SET_OC0_OP){
    211c:	e9 81       	ldd	r30, Y+1	; 0x01
    211e:	fa 81       	ldd	r31, Y+2	; 0x02
    2120:	84 81       	ldd	r24, Z+4	; 0x04
    2122:	83 30       	cpi	r24, 0x03	; 3
    2124:	09 f0       	breq	.+2      	; 0x2128 <M_TIMER0_voidInit+0x118>
    2126:	64 c0       	rjmp	.+200    	; 0x21f0 <M_TIMER0_voidInit+0x1e0>
			SET_BIT(TCCR0,TCCR0_COM00);
    2128:	a3 e5       	ldi	r26, 0x53	; 83
    212a:	b0 e0       	ldi	r27, 0x00	; 0
    212c:	e3 e5       	ldi	r30, 0x53	; 83
    212e:	f0 e0       	ldi	r31, 0x00	; 0
    2130:	80 81       	ld	r24, Z
    2132:	80 61       	ori	r24, 0x10	; 16
    2134:	8c 93       	st	X, r24
			SET_BIT(TCCR0,TCCR0_COM01);
    2136:	a3 e5       	ldi	r26, 0x53	; 83
    2138:	b0 e0       	ldi	r27, 0x00	; 0
    213a:	e3 e5       	ldi	r30, 0x53	; 83
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	80 62       	ori	r24, 0x20	; 32
    2142:	8c 93       	st	X, r24
    2144:	55 c0       	rjmp	.+170    	; 0x21f0 <M_TIMER0_voidInit+0x1e0>
		}
	}
	else if(timer_config->timer0_mode == TIMER0_PWM_FAST_MODE){
    2146:	e9 81       	ldd	r30, Y+1	; 0x01
    2148:	fa 81       	ldd	r31, Y+2	; 0x02
    214a:	80 81       	ld	r24, Z
    214c:	83 30       	cpi	r24, 0x03	; 3
    214e:	09 f0       	breq	.+2      	; 0x2152 <M_TIMER0_voidInit+0x142>
    2150:	4f c0       	rjmp	.+158    	; 0x21f0 <M_TIMER0_voidInit+0x1e0>
		SET_BIT(TCCR0,TCCR0_WGM00);
    2152:	a3 e5       	ldi	r26, 0x53	; 83
    2154:	b0 e0       	ldi	r27, 0x00	; 0
    2156:	e3 e5       	ldi	r30, 0x53	; 83
    2158:	f0 e0       	ldi	r31, 0x00	; 0
    215a:	80 81       	ld	r24, Z
    215c:	80 64       	ori	r24, 0x40	; 64
    215e:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_WGM01);
    2160:	a3 e5       	ldi	r26, 0x53	; 83
    2162:	b0 e0       	ldi	r27, 0x00	; 0
    2164:	e3 e5       	ldi	r30, 0x53	; 83
    2166:	f0 e0       	ldi	r31, 0x00	; 0
    2168:	80 81       	ld	r24, Z
    216a:	88 60       	ori	r24, 0x08	; 8
    216c:	8c 93       	st	X, r24

		OCR0 = timer_config->OCR_value;
    216e:	ac e5       	ldi	r26, 0x5C	; 92
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	e9 81       	ldd	r30, Y+1	; 0x01
    2174:	fa 81       	ldd	r31, Y+2	; 0x02
    2176:	83 81       	ldd	r24, Z+3	; 0x03
    2178:	8c 93       	st	X, r24
		/* ******************* To configure operation mode********************* */
		if(timer_config->PWM_mode == TIMER0_PWM_NORMAL_OP){
    217a:	e9 81       	ldd	r30, Y+1	; 0x01
    217c:	fa 81       	ldd	r31, Y+2	; 0x02
    217e:	85 81       	ldd	r24, Z+5	; 0x05
    2180:	88 23       	and	r24, r24
    2182:	79 f4       	brne	.+30     	; 0x21a2 <M_TIMER0_voidInit+0x192>
			CLEAR_BIT(TCCR0,TCCR0_COM00);
    2184:	a3 e5       	ldi	r26, 0x53	; 83
    2186:	b0 e0       	ldi	r27, 0x00	; 0
    2188:	e3 e5       	ldi	r30, 0x53	; 83
    218a:	f0 e0       	ldi	r31, 0x00	; 0
    218c:	80 81       	ld	r24, Z
    218e:	8f 7e       	andi	r24, 0xEF	; 239
    2190:	8c 93       	st	X, r24
			CLEAR_BIT(TCCR0,TCCR0_COM01);
    2192:	a3 e5       	ldi	r26, 0x53	; 83
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	e3 e5       	ldi	r30, 0x53	; 83
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	8f 7d       	andi	r24, 0xDF	; 223
    219e:	8c 93       	st	X, r24
    21a0:	27 c0       	rjmp	.+78     	; 0x21f0 <M_TIMER0_voidInit+0x1e0>
		}
		else if(timer_config->PWM_mode == TIMER0_NON_INVERTING_MODE){
    21a2:	e9 81       	ldd	r30, Y+1	; 0x01
    21a4:	fa 81       	ldd	r31, Y+2	; 0x02
    21a6:	85 81       	ldd	r24, Z+5	; 0x05
    21a8:	82 30       	cpi	r24, 0x02	; 2
    21aa:	79 f4       	brne	.+30     	; 0x21ca <M_TIMER0_voidInit+0x1ba>
			CLEAR_BIT(TCCR0,TCCR0_COM00);
    21ac:	a3 e5       	ldi	r26, 0x53	; 83
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	e3 e5       	ldi	r30, 0x53	; 83
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	8f 7e       	andi	r24, 0xEF	; 239
    21b8:	8c 93       	st	X, r24
			SET_BIT(TCCR0,TCCR0_COM01);
    21ba:	a3 e5       	ldi	r26, 0x53	; 83
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e3 e5       	ldi	r30, 0x53	; 83
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	80 62       	ori	r24, 0x20	; 32
    21c6:	8c 93       	st	X, r24
    21c8:	13 c0       	rjmp	.+38     	; 0x21f0 <M_TIMER0_voidInit+0x1e0>
		}
		else if(timer_config->PWM_mode == TIMER0_INVERTING_MODE){
    21ca:	e9 81       	ldd	r30, Y+1	; 0x01
    21cc:	fa 81       	ldd	r31, Y+2	; 0x02
    21ce:	85 81       	ldd	r24, Z+5	; 0x05
    21d0:	83 30       	cpi	r24, 0x03	; 3
    21d2:	71 f4       	brne	.+28     	; 0x21f0 <M_TIMER0_voidInit+0x1e0>
			SET_BIT(TCCR0,TCCR0_COM00);
    21d4:	a3 e5       	ldi	r26, 0x53	; 83
    21d6:	b0 e0       	ldi	r27, 0x00	; 0
    21d8:	e3 e5       	ldi	r30, 0x53	; 83
    21da:	f0 e0       	ldi	r31, 0x00	; 0
    21dc:	80 81       	ld	r24, Z
    21de:	80 61       	ori	r24, 0x10	; 16
    21e0:	8c 93       	st	X, r24
			SET_BIT(TCCR0,TCCR0_COM01);
    21e2:	a3 e5       	ldi	r26, 0x53	; 83
    21e4:	b0 e0       	ldi	r27, 0x00	; 0
    21e6:	e3 e5       	ldi	r30, 0x53	; 83
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	80 81       	ld	r24, Z
    21ec:	80 62       	ori	r24, 0x20	; 32
    21ee:	8c 93       	st	X, r24
		}
	}
/*   Select prescaler    */
	switch(timer_config->select_prescaler){
    21f0:	e9 81       	ldd	r30, Y+1	; 0x01
    21f2:	fa 81       	ldd	r31, Y+2	; 0x02
    21f4:	81 81       	ldd	r24, Z+1	; 0x01
    21f6:	28 2f       	mov	r18, r24
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	3c 83       	std	Y+4, r19	; 0x04
    21fc:	2b 83       	std	Y+3, r18	; 0x03
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	9c 81       	ldd	r25, Y+4	; 0x04
    2202:	83 30       	cpi	r24, 0x03	; 3
    2204:	91 05       	cpc	r25, r1
    2206:	09 f4       	brne	.+2      	; 0x220a <M_TIMER0_voidInit+0x1fa>
    2208:	70 c0       	rjmp	.+224    	; 0x22ea <M_TIMER0_voidInit+0x2da>
    220a:	2b 81       	ldd	r18, Y+3	; 0x03
    220c:	3c 81       	ldd	r19, Y+4	; 0x04
    220e:	24 30       	cpi	r18, 0x04	; 4
    2210:	31 05       	cpc	r19, r1
    2212:	84 f4       	brge	.+32     	; 0x2234 <M_TIMER0_voidInit+0x224>
    2214:	8b 81       	ldd	r24, Y+3	; 0x03
    2216:	9c 81       	ldd	r25, Y+4	; 0x04
    2218:	81 30       	cpi	r24, 0x01	; 1
    221a:	91 05       	cpc	r25, r1
    221c:	d1 f1       	breq	.+116    	; 0x2292 <M_TIMER0_voidInit+0x282>
    221e:	2b 81       	ldd	r18, Y+3	; 0x03
    2220:	3c 81       	ldd	r19, Y+4	; 0x04
    2222:	22 30       	cpi	r18, 0x02	; 2
    2224:	31 05       	cpc	r19, r1
    2226:	0c f0       	brlt	.+2      	; 0x222a <M_TIMER0_voidInit+0x21a>
    2228:	4a c0       	rjmp	.+148    	; 0x22be <M_TIMER0_voidInit+0x2ae>
    222a:	8b 81       	ldd	r24, Y+3	; 0x03
    222c:	9c 81       	ldd	r25, Y+4	; 0x04
    222e:	00 97       	sbiw	r24, 0x00	; 0
    2230:	d1 f0       	breq	.+52     	; 0x2266 <M_TIMER0_voidInit+0x256>
    2232:	c8 c0       	rjmp	.+400    	; 0x23c4 <M_TIMER0_voidInit+0x3b4>
    2234:	2b 81       	ldd	r18, Y+3	; 0x03
    2236:	3c 81       	ldd	r19, Y+4	; 0x04
    2238:	25 30       	cpi	r18, 0x05	; 5
    223a:	31 05       	cpc	r19, r1
    223c:	09 f4       	brne	.+2      	; 0x2240 <M_TIMER0_voidInit+0x230>
    223e:	81 c0       	rjmp	.+258    	; 0x2342 <M_TIMER0_voidInit+0x332>
    2240:	8b 81       	ldd	r24, Y+3	; 0x03
    2242:	9c 81       	ldd	r25, Y+4	; 0x04
    2244:	85 30       	cpi	r24, 0x05	; 5
    2246:	91 05       	cpc	r25, r1
    2248:	0c f4       	brge	.+2      	; 0x224c <M_TIMER0_voidInit+0x23c>
    224a:	65 c0       	rjmp	.+202    	; 0x2316 <M_TIMER0_voidInit+0x306>
    224c:	2b 81       	ldd	r18, Y+3	; 0x03
    224e:	3c 81       	ldd	r19, Y+4	; 0x04
    2250:	26 30       	cpi	r18, 0x06	; 6
    2252:	31 05       	cpc	r19, r1
    2254:	09 f4       	brne	.+2      	; 0x2258 <M_TIMER0_voidInit+0x248>
    2256:	8b c0       	rjmp	.+278    	; 0x236e <M_TIMER0_voidInit+0x35e>
    2258:	8b 81       	ldd	r24, Y+3	; 0x03
    225a:	9c 81       	ldd	r25, Y+4	; 0x04
    225c:	87 30       	cpi	r24, 0x07	; 7
    225e:	91 05       	cpc	r25, r1
    2260:	09 f4       	brne	.+2      	; 0x2264 <M_TIMER0_voidInit+0x254>
    2262:	9b c0       	rjmp	.+310    	; 0x239a <M_TIMER0_voidInit+0x38a>
    2264:	af c0       	rjmp	.+350    	; 0x23c4 <M_TIMER0_voidInit+0x3b4>

	case NO_CLK:    CLEAR_BIT(TCCR0,TCCR0_CS00);
    2266:	a3 e5       	ldi	r26, 0x53	; 83
    2268:	b0 e0       	ldi	r27, 0x00	; 0
    226a:	e3 e5       	ldi	r30, 0x53	; 83
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	8e 7f       	andi	r24, 0xFE	; 254
    2272:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR0,TCCR0_CS01);
    2274:	a3 e5       	ldi	r26, 0x53	; 83
    2276:	b0 e0       	ldi	r27, 0x00	; 0
    2278:	e3 e5       	ldi	r30, 0x53	; 83
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	8d 7f       	andi	r24, 0xFD	; 253
    2280:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR0,TCCR0_CS02);
    2282:	a3 e5       	ldi	r26, 0x53	; 83
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	e3 e5       	ldi	r30, 0x53	; 83
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	8b 7f       	andi	r24, 0xFB	; 251
    228e:	8c 93       	st	X, r24
    2290:	99 c0       	rjmp	.+306    	; 0x23c4 <M_TIMER0_voidInit+0x3b4>
					break;
	case NO_PRESC:  SET_BIT(TCCR0,TCCR0_CS00);
    2292:	a3 e5       	ldi	r26, 0x53	; 83
    2294:	b0 e0       	ldi	r27, 0x00	; 0
    2296:	e3 e5       	ldi	r30, 0x53	; 83
    2298:	f0 e0       	ldi	r31, 0x00	; 0
    229a:	80 81       	ld	r24, Z
    229c:	81 60       	ori	r24, 0x01	; 1
    229e:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR0,TCCR0_CS01);
    22a0:	a3 e5       	ldi	r26, 0x53	; 83
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	e3 e5       	ldi	r30, 0x53	; 83
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	8d 7f       	andi	r24, 0xFD	; 253
    22ac:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR0,TCCR0_CS02);
    22ae:	a3 e5       	ldi	r26, 0x53	; 83
    22b0:	b0 e0       	ldi	r27, 0x00	; 0
    22b2:	e3 e5       	ldi	r30, 0x53	; 83
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	80 81       	ld	r24, Z
    22b8:	8b 7f       	andi	r24, 0xFB	; 251
    22ba:	8c 93       	st	X, r24
    22bc:	83 c0       	rjmp	.+262    	; 0x23c4 <M_TIMER0_voidInit+0x3b4>
					break;
	case PRESC_8:   CLEAR_BIT(TCCR0,TCCR0_CS00);
    22be:	a3 e5       	ldi	r26, 0x53	; 83
    22c0:	b0 e0       	ldi	r27, 0x00	; 0
    22c2:	e3 e5       	ldi	r30, 0x53	; 83
    22c4:	f0 e0       	ldi	r31, 0x00	; 0
    22c6:	80 81       	ld	r24, Z
    22c8:	8e 7f       	andi	r24, 0xFE	; 254
    22ca:	8c 93       	st	X, r24
	                SET_BIT(TCCR0,TCCR0_CS01);
    22cc:	a3 e5       	ldi	r26, 0x53	; 83
    22ce:	b0 e0       	ldi	r27, 0x00	; 0
    22d0:	e3 e5       	ldi	r30, 0x53	; 83
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
    22d6:	82 60       	ori	r24, 0x02	; 2
    22d8:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR0,TCCR0_CS02);
    22da:	a3 e5       	ldi	r26, 0x53	; 83
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	e3 e5       	ldi	r30, 0x53	; 83
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	8b 7f       	andi	r24, 0xFB	; 251
    22e6:	8c 93       	st	X, r24
    22e8:	6d c0       	rjmp	.+218    	; 0x23c4 <M_TIMER0_voidInit+0x3b4>
					break;
	case PRESC_64:  SET_BIT(TCCR0,TCCR0_CS00);
    22ea:	a3 e5       	ldi	r26, 0x53	; 83
    22ec:	b0 e0       	ldi	r27, 0x00	; 0
    22ee:	e3 e5       	ldi	r30, 0x53	; 83
    22f0:	f0 e0       	ldi	r31, 0x00	; 0
    22f2:	80 81       	ld	r24, Z
    22f4:	81 60       	ori	r24, 0x01	; 1
    22f6:	8c 93       	st	X, r24
	                SET_BIT(TCCR0,TCCR0_CS01);
    22f8:	a3 e5       	ldi	r26, 0x53	; 83
    22fa:	b0 e0       	ldi	r27, 0x00	; 0
    22fc:	e3 e5       	ldi	r30, 0x53	; 83
    22fe:	f0 e0       	ldi	r31, 0x00	; 0
    2300:	80 81       	ld	r24, Z
    2302:	82 60       	ori	r24, 0x02	; 2
    2304:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR0,TCCR0_CS02);
    2306:	a3 e5       	ldi	r26, 0x53	; 83
    2308:	b0 e0       	ldi	r27, 0x00	; 0
    230a:	e3 e5       	ldi	r30, 0x53	; 83
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	80 81       	ld	r24, Z
    2310:	8b 7f       	andi	r24, 0xFB	; 251
    2312:	8c 93       	st	X, r24
    2314:	57 c0       	rjmp	.+174    	; 0x23c4 <M_TIMER0_voidInit+0x3b4>
					break;
	case PRESC_256:
		            CLEAR_BIT(TCCR0,TCCR0_CS00);
    2316:	a3 e5       	ldi	r26, 0x53	; 83
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	e3 e5       	ldi	r30, 0x53	; 83
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 81       	ld	r24, Z
    2320:	8e 7f       	andi	r24, 0xFE	; 254
    2322:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR0,TCCR0_CS01);
    2324:	a3 e5       	ldi	r26, 0x53	; 83
    2326:	b0 e0       	ldi	r27, 0x00	; 0
    2328:	e3 e5       	ldi	r30, 0x53	; 83
    232a:	f0 e0       	ldi	r31, 0x00	; 0
    232c:	80 81       	ld	r24, Z
    232e:	8d 7f       	andi	r24, 0xFD	; 253
    2330:	8c 93       	st	X, r24
					SET_BIT(TCCR0,TCCR0_CS02);
    2332:	a3 e5       	ldi	r26, 0x53	; 83
    2334:	b0 e0       	ldi	r27, 0x00	; 0
    2336:	e3 e5       	ldi	r30, 0x53	; 83
    2338:	f0 e0       	ldi	r31, 0x00	; 0
    233a:	80 81       	ld	r24, Z
    233c:	84 60       	ori	r24, 0x04	; 4
    233e:	8c 93       	st	X, r24
    2340:	41 c0       	rjmp	.+130    	; 0x23c4 <M_TIMER0_voidInit+0x3b4>
					break;
	case PRESC_1024:
	            	SET_BIT(TCCR0,TCCR0_CS00);
    2342:	a3 e5       	ldi	r26, 0x53	; 83
    2344:	b0 e0       	ldi	r27, 0x00	; 0
    2346:	e3 e5       	ldi	r30, 0x53	; 83
    2348:	f0 e0       	ldi	r31, 0x00	; 0
    234a:	80 81       	ld	r24, Z
    234c:	81 60       	ori	r24, 0x01	; 1
    234e:	8c 93       	st	X, r24
					CLEAR_BIT(TCCR0,TCCR0_CS01);
    2350:	a3 e5       	ldi	r26, 0x53	; 83
    2352:	b0 e0       	ldi	r27, 0x00	; 0
    2354:	e3 e5       	ldi	r30, 0x53	; 83
    2356:	f0 e0       	ldi	r31, 0x00	; 0
    2358:	80 81       	ld	r24, Z
    235a:	8d 7f       	andi	r24, 0xFD	; 253
    235c:	8c 93       	st	X, r24
					SET_BIT(TCCR0,TCCR0_CS02);
    235e:	a3 e5       	ldi	r26, 0x53	; 83
    2360:	b0 e0       	ldi	r27, 0x00	; 0
    2362:	e3 e5       	ldi	r30, 0x53	; 83
    2364:	f0 e0       	ldi	r31, 0x00	; 0
    2366:	80 81       	ld	r24, Z
    2368:	84 60       	ori	r24, 0x04	; 4
    236a:	8c 93       	st	X, r24
    236c:	2b c0       	rjmp	.+86     	; 0x23c4 <M_TIMER0_voidInit+0x3b4>
					break;
	case EXTERNAL_FALLING:
		            CLEAR_BIT(TCCR0,TCCR0_CS00);
    236e:	a3 e5       	ldi	r26, 0x53	; 83
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	e3 e5       	ldi	r30, 0x53	; 83
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	8e 7f       	andi	r24, 0xFE	; 254
    237a:	8c 93       	st	X, r24
		            SET_BIT(TCCR0,TCCR0_CS01);
    237c:	a3 e5       	ldi	r26, 0x53	; 83
    237e:	b0 e0       	ldi	r27, 0x00	; 0
    2380:	e3 e5       	ldi	r30, 0x53	; 83
    2382:	f0 e0       	ldi	r31, 0x00	; 0
    2384:	80 81       	ld	r24, Z
    2386:	82 60       	ori	r24, 0x02	; 2
    2388:	8c 93       	st	X, r24
		            SET_BIT(TCCR0,TCCR0_CS02);
    238a:	a3 e5       	ldi	r26, 0x53	; 83
    238c:	b0 e0       	ldi	r27, 0x00	; 0
    238e:	e3 e5       	ldi	r30, 0x53	; 83
    2390:	f0 e0       	ldi	r31, 0x00	; 0
    2392:	80 81       	ld	r24, Z
    2394:	84 60       	ori	r24, 0x04	; 4
    2396:	8c 93       	st	X, r24
    2398:	15 c0       	rjmp	.+42     	; 0x23c4 <M_TIMER0_voidInit+0x3b4>
					break;
	case EXTERNAL_RISING:
					SET_BIT(TCCR0,TCCR0_CS00);
    239a:	a3 e5       	ldi	r26, 0x53	; 83
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	e3 e5       	ldi	r30, 0x53	; 83
    23a0:	f0 e0       	ldi	r31, 0x00	; 0
    23a2:	80 81       	ld	r24, Z
    23a4:	81 60       	ori	r24, 0x01	; 1
    23a6:	8c 93       	st	X, r24
					SET_BIT(TCCR0,TCCR0_CS01);
    23a8:	a3 e5       	ldi	r26, 0x53	; 83
    23aa:	b0 e0       	ldi	r27, 0x00	; 0
    23ac:	e3 e5       	ldi	r30, 0x53	; 83
    23ae:	f0 e0       	ldi	r31, 0x00	; 0
    23b0:	80 81       	ld	r24, Z
    23b2:	82 60       	ori	r24, 0x02	; 2
    23b4:	8c 93       	st	X, r24
					SET_BIT(TCCR0,TCCR0_CS02);
    23b6:	a3 e5       	ldi	r26, 0x53	; 83
    23b8:	b0 e0       	ldi	r27, 0x00	; 0
    23ba:	e3 e5       	ldi	r30, 0x53	; 83
    23bc:	f0 e0       	ldi	r31, 0x00	; 0
    23be:	80 81       	ld	r24, Z
    23c0:	84 60       	ori	r24, 0x04	; 4
    23c2:	8c 93       	st	X, r24
		SET_BIT(TCCR0,TCCR0_FOC0);
		/* Enable interrupt */
		SET_BIT(TIMSK,TIMSK_TOIE0);
	}
#endif
}
    23c4:	0f 90       	pop	r0
    23c6:	0f 90       	pop	r0
    23c8:	0f 90       	pop	r0
    23ca:	0f 90       	pop	r0
    23cc:	cf 91       	pop	r28
    23ce:	df 91       	pop	r29
    23d0:	08 95       	ret

000023d2 <M_TIMER0_voidSetDutyCylce>:

void M_TIMER0_voidSetDutyCylce(u8 duty_cycle){
    23d2:	df 93       	push	r29
    23d4:	cf 93       	push	r28
    23d6:	0f 92       	push	r0
    23d8:	cd b7       	in	r28, 0x3d	; 61
    23da:	de b7       	in	r29, 0x3e	; 62
    23dc:	89 83       	std	Y+1, r24	; 0x01
	OCR0 = duty_cycle;
    23de:	ec e5       	ldi	r30, 0x5C	; 92
    23e0:	f0 e0       	ldi	r31, 0x00	; 0
    23e2:	89 81       	ldd	r24, Y+1	; 0x01
    23e4:	80 83       	st	Z, r24
}
    23e6:	0f 90       	pop	r0
    23e8:	cf 91       	pop	r28
    23ea:	df 91       	pop	r29
    23ec:	08 95       	ret

000023ee <M_TIMER0_voidDisable>:

void M_TIMER0_voidDisable(void){
    23ee:	df 93       	push	r29
    23f0:	cf 93       	push	r28
    23f2:	cd b7       	in	r28, 0x3d	; 61
    23f4:	de b7       	in	r29, 0x3e	; 62
	/* Select PRESCALER as No_Clk */
	CLEAR_BIT(TCCR0 , TCCR0_CS00);
    23f6:	a3 e5       	ldi	r26, 0x53	; 83
    23f8:	b0 e0       	ldi	r27, 0x00	; 0
    23fa:	e3 e5       	ldi	r30, 0x53	; 83
    23fc:	f0 e0       	ldi	r31, 0x00	; 0
    23fe:	80 81       	ld	r24, Z
    2400:	8e 7f       	andi	r24, 0xFE	; 254
    2402:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0 , TCCR0_CS01);
    2404:	a3 e5       	ldi	r26, 0x53	; 83
    2406:	b0 e0       	ldi	r27, 0x00	; 0
    2408:	e3 e5       	ldi	r30, 0x53	; 83
    240a:	f0 e0       	ldi	r31, 0x00	; 0
    240c:	80 81       	ld	r24, Z
    240e:	8d 7f       	andi	r24, 0xFD	; 253
    2410:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0 , TCCR0_CS02);
    2412:	a3 e5       	ldi	r26, 0x53	; 83
    2414:	b0 e0       	ldi	r27, 0x00	; 0
    2416:	e3 e5       	ldi	r30, 0x53	; 83
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	8b 7f       	andi	r24, 0xFB	; 251
    241e:	8c 93       	st	X, r24
}
    2420:	cf 91       	pop	r28
    2422:	df 91       	pop	r29
    2424:	08 95       	ret

00002426 <M_TIMER0_voidSetPreLoad>:
void M_TIMER0_voidSetPreLoad(u8 preload){
    2426:	df 93       	push	r29
    2428:	cf 93       	push	r28
    242a:	0f 92       	push	r0
    242c:	cd b7       	in	r28, 0x3d	; 61
    242e:	de b7       	in	r29, 0x3e	; 62
    2430:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = preload;
    2432:	e2 e5       	ldi	r30, 0x52	; 82
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	89 81       	ldd	r24, Y+1	; 0x01
    2438:	80 83       	st	Z, r24
}
    243a:	0f 90       	pop	r0
    243c:	cf 91       	pop	r28
    243e:	df 91       	pop	r29
    2440:	08 95       	ret

00002442 <M_TIMER0_voidSetCallBack>:
void M_TIMER0_voidSetCallBack(void(*a_ptr)(void)){
    2442:	df 93       	push	r29
    2444:	cf 93       	push	r28
    2446:	00 d0       	rcall	.+0      	; 0x2448 <M_TIMER0_voidSetCallBack+0x6>
    2448:	cd b7       	in	r28, 0x3d	; 61
    244a:	de b7       	in	r29, 0x3e	; 62
    244c:	9a 83       	std	Y+2, r25	; 0x02
    244e:	89 83       	std	Y+1, r24	; 0x01
	g_pf = a_ptr;
    2450:	89 81       	ldd	r24, Y+1	; 0x01
    2452:	9a 81       	ldd	r25, Y+2	; 0x02
    2454:	90 93 4a 02 	sts	0x024A, r25
    2458:	80 93 49 02 	sts	0x0249, r24
}
    245c:	0f 90       	pop	r0
    245e:	0f 90       	pop	r0
    2460:	cf 91       	pop	r28
    2462:	df 91       	pop	r29
    2464:	08 95       	ret

00002466 <M_TIMER0_voidSelectPrescaler>:
void M_TIMER0_voidSelectPrescaler(TIMER0_PRESCALER value){
    2466:	df 93       	push	r29
    2468:	cf 93       	push	r28
    246a:	0f 92       	push	r0
    246c:	cd b7       	in	r28, 0x3d	; 61
    246e:	de b7       	in	r29, 0x3e	; 62
    2470:	89 83       	std	Y+1, r24	; 0x01
	/* Configure CS00 ~ CS02 for prescaler */
	TCCR0= (TCCR0 & 0xF8) | (value & 0x07);
    2472:	a3 e5       	ldi	r26, 0x53	; 83
    2474:	b0 e0       	ldi	r27, 0x00	; 0
    2476:	e3 e5       	ldi	r30, 0x53	; 83
    2478:	f0 e0       	ldi	r31, 0x00	; 0
    247a:	80 81       	ld	r24, Z
    247c:	98 2f       	mov	r25, r24
    247e:	98 7f       	andi	r25, 0xF8	; 248
    2480:	89 81       	ldd	r24, Y+1	; 0x01
    2482:	87 70       	andi	r24, 0x07	; 7
    2484:	89 2b       	or	r24, r25
    2486:	8c 93       	st	X, r24
}
    2488:	0f 90       	pop	r0
    248a:	cf 91       	pop	r28
    248c:	df 91       	pop	r29
    248e:	08 95       	ret

00002490 <__vector_11>:

/*************************** Set ISR ********************************/

void __vector_11(void)       __attribute__((signal));
void __vector_11(void){
    2490:	1f 92       	push	r1
    2492:	0f 92       	push	r0
    2494:	0f b6       	in	r0, 0x3f	; 63
    2496:	0f 92       	push	r0
    2498:	11 24       	eor	r1, r1
    249a:	2f 93       	push	r18
    249c:	3f 93       	push	r19
    249e:	4f 93       	push	r20
    24a0:	5f 93       	push	r21
    24a2:	6f 93       	push	r22
    24a4:	7f 93       	push	r23
    24a6:	8f 93       	push	r24
    24a8:	9f 93       	push	r25
    24aa:	af 93       	push	r26
    24ac:	bf 93       	push	r27
    24ae:	ef 93       	push	r30
    24b0:	ff 93       	push	r31
    24b2:	df 93       	push	r29
    24b4:	cf 93       	push	r28
    24b6:	cd b7       	in	r28, 0x3d	; 61
    24b8:	de b7       	in	r29, 0x3e	; 62
	if(g_pf != NULL_PTR ){
    24ba:	80 91 49 02 	lds	r24, 0x0249
    24be:	90 91 4a 02 	lds	r25, 0x024A
    24c2:	00 97       	sbiw	r24, 0x00	; 0
    24c4:	29 f0       	breq	.+10     	; 0x24d0 <__vector_11+0x40>
		(*g_pf)();
    24c6:	e0 91 49 02 	lds	r30, 0x0249
    24ca:	f0 91 4a 02 	lds	r31, 0x024A
    24ce:	09 95       	icall
	}
}
    24d0:	cf 91       	pop	r28
    24d2:	df 91       	pop	r29
    24d4:	ff 91       	pop	r31
    24d6:	ef 91       	pop	r30
    24d8:	bf 91       	pop	r27
    24da:	af 91       	pop	r26
    24dc:	9f 91       	pop	r25
    24de:	8f 91       	pop	r24
    24e0:	7f 91       	pop	r23
    24e2:	6f 91       	pop	r22
    24e4:	5f 91       	pop	r21
    24e6:	4f 91       	pop	r20
    24e8:	3f 91       	pop	r19
    24ea:	2f 91       	pop	r18
    24ec:	0f 90       	pop	r0
    24ee:	0f be       	out	0x3f, r0	; 63
    24f0:	0f 90       	pop	r0
    24f2:	1f 90       	pop	r1
    24f4:	18 95       	reti

000024f6 <__vector_10>:

void __vector_10(void)       __attribute__((signal));

void __vector_10(void){
    24f6:	1f 92       	push	r1
    24f8:	0f 92       	push	r0
    24fa:	0f b6       	in	r0, 0x3f	; 63
    24fc:	0f 92       	push	r0
    24fe:	11 24       	eor	r1, r1
    2500:	2f 93       	push	r18
    2502:	3f 93       	push	r19
    2504:	4f 93       	push	r20
    2506:	5f 93       	push	r21
    2508:	6f 93       	push	r22
    250a:	7f 93       	push	r23
    250c:	8f 93       	push	r24
    250e:	9f 93       	push	r25
    2510:	af 93       	push	r26
    2512:	bf 93       	push	r27
    2514:	ef 93       	push	r30
    2516:	ff 93       	push	r31
    2518:	df 93       	push	r29
    251a:	cf 93       	push	r28
    251c:	cd b7       	in	r28, 0x3d	; 61
    251e:	de b7       	in	r29, 0x3e	; 62
	if(g_pf != NULL_PTR ){
    2520:	80 91 49 02 	lds	r24, 0x0249
    2524:	90 91 4a 02 	lds	r25, 0x024A
    2528:	00 97       	sbiw	r24, 0x00	; 0
    252a:	29 f0       	breq	.+10     	; 0x2536 <__vector_10+0x40>
		(*g_pf)();
    252c:	e0 91 49 02 	lds	r30, 0x0249
    2530:	f0 91 4a 02 	lds	r31, 0x024A
    2534:	09 95       	icall
	}
}
    2536:	cf 91       	pop	r28
    2538:	df 91       	pop	r29
    253a:	ff 91       	pop	r31
    253c:	ef 91       	pop	r30
    253e:	bf 91       	pop	r27
    2540:	af 91       	pop	r26
    2542:	9f 91       	pop	r25
    2544:	8f 91       	pop	r24
    2546:	7f 91       	pop	r23
    2548:	6f 91       	pop	r22
    254a:	5f 91       	pop	r21
    254c:	4f 91       	pop	r20
    254e:	3f 91       	pop	r19
    2550:	2f 91       	pop	r18
    2552:	0f 90       	pop	r0
    2554:	0f be       	out	0x3f, r0	; 63
    2556:	0f 90       	pop	r0
    2558:	1f 90       	pop	r1
    255a:	18 95       	reti

0000255c <M_TIMER1_voidInit>:
}
#endif



void M_TIMER1_voidInit(TIMER1_TopMode topMode, TIMER1_Mode  Config_Mode ,TIMER1_Prescaler select_Prescaler){
    255c:	df 93       	push	r29
    255e:	cf 93       	push	r28
    2560:	cd b7       	in	r28, 0x3d	; 61
    2562:	de b7       	in	r29, 0x3e	; 62
    2564:	29 97       	sbiw	r28, 0x09	; 9
    2566:	0f b6       	in	r0, 0x3f	; 63
    2568:	f8 94       	cli
    256a:	de bf       	out	0x3e, r29	; 62
    256c:	0f be       	out	0x3f, r0	; 63
    256e:	cd bf       	out	0x3d, r28	; 61
    2570:	89 83       	std	Y+1, r24	; 0x01
    2572:	6a 83       	std	Y+2, r22	; 0x02
    2574:	4b 83       	std	Y+3, r20	; 0x03
	/* Timer1 Mode */
	switch(topMode){
    2576:	89 81       	ldd	r24, Y+1	; 0x01
    2578:	28 2f       	mov	r18, r24
    257a:	30 e0       	ldi	r19, 0x00	; 0
    257c:	39 87       	std	Y+9, r19	; 0x09
    257e:	28 87       	std	Y+8, r18	; 0x08
    2580:	88 85       	ldd	r24, Y+8	; 0x08
    2582:	99 85       	ldd	r25, Y+9	; 0x09
    2584:	82 30       	cpi	r24, 0x02	; 2
    2586:	91 05       	cpc	r25, r1
    2588:	d1 f1       	breq	.+116    	; 0x25fe <M_TIMER1_voidInit+0xa2>
    258a:	28 85       	ldd	r18, Y+8	; 0x08
    258c:	39 85       	ldd	r19, Y+9	; 0x09
    258e:	23 30       	cpi	r18, 0x03	; 3
    2590:	31 05       	cpc	r19, r1
    2592:	5c f4       	brge	.+22     	; 0x25aa <M_TIMER1_voidInit+0x4e>
    2594:	88 85       	ldd	r24, Y+8	; 0x08
    2596:	99 85       	ldd	r25, Y+9	; 0x09
    2598:	00 97       	sbiw	r24, 0x00	; 0
    259a:	a1 f0       	breq	.+40     	; 0x25c4 <M_TIMER1_voidInit+0x68>
    259c:	28 85       	ldd	r18, Y+8	; 0x08
    259e:	39 85       	ldd	r19, Y+9	; 0x09
    25a0:	21 30       	cpi	r18, 0x01	; 1
    25a2:	31 05       	cpc	r19, r1
    25a4:	09 f4       	brne	.+2      	; 0x25a8 <M_TIMER1_voidInit+0x4c>
    25a6:	48 c0       	rjmp	.+144    	; 0x2638 <M_TIMER1_voidInit+0xdc>
    25a8:	9d c0       	rjmp	.+314    	; 0x26e4 <M_TIMER1_voidInit+0x188>
    25aa:	88 85       	ldd	r24, Y+8	; 0x08
    25ac:	99 85       	ldd	r25, Y+9	; 0x09
    25ae:	83 30       	cpi	r24, 0x03	; 3
    25b0:	91 05       	cpc	r25, r1
    25b2:	09 f4       	brne	.+2      	; 0x25b6 <M_TIMER1_voidInit+0x5a>
    25b4:	5e c0       	rjmp	.+188    	; 0x2672 <M_TIMER1_voidInit+0x116>
    25b6:	28 85       	ldd	r18, Y+8	; 0x08
    25b8:	39 85       	ldd	r19, Y+9	; 0x09
    25ba:	24 30       	cpi	r18, 0x04	; 4
    25bc:	31 05       	cpc	r19, r1
    25be:	09 f4       	brne	.+2      	; 0x25c2 <M_TIMER1_voidInit+0x66>
    25c0:	75 c0       	rjmp	.+234    	; 0x26ac <M_TIMER1_voidInit+0x150>
    25c2:	90 c0       	rjmp	.+288    	; 0x26e4 <M_TIMER1_voidInit+0x188>
	case NORMAL_MODE_WAVE_OXFFFF:
		CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    25c4:	af e4       	ldi	r26, 0x4F	; 79
    25c6:	b0 e0       	ldi	r27, 0x00	; 0
    25c8:	ef e4       	ldi	r30, 0x4F	; 79
    25ca:	f0 e0       	ldi	r31, 0x00	; 0
    25cc:	80 81       	ld	r24, Z
    25ce:	8e 7f       	andi	r24, 0xFE	; 254
    25d0:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_WGM11);
    25d2:	af e4       	ldi	r26, 0x4F	; 79
    25d4:	b0 e0       	ldi	r27, 0x00	; 0
    25d6:	ef e4       	ldi	r30, 0x4F	; 79
    25d8:	f0 e0       	ldi	r31, 0x00	; 0
    25da:	80 81       	ld	r24, Z
    25dc:	8d 7f       	andi	r24, 0xFD	; 253
    25de:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,TCCR1B_WGM12);
    25e0:	ae e4       	ldi	r26, 0x4E	; 78
    25e2:	b0 e0       	ldi	r27, 0x00	; 0
    25e4:	ee e4       	ldi	r30, 0x4E	; 78
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	87 7f       	andi	r24, 0xF7	; 247
    25ec:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,TCCR1B_WGM13);
    25ee:	ae e4       	ldi	r26, 0x4E	; 78
    25f0:	b0 e0       	ldi	r27, 0x00	; 0
    25f2:	ee e4       	ldi	r30, 0x4E	; 78
    25f4:	f0 e0       	ldi	r31, 0x00	; 0
    25f6:	80 81       	ld	r24, Z
    25f8:	8f 7e       	andi	r24, 0xEF	; 239
    25fa:	8c 93       	st	X, r24
    25fc:	73 c0       	rjmp	.+230    	; 0x26e4 <M_TIMER1_voidInit+0x188>
		break;
	case TOP_CTC_ICR1:
		CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    25fe:	af e4       	ldi	r26, 0x4F	; 79
    2600:	b0 e0       	ldi	r27, 0x00	; 0
    2602:	ef e4       	ldi	r30, 0x4F	; 79
    2604:	f0 e0       	ldi	r31, 0x00	; 0
    2606:	80 81       	ld	r24, Z
    2608:	8e 7f       	andi	r24, 0xFE	; 254
    260a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_WGM11);
    260c:	af e4       	ldi	r26, 0x4F	; 79
    260e:	b0 e0       	ldi	r27, 0x00	; 0
    2610:	ef e4       	ldi	r30, 0x4F	; 79
    2612:	f0 e0       	ldi	r31, 0x00	; 0
    2614:	80 81       	ld	r24, Z
    2616:	8d 7f       	andi	r24, 0xFD	; 253
    2618:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    261a:	ae e4       	ldi	r26, 0x4E	; 78
    261c:	b0 e0       	ldi	r27, 0x00	; 0
    261e:	ee e4       	ldi	r30, 0x4E	; 78
    2620:	f0 e0       	ldi	r31, 0x00	; 0
    2622:	80 81       	ld	r24, Z
    2624:	88 60       	ori	r24, 0x08	; 8
    2626:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    2628:	ae e4       	ldi	r26, 0x4E	; 78
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	ee e4       	ldi	r30, 0x4E	; 78
    262e:	f0 e0       	ldi	r31, 0x00	; 0
    2630:	80 81       	ld	r24, Z
    2632:	80 61       	ori	r24, 0x10	; 16
    2634:	8c 93       	st	X, r24
    2636:	56 c0       	rjmp	.+172    	; 0x26e4 <M_TIMER1_voidInit+0x188>
		break;
	case TOP_CTC_OCR1A:
		CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    2638:	af e4       	ldi	r26, 0x4F	; 79
    263a:	b0 e0       	ldi	r27, 0x00	; 0
    263c:	ef e4       	ldi	r30, 0x4F	; 79
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	80 81       	ld	r24, Z
    2642:	8e 7f       	andi	r24, 0xFE	; 254
    2644:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_WGM11);
    2646:	af e4       	ldi	r26, 0x4F	; 79
    2648:	b0 e0       	ldi	r27, 0x00	; 0
    264a:	ef e4       	ldi	r30, 0x4F	; 79
    264c:	f0 e0       	ldi	r31, 0x00	; 0
    264e:	80 81       	ld	r24, Z
    2650:	8d 7f       	andi	r24, 0xFD	; 253
    2652:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    2654:	ae e4       	ldi	r26, 0x4E	; 78
    2656:	b0 e0       	ldi	r27, 0x00	; 0
    2658:	ee e4       	ldi	r30, 0x4E	; 78
    265a:	f0 e0       	ldi	r31, 0x00	; 0
    265c:	80 81       	ld	r24, Z
    265e:	88 60       	ori	r24, 0x08	; 8
    2660:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,TCCR1B_WGM13);
    2662:	ae e4       	ldi	r26, 0x4E	; 78
    2664:	b0 e0       	ldi	r27, 0x00	; 0
    2666:	ee e4       	ldi	r30, 0x4E	; 78
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	80 81       	ld	r24, Z
    266c:	8f 7e       	andi	r24, 0xEF	; 239
    266e:	8c 93       	st	X, r24
    2670:	39 c0       	rjmp	.+114    	; 0x26e4 <M_TIMER1_voidInit+0x188>
		break;
	case TOP_FPWM_ICR1:
		CLEAR_BIT(TCCR1A,TCCR1A_WGM10);
    2672:	af e4       	ldi	r26, 0x4F	; 79
    2674:	b0 e0       	ldi	r27, 0x00	; 0
    2676:	ef e4       	ldi	r30, 0x4F	; 79
    2678:	f0 e0       	ldi	r31, 0x00	; 0
    267a:	80 81       	ld	r24, Z
    267c:	8e 7f       	andi	r24, 0xFE	; 254
    267e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    2680:	af e4       	ldi	r26, 0x4F	; 79
    2682:	b0 e0       	ldi	r27, 0x00	; 0
    2684:	ef e4       	ldi	r30, 0x4F	; 79
    2686:	f0 e0       	ldi	r31, 0x00	; 0
    2688:	80 81       	ld	r24, Z
    268a:	82 60       	ori	r24, 0x02	; 2
    268c:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    268e:	ae e4       	ldi	r26, 0x4E	; 78
    2690:	b0 e0       	ldi	r27, 0x00	; 0
    2692:	ee e4       	ldi	r30, 0x4E	; 78
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	80 81       	ld	r24, Z
    2698:	88 60       	ori	r24, 0x08	; 8
    269a:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    269c:	ae e4       	ldi	r26, 0x4E	; 78
    269e:	b0 e0       	ldi	r27, 0x00	; 0
    26a0:	ee e4       	ldi	r30, 0x4E	; 78
    26a2:	f0 e0       	ldi	r31, 0x00	; 0
    26a4:	80 81       	ld	r24, Z
    26a6:	80 61       	ori	r24, 0x10	; 16
    26a8:	8c 93       	st	X, r24
    26aa:	1c c0       	rjmp	.+56     	; 0x26e4 <M_TIMER1_voidInit+0x188>
		break;
	case TOP_FPWM_OCR1A:
		SET_BIT(TCCR1A,TCCR1A_WGM10);
    26ac:	af e4       	ldi	r26, 0x4F	; 79
    26ae:	b0 e0       	ldi	r27, 0x00	; 0
    26b0:	ef e4       	ldi	r30, 0x4F	; 79
    26b2:	f0 e0       	ldi	r31, 0x00	; 0
    26b4:	80 81       	ld	r24, Z
    26b6:	81 60       	ori	r24, 0x01	; 1
    26b8:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_WGM11);
    26ba:	af e4       	ldi	r26, 0x4F	; 79
    26bc:	b0 e0       	ldi	r27, 0x00	; 0
    26be:	ef e4       	ldi	r30, 0x4F	; 79
    26c0:	f0 e0       	ldi	r31, 0x00	; 0
    26c2:	80 81       	ld	r24, Z
    26c4:	82 60       	ori	r24, 0x02	; 2
    26c6:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM12);
    26c8:	ae e4       	ldi	r26, 0x4E	; 78
    26ca:	b0 e0       	ldi	r27, 0x00	; 0
    26cc:	ee e4       	ldi	r30, 0x4E	; 78
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	80 81       	ld	r24, Z
    26d2:	88 60       	ori	r24, 0x08	; 8
    26d4:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_WGM13);
    26d6:	ae e4       	ldi	r26, 0x4E	; 78
    26d8:	b0 e0       	ldi	r27, 0x00	; 0
    26da:	ee e4       	ldi	r30, 0x4E	; 78
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	80 81       	ld	r24, Z
    26e0:	80 61       	ori	r24, 0x10	; 16
    26e2:	8c 93       	st	X, r24
		break;
	default: break;
	}

	switch(Config_Mode)
    26e4:	8a 81       	ldd	r24, Y+2	; 0x02
    26e6:	28 2f       	mov	r18, r24
    26e8:	30 e0       	ldi	r19, 0x00	; 0
    26ea:	3f 83       	std	Y+7, r19	; 0x07
    26ec:	2e 83       	std	Y+6, r18	; 0x06
    26ee:	8e 81       	ldd	r24, Y+6	; 0x06
    26f0:	9f 81       	ldd	r25, Y+7	; 0x07
    26f2:	82 30       	cpi	r24, 0x02	; 2
    26f4:	91 05       	cpc	r25, r1
    26f6:	09 f4       	brne	.+2      	; 0x26fa <M_TIMER1_voidInit+0x19e>
    26f8:	5c c0       	rjmp	.+184    	; 0x27b2 <M_TIMER1_voidInit+0x256>
    26fa:	2e 81       	ldd	r18, Y+6	; 0x06
    26fc:	3f 81       	ldd	r19, Y+7	; 0x07
    26fe:	23 30       	cpi	r18, 0x03	; 3
    2700:	31 05       	cpc	r19, r1
    2702:	54 f4       	brge	.+20     	; 0x2718 <M_TIMER1_voidInit+0x1bc>
    2704:	8e 81       	ldd	r24, Y+6	; 0x06
    2706:	9f 81       	ldd	r25, Y+7	; 0x07
    2708:	00 97       	sbiw	r24, 0x00	; 0
    270a:	c9 f0       	breq	.+50     	; 0x273e <M_TIMER1_voidInit+0x1e2>
    270c:	2e 81       	ldd	r18, Y+6	; 0x06
    270e:	3f 81       	ldd	r19, Y+7	; 0x07
    2710:	21 30       	cpi	r18, 0x01	; 1
    2712:	31 05       	cpc	r19, r1
    2714:	89 f1       	breq	.+98     	; 0x2778 <M_TIMER1_voidInit+0x21c>
    2716:	c0 c0       	rjmp	.+384    	; 0x2898 <M_TIMER1_voidInit+0x33c>
    2718:	8e 81       	ldd	r24, Y+6	; 0x06
    271a:	9f 81       	ldd	r25, Y+7	; 0x07
    271c:	84 30       	cpi	r24, 0x04	; 4
    271e:	91 05       	cpc	r25, r1
    2720:	09 f4       	brne	.+2      	; 0x2724 <M_TIMER1_voidInit+0x1c8>
    2722:	81 c0       	rjmp	.+258    	; 0x2826 <M_TIMER1_voidInit+0x2ca>
    2724:	2e 81       	ldd	r18, Y+6	; 0x06
    2726:	3f 81       	ldd	r19, Y+7	; 0x07
    2728:	24 30       	cpi	r18, 0x04	; 4
    272a:	31 05       	cpc	r19, r1
    272c:	0c f4       	brge	.+2      	; 0x2730 <M_TIMER1_voidInit+0x1d4>
    272e:	5e c0       	rjmp	.+188    	; 0x27ec <M_TIMER1_voidInit+0x290>
    2730:	8e 81       	ldd	r24, Y+6	; 0x06
    2732:	9f 81       	ldd	r25, Y+7	; 0x07
    2734:	85 30       	cpi	r24, 0x05	; 5
    2736:	91 05       	cpc	r25, r1
    2738:	09 f4       	brne	.+2      	; 0x273c <M_TIMER1_voidInit+0x1e0>
    273a:	92 c0       	rjmp	.+292    	; 0x2860 <M_TIMER1_voidInit+0x304>
    273c:	ad c0       	rjmp	.+346    	; 0x2898 <M_TIMER1_voidInit+0x33c>
	{
	case TOP_NORMAL:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    273e:	af e4       	ldi	r26, 0x4F	; 79
    2740:	b0 e0       	ldi	r27, 0x00	; 0
    2742:	ef e4       	ldi	r30, 0x4F	; 79
    2744:	f0 e0       	ldi	r31, 0x00	; 0
    2746:	80 81       	ld	r24, Z
    2748:	8f 7b       	andi	r24, 0xBF	; 191
    274a:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    274c:	af e4       	ldi	r26, 0x4F	; 79
    274e:	b0 e0       	ldi	r27, 0x00	; 0
    2750:	ef e4       	ldi	r30, 0x4F	; 79
    2752:	f0 e0       	ldi	r31, 0x00	; 0
    2754:	80 81       	ld	r24, Z
    2756:	8f 7e       	andi	r24, 0xEF	; 239
    2758:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    275a:	af e4       	ldi	r26, 0x4F	; 79
    275c:	b0 e0       	ldi	r27, 0x00	; 0
    275e:	ef e4       	ldi	r30, 0x4F	; 79
    2760:	f0 e0       	ldi	r31, 0x00	; 0
    2762:	80 81       	ld	r24, Z
    2764:	8f 77       	andi	r24, 0x7F	; 127
    2766:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B1);
    2768:	af e4       	ldi	r26, 0x4F	; 79
    276a:	b0 e0       	ldi	r27, 0x00	; 0
    276c:	ef e4       	ldi	r30, 0x4F	; 79
    276e:	f0 e0       	ldi	r31, 0x00	; 0
    2770:	80 81       	ld	r24, Z
    2772:	8f 7d       	andi	r24, 0xDF	; 223
    2774:	8c 93       	st	X, r24
    2776:	90 c0       	rjmp	.+288    	; 0x2898 <M_TIMER1_voidInit+0x33c>
		break;
	case CTC_TOGGLE:
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    2778:	af e4       	ldi	r26, 0x4F	; 79
    277a:	b0 e0       	ldi	r27, 0x00	; 0
    277c:	ef e4       	ldi	r30, 0x4F	; 79
    277e:	f0 e0       	ldi	r31, 0x00	; 0
    2780:	80 81       	ld	r24, Z
    2782:	80 64       	ori	r24, 0x40	; 64
    2784:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    2786:	af e4       	ldi	r26, 0x4F	; 79
    2788:	b0 e0       	ldi	r27, 0x00	; 0
    278a:	ef e4       	ldi	r30, 0x4F	; 79
    278c:	f0 e0       	ldi	r31, 0x00	; 0
    278e:	80 81       	ld	r24, Z
    2790:	80 61       	ori	r24, 0x10	; 16
    2792:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A1);
    2794:	af e4       	ldi	r26, 0x4F	; 79
    2796:	b0 e0       	ldi	r27, 0x00	; 0
    2798:	ef e4       	ldi	r30, 0x4F	; 79
    279a:	f0 e0       	ldi	r31, 0x00	; 0
    279c:	80 81       	ld	r24, Z
    279e:	8f 77       	andi	r24, 0x7F	; 127
    27a0:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B1);
    27a2:	af e4       	ldi	r26, 0x4F	; 79
    27a4:	b0 e0       	ldi	r27, 0x00	; 0
    27a6:	ef e4       	ldi	r30, 0x4F	; 79
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
    27ac:	8f 7d       	andi	r24, 0xDF	; 223
    27ae:	8c 93       	st	X, r24
    27b0:	73 c0       	rjmp	.+230    	; 0x2898 <M_TIMER1_voidInit+0x33c>
		break;
	case CTC_SET :
	SET_BIT(TCCR1A,TCCR1A_COM1A0);
    27b2:	af e4       	ldi	r26, 0x4F	; 79
    27b4:	b0 e0       	ldi	r27, 0x00	; 0
    27b6:	ef e4       	ldi	r30, 0x4F	; 79
    27b8:	f0 e0       	ldi	r31, 0x00	; 0
    27ba:	80 81       	ld	r24, Z
    27bc:	80 64       	ori	r24, 0x40	; 64
    27be:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_COM1B0);
    27c0:	af e4       	ldi	r26, 0x4F	; 79
    27c2:	b0 e0       	ldi	r27, 0x00	; 0
    27c4:	ef e4       	ldi	r30, 0x4F	; 79
    27c6:	f0 e0       	ldi	r31, 0x00	; 0
    27c8:	80 81       	ld	r24, Z
    27ca:	80 61       	ori	r24, 0x10	; 16
    27cc:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    27ce:	af e4       	ldi	r26, 0x4F	; 79
    27d0:	b0 e0       	ldi	r27, 0x00	; 0
    27d2:	ef e4       	ldi	r30, 0x4F	; 79
    27d4:	f0 e0       	ldi	r31, 0x00	; 0
    27d6:	80 81       	ld	r24, Z
    27d8:	80 68       	ori	r24, 0x80	; 128
    27da:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_COM1B1);
    27dc:	af e4       	ldi	r26, 0x4F	; 79
    27de:	b0 e0       	ldi	r27, 0x00	; 0
    27e0:	ef e4       	ldi	r30, 0x4F	; 79
    27e2:	f0 e0       	ldi	r31, 0x00	; 0
    27e4:	80 81       	ld	r24, Z
    27e6:	80 62       	ori	r24, 0x20	; 32
    27e8:	8c 93       	st	X, r24
    27ea:	56 c0       	rjmp	.+172    	; 0x2898 <M_TIMER1_voidInit+0x33c>
	break;
	case CTC_CLR:
	CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    27ec:	af e4       	ldi	r26, 0x4F	; 79
    27ee:	b0 e0       	ldi	r27, 0x00	; 0
    27f0:	ef e4       	ldi	r30, 0x4F	; 79
    27f2:	f0 e0       	ldi	r31, 0x00	; 0
    27f4:	80 81       	ld	r24, Z
    27f6:	8f 7b       	andi	r24, 0xBF	; 191
    27f8:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    27fa:	af e4       	ldi	r26, 0x4F	; 79
    27fc:	b0 e0       	ldi	r27, 0x00	; 0
    27fe:	ef e4       	ldi	r30, 0x4F	; 79
    2800:	f0 e0       	ldi	r31, 0x00	; 0
    2802:	80 81       	ld	r24, Z
    2804:	8f 7e       	andi	r24, 0xEF	; 239
    2806:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2808:	af e4       	ldi	r26, 0x4F	; 79
    280a:	b0 e0       	ldi	r27, 0x00	; 0
    280c:	ef e4       	ldi	r30, 0x4F	; 79
    280e:	f0 e0       	ldi	r31, 0x00	; 0
    2810:	80 81       	ld	r24, Z
    2812:	80 68       	ori	r24, 0x80	; 128
    2814:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,TCCR1A_COM1B1);
    2816:	af e4       	ldi	r26, 0x4F	; 79
    2818:	b0 e0       	ldi	r27, 0x00	; 0
    281a:	ef e4       	ldi	r30, 0x4F	; 79
    281c:	f0 e0       	ldi	r31, 0x00	; 0
    281e:	80 81       	ld	r24, Z
    2820:	80 62       	ori	r24, 0x20	; 32
    2822:	8c 93       	st	X, r24
    2824:	39 c0       	rjmp	.+114    	; 0x2898 <M_TIMER1_voidInit+0x33c>
	break;
	case FAST_PWM_NON_INV:
		CLEAR_BIT(TCCR1A,TCCR1A_COM1A0);
    2826:	af e4       	ldi	r26, 0x4F	; 79
    2828:	b0 e0       	ldi	r27, 0x00	; 0
    282a:	ef e4       	ldi	r30, 0x4F	; 79
    282c:	f0 e0       	ldi	r31, 0x00	; 0
    282e:	80 81       	ld	r24, Z
    2830:	8f 7b       	andi	r24, 0xBF	; 191
    2832:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1A,TCCR1A_COM1B0);
    2834:	af e4       	ldi	r26, 0x4F	; 79
    2836:	b0 e0       	ldi	r27, 0x00	; 0
    2838:	ef e4       	ldi	r30, 0x4F	; 79
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	80 81       	ld	r24, Z
    283e:	8f 7e       	andi	r24, 0xEF	; 239
    2840:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    2842:	af e4       	ldi	r26, 0x4F	; 79
    2844:	b0 e0       	ldi	r27, 0x00	; 0
    2846:	ef e4       	ldi	r30, 0x4F	; 79
    2848:	f0 e0       	ldi	r31, 0x00	; 0
    284a:	80 81       	ld	r24, Z
    284c:	80 68       	ori	r24, 0x80	; 128
    284e:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    2850:	af e4       	ldi	r26, 0x4F	; 79
    2852:	b0 e0       	ldi	r27, 0x00	; 0
    2854:	ef e4       	ldi	r30, 0x4F	; 79
    2856:	f0 e0       	ldi	r31, 0x00	; 0
    2858:	80 81       	ld	r24, Z
    285a:	80 62       	ori	r24, 0x20	; 32
    285c:	8c 93       	st	X, r24
    285e:	1c c0       	rjmp	.+56     	; 0x2898 <M_TIMER1_voidInit+0x33c>
		break;
	case FAST_PWM_INV :
		SET_BIT(TCCR1A,TCCR1A_COM1A0);
    2860:	af e4       	ldi	r26, 0x4F	; 79
    2862:	b0 e0       	ldi	r27, 0x00	; 0
    2864:	ef e4       	ldi	r30, 0x4F	; 79
    2866:	f0 e0       	ldi	r31, 0x00	; 0
    2868:	80 81       	ld	r24, Z
    286a:	80 64       	ori	r24, 0x40	; 64
    286c:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B0);
    286e:	af e4       	ldi	r26, 0x4F	; 79
    2870:	b0 e0       	ldi	r27, 0x00	; 0
    2872:	ef e4       	ldi	r30, 0x4F	; 79
    2874:	f0 e0       	ldi	r31, 0x00	; 0
    2876:	80 81       	ld	r24, Z
    2878:	80 61       	ori	r24, 0x10	; 16
    287a:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1A1);
    287c:	af e4       	ldi	r26, 0x4F	; 79
    287e:	b0 e0       	ldi	r27, 0x00	; 0
    2880:	ef e4       	ldi	r30, 0x4F	; 79
    2882:	f0 e0       	ldi	r31, 0x00	; 0
    2884:	80 81       	ld	r24, Z
    2886:	80 68       	ori	r24, 0x80	; 128
    2888:	8c 93       	st	X, r24
		SET_BIT(TCCR1A,TCCR1A_COM1B1);
    288a:	af e4       	ldi	r26, 0x4F	; 79
    288c:	b0 e0       	ldi	r27, 0x00	; 0
    288e:	ef e4       	ldi	r30, 0x4F	; 79
    2890:	f0 e0       	ldi	r31, 0x00	; 0
    2892:	80 81       	ld	r24, Z
    2894:	80 62       	ori	r24, 0x20	; 32
    2896:	8c 93       	st	X, r24
		break;
	default: break;
	}


	switch(select_Prescaler){
    2898:	8b 81       	ldd	r24, Y+3	; 0x03
    289a:	28 2f       	mov	r18, r24
    289c:	30 e0       	ldi	r19, 0x00	; 0
    289e:	3d 83       	std	Y+5, r19	; 0x05
    28a0:	2c 83       	std	Y+4, r18	; 0x04
    28a2:	8c 81       	ldd	r24, Y+4	; 0x04
    28a4:	9d 81       	ldd	r25, Y+5	; 0x05
    28a6:	81 30       	cpi	r24, 0x01	; 1
    28a8:	91 05       	cpc	r25, r1
    28aa:	01 f1       	breq	.+64     	; 0x28ec <M_TIMER1_voidInit+0x390>
    28ac:	2c 81       	ldd	r18, Y+4	; 0x04
    28ae:	3d 81       	ldd	r19, Y+5	; 0x05
    28b0:	22 30       	cpi	r18, 0x02	; 2
    28b2:	31 05       	cpc	r19, r1
    28b4:	89 f1       	breq	.+98     	; 0x2918 <M_TIMER1_voidInit+0x3bc>
    28b6:	8c 81       	ldd	r24, Y+4	; 0x04
    28b8:	9d 81       	ldd	r25, Y+5	; 0x05
    28ba:	00 97       	sbiw	r24, 0x00	; 0
    28bc:	09 f0       	breq	.+2      	; 0x28c0 <M_TIMER1_voidInit+0x364>
    28be:	41 c0       	rjmp	.+130    	; 0x2942 <M_TIMER1_voidInit+0x3e6>
	case DIV_8:
		CLEAR_BIT(TCCR1B,TCCR1B_CS10);
    28c0:	ae e4       	ldi	r26, 0x4E	; 78
    28c2:	b0 e0       	ldi	r27, 0x00	; 0
    28c4:	ee e4       	ldi	r30, 0x4E	; 78
    28c6:	f0 e0       	ldi	r31, 0x00	; 0
    28c8:	80 81       	ld	r24, Z
    28ca:	8e 7f       	andi	r24, 0xFE	; 254
    28cc:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS11);
    28ce:	ae e4       	ldi	r26, 0x4E	; 78
    28d0:	b0 e0       	ldi	r27, 0x00	; 0
    28d2:	ee e4       	ldi	r30, 0x4E	; 78
    28d4:	f0 e0       	ldi	r31, 0x00	; 0
    28d6:	80 81       	ld	r24, Z
    28d8:	82 60       	ori	r24, 0x02	; 2
    28da:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,TCCR1B_CS12);
    28dc:	ae e4       	ldi	r26, 0x4E	; 78
    28de:	b0 e0       	ldi	r27, 0x00	; 0
    28e0:	ee e4       	ldi	r30, 0x4E	; 78
    28e2:	f0 e0       	ldi	r31, 0x00	; 0
    28e4:	80 81       	ld	r24, Z
    28e6:	8b 7f       	andi	r24, 0xFB	; 251
    28e8:	8c 93       	st	X, r24
    28ea:	2b c0       	rjmp	.+86     	; 0x2942 <M_TIMER1_voidInit+0x3e6>
		break;
	case DIV_64:
		SET_BIT(TCCR1B,TCCR1B_CS10);
    28ec:	ae e4       	ldi	r26, 0x4E	; 78
    28ee:	b0 e0       	ldi	r27, 0x00	; 0
    28f0:	ee e4       	ldi	r30, 0x4E	; 78
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	80 81       	ld	r24, Z
    28f6:	81 60       	ori	r24, 0x01	; 1
    28f8:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS11);
    28fa:	ae e4       	ldi	r26, 0x4E	; 78
    28fc:	b0 e0       	ldi	r27, 0x00	; 0
    28fe:	ee e4       	ldi	r30, 0x4E	; 78
    2900:	f0 e0       	ldi	r31, 0x00	; 0
    2902:	80 81       	ld	r24, Z
    2904:	82 60       	ori	r24, 0x02	; 2
    2906:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,TCCR1B_CS12);
    2908:	ae e4       	ldi	r26, 0x4E	; 78
    290a:	b0 e0       	ldi	r27, 0x00	; 0
    290c:	ee e4       	ldi	r30, 0x4E	; 78
    290e:	f0 e0       	ldi	r31, 0x00	; 0
    2910:	80 81       	ld	r24, Z
    2912:	8b 7f       	andi	r24, 0xFB	; 251
    2914:	8c 93       	st	X, r24
    2916:	15 c0       	rjmp	.+42     	; 0x2942 <M_TIMER1_voidInit+0x3e6>
		break;
	case DIV_256:
		CLEAR_BIT(TCCR1B,TCCR1B_CS10);
    2918:	ae e4       	ldi	r26, 0x4E	; 78
    291a:	b0 e0       	ldi	r27, 0x00	; 0
    291c:	ee e4       	ldi	r30, 0x4E	; 78
    291e:	f0 e0       	ldi	r31, 0x00	; 0
    2920:	80 81       	ld	r24, Z
    2922:	8e 7f       	andi	r24, 0xFE	; 254
    2924:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR1B,TCCR1B_CS11);
    2926:	ae e4       	ldi	r26, 0x4E	; 78
    2928:	b0 e0       	ldi	r27, 0x00	; 0
    292a:	ee e4       	ldi	r30, 0x4E	; 78
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	80 81       	ld	r24, Z
    2930:	8d 7f       	andi	r24, 0xFD	; 253
    2932:	8c 93       	st	X, r24
		SET_BIT(TCCR1B,TCCR1B_CS12);
    2934:	ae e4       	ldi	r26, 0x4E	; 78
    2936:	b0 e0       	ldi	r27, 0x00	; 0
    2938:	ee e4       	ldi	r30, 0x4E	; 78
    293a:	f0 e0       	ldi	r31, 0x00	; 0
    293c:	80 81       	ld	r24, Z
    293e:	84 60       	ori	r24, 0x04	; 4
    2940:	8c 93       	st	X, r24
		break;
	}
}
    2942:	29 96       	adiw	r28, 0x09	; 9
    2944:	0f b6       	in	r0, 0x3f	; 63
    2946:	f8 94       	cli
    2948:	de bf       	out	0x3e, r29	; 62
    294a:	0f be       	out	0x3f, r0	; 63
    294c:	cd bf       	out	0x3d, r28	; 61
    294e:	cf 91       	pop	r28
    2950:	df 91       	pop	r29
    2952:	08 95       	ret

00002954 <M_TIMER1_voidSetTopValue>:

/*
 * Function to set top value
 */
void M_TIMER1_voidSetTopValue(u16 topvalue,TIMER1_TopMode topMode){
    2954:	df 93       	push	r29
    2956:	cf 93       	push	r28
    2958:	00 d0       	rcall	.+0      	; 0x295a <M_TIMER1_voidSetTopValue+0x6>
    295a:	00 d0       	rcall	.+0      	; 0x295c <M_TIMER1_voidSetTopValue+0x8>
    295c:	0f 92       	push	r0
    295e:	cd b7       	in	r28, 0x3d	; 61
    2960:	de b7       	in	r29, 0x3e	; 62
    2962:	9a 83       	std	Y+2, r25	; 0x02
    2964:	89 83       	std	Y+1, r24	; 0x01
    2966:	6b 83       	std	Y+3, r22	; 0x03
	switch(topMode){
    2968:	8b 81       	ldd	r24, Y+3	; 0x03
    296a:	28 2f       	mov	r18, r24
    296c:	30 e0       	ldi	r19, 0x00	; 0
    296e:	3d 83       	std	Y+5, r19	; 0x05
    2970:	2c 83       	std	Y+4, r18	; 0x04
    2972:	8c 81       	ldd	r24, Y+4	; 0x04
    2974:	9d 81       	ldd	r25, Y+5	; 0x05
    2976:	82 30       	cpi	r24, 0x02	; 2
    2978:	91 05       	cpc	r25, r1
    297a:	21 f1       	breq	.+72     	; 0x29c4 <M_TIMER1_voidSetTopValue+0x70>
    297c:	2c 81       	ldd	r18, Y+4	; 0x04
    297e:	3d 81       	ldd	r19, Y+5	; 0x05
    2980:	23 30       	cpi	r18, 0x03	; 3
    2982:	31 05       	cpc	r19, r1
    2984:	34 f4       	brge	.+12     	; 0x2992 <M_TIMER1_voidSetTopValue+0x3e>
    2986:	8c 81       	ldd	r24, Y+4	; 0x04
    2988:	9d 81       	ldd	r25, Y+5	; 0x05
    298a:	81 30       	cpi	r24, 0x01	; 1
    298c:	91 05       	cpc	r25, r1
    298e:	09 f1       	breq	.+66     	; 0x29d2 <M_TIMER1_voidSetTopValue+0x7e>
    2990:	26 c0       	rjmp	.+76     	; 0x29de <M_TIMER1_voidSetTopValue+0x8a>
    2992:	2c 81       	ldd	r18, Y+4	; 0x04
    2994:	3d 81       	ldd	r19, Y+5	; 0x05
    2996:	23 30       	cpi	r18, 0x03	; 3
    2998:	31 05       	cpc	r19, r1
    299a:	31 f0       	breq	.+12     	; 0x29a8 <M_TIMER1_voidSetTopValue+0x54>
    299c:	8c 81       	ldd	r24, Y+4	; 0x04
    299e:	9d 81       	ldd	r25, Y+5	; 0x05
    29a0:	84 30       	cpi	r24, 0x04	; 4
    29a2:	91 05       	cpc	r25, r1
    29a4:	41 f0       	breq	.+16     	; 0x29b6 <M_TIMER1_voidSetTopValue+0x62>
    29a6:	1b c0       	rjmp	.+54     	; 0x29de <M_TIMER1_voidSetTopValue+0x8a>
	case TOP_FPWM_ICR1 :  ICR1 = topvalue; break;
    29a8:	e6 e4       	ldi	r30, 0x46	; 70
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	89 81       	ldd	r24, Y+1	; 0x01
    29ae:	9a 81       	ldd	r25, Y+2	; 0x02
    29b0:	91 83       	std	Z+1, r25	; 0x01
    29b2:	80 83       	st	Z, r24
    29b4:	14 c0       	rjmp	.+40     	; 0x29de <M_TIMER1_voidSetTopValue+0x8a>
	case TOP_FPWM_OCR1A : OCR1A = topvalue; break;
    29b6:	ea e4       	ldi	r30, 0x4A	; 74
    29b8:	f0 e0       	ldi	r31, 0x00	; 0
    29ba:	89 81       	ldd	r24, Y+1	; 0x01
    29bc:	9a 81       	ldd	r25, Y+2	; 0x02
    29be:	91 83       	std	Z+1, r25	; 0x01
    29c0:	80 83       	st	Z, r24
    29c2:	0d c0       	rjmp	.+26     	; 0x29de <M_TIMER1_voidSetTopValue+0x8a>
	case TOP_CTC_ICR1 :   ICR1 = topvalue; break;
    29c4:	e6 e4       	ldi	r30, 0x46	; 70
    29c6:	f0 e0       	ldi	r31, 0x00	; 0
    29c8:	89 81       	ldd	r24, Y+1	; 0x01
    29ca:	9a 81       	ldd	r25, Y+2	; 0x02
    29cc:	91 83       	std	Z+1, r25	; 0x01
    29ce:	80 83       	st	Z, r24
    29d0:	06 c0       	rjmp	.+12     	; 0x29de <M_TIMER1_voidSetTopValue+0x8a>
	case TOP_CTC_OCR1A :  OCR1A  = topvalue; break;
    29d2:	ea e4       	ldi	r30, 0x4A	; 74
    29d4:	f0 e0       	ldi	r31, 0x00	; 0
    29d6:	89 81       	ldd	r24, Y+1	; 0x01
    29d8:	9a 81       	ldd	r25, Y+2	; 0x02
    29da:	91 83       	std	Z+1, r25	; 0x01
    29dc:	80 83       	st	Z, r24
	default: break;
	}
}
    29de:	0f 90       	pop	r0
    29e0:	0f 90       	pop	r0
    29e2:	0f 90       	pop	r0
    29e4:	0f 90       	pop	r0
    29e6:	0f 90       	pop	r0
    29e8:	cf 91       	pop	r28
    29ea:	df 91       	pop	r29
    29ec:	08 95       	ret

000029ee <M_TIMER1_voidSetDutyCycle>:
void M_TIMER1_voidSetDutyCycle(u16 duty_cycle){
    29ee:	df 93       	push	r29
    29f0:	cf 93       	push	r28
    29f2:	00 d0       	rcall	.+0      	; 0x29f4 <M_TIMER1_voidSetDutyCycle+0x6>
    29f4:	cd b7       	in	r28, 0x3d	; 61
    29f6:	de b7       	in	r29, 0x3e	; 62
    29f8:	9a 83       	std	Y+2, r25	; 0x02
    29fa:	89 83       	std	Y+1, r24	; 0x01
	OCR1A = duty_cycle;
    29fc:	ea e4       	ldi	r30, 0x4A	; 74
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	89 81       	ldd	r24, Y+1	; 0x01
    2a02:	9a 81       	ldd	r25, Y+2	; 0x02
    2a04:	91 83       	std	Z+1, r25	; 0x01
    2a06:	80 83       	st	Z, r24
}
    2a08:	0f 90       	pop	r0
    2a0a:	0f 90       	pop	r0
    2a0c:	cf 91       	pop	r28
    2a0e:	df 91       	pop	r29
    2a10:	08 95       	ret

00002a12 <M_TIMER1_voidIcuEdgeSelect>:

void M_TIMER1_voidIcuEdgeSelect(TIMER1_IcuEdgeType  edge_select){
    2a12:	df 93       	push	r29
    2a14:	cf 93       	push	r28
    2a16:	00 d0       	rcall	.+0      	; 0x2a18 <M_TIMER1_voidIcuEdgeSelect+0x6>
    2a18:	0f 92       	push	r0
    2a1a:	cd b7       	in	r28, 0x3d	; 61
    2a1c:	de b7       	in	r29, 0x3e	; 62
    2a1e:	89 83       	std	Y+1, r24	; 0x01
	switch  (edge_select){
    2a20:	89 81       	ldd	r24, Y+1	; 0x01
    2a22:	28 2f       	mov	r18, r24
    2a24:	30 e0       	ldi	r19, 0x00	; 0
    2a26:	3b 83       	std	Y+3, r19	; 0x03
    2a28:	2a 83       	std	Y+2, r18	; 0x02
    2a2a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a2c:	9b 81       	ldd	r25, Y+3	; 0x03
    2a2e:	00 97       	sbiw	r24, 0x00	; 0
    2a30:	31 f0       	breq	.+12     	; 0x2a3e <M_TIMER1_voidIcuEdgeSelect+0x2c>
    2a32:	2a 81       	ldd	r18, Y+2	; 0x02
    2a34:	3b 81       	ldd	r19, Y+3	; 0x03
    2a36:	21 30       	cpi	r18, 0x01	; 1
    2a38:	31 05       	cpc	r19, r1
    2a3a:	49 f0       	breq	.+18     	; 0x2a4e <M_TIMER1_voidIcuEdgeSelect+0x3c>
    2a3c:	0f c0       	rjmp	.+30     	; 0x2a5c <M_TIMER1_voidIcuEdgeSelect+0x4a>
	case RISING_EDGE:   SET_BIT   (TCCR1B,TCCR1B_ICES1);break;
    2a3e:	ae e4       	ldi	r26, 0x4E	; 78
    2a40:	b0 e0       	ldi	r27, 0x00	; 0
    2a42:	ee e4       	ldi	r30, 0x4E	; 78
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	80 81       	ld	r24, Z
    2a48:	80 64       	ori	r24, 0x40	; 64
    2a4a:	8c 93       	st	X, r24
    2a4c:	07 c0       	rjmp	.+14     	; 0x2a5c <M_TIMER1_voidIcuEdgeSelect+0x4a>
	case FALLING_EDGE:  CLEAR_BIT (TCCR1B,TCCR1B_ICES1);break;
    2a4e:	ae e4       	ldi	r26, 0x4E	; 78
    2a50:	b0 e0       	ldi	r27, 0x00	; 0
    2a52:	ee e4       	ldi	r30, 0x4E	; 78
    2a54:	f0 e0       	ldi	r31, 0x00	; 0
    2a56:	80 81       	ld	r24, Z
    2a58:	8f 7b       	andi	r24, 0xBF	; 191
    2a5a:	8c 93       	st	X, r24
	default:break;
	}
}
    2a5c:	0f 90       	pop	r0
    2a5e:	0f 90       	pop	r0
    2a60:	0f 90       	pop	r0
    2a62:	cf 91       	pop	r28
    2a64:	df 91       	pop	r29
    2a66:	08 95       	ret

00002a68 <M_TIMER1_voidEnbaleIcu_Interrupt>:

void M_TIMER1_voidEnbaleIcu_Interrupt(void){
    2a68:	df 93       	push	r29
    2a6a:	cf 93       	push	r28
    2a6c:	cd b7       	in	r28, 0x3d	; 61
    2a6e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(TIMSK,TIMSK_TICIE1);
    2a70:	a9 e5       	ldi	r26, 0x59	; 89
    2a72:	b0 e0       	ldi	r27, 0x00	; 0
    2a74:	e9 e5       	ldi	r30, 0x59	; 89
    2a76:	f0 e0       	ldi	r31, 0x00	; 0
    2a78:	80 81       	ld	r24, Z
    2a7a:	80 62       	ori	r24, 0x20	; 32
    2a7c:	8c 93       	st	X, r24
}
    2a7e:	cf 91       	pop	r28
    2a80:	df 91       	pop	r29
    2a82:	08 95       	ret

00002a84 <M_TIMER1_voidDisabaleIcu_Interrupt>:
void M_TIMER1_voidDisabaleIcu_Interrupt(void){
    2a84:	df 93       	push	r29
    2a86:	cf 93       	push	r28
    2a88:	cd b7       	in	r28, 0x3d	; 61
    2a8a:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TIMSK,TIMSK_TICIE1);
    2a8c:	a9 e5       	ldi	r26, 0x59	; 89
    2a8e:	b0 e0       	ldi	r27, 0x00	; 0
    2a90:	e9 e5       	ldi	r30, 0x59	; 89
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	80 81       	ld	r24, Z
    2a96:	8f 7d       	andi	r24, 0xDF	; 223
    2a98:	8c 93       	st	X, r24
}
    2a9a:	cf 91       	pop	r28
    2a9c:	df 91       	pop	r29
    2a9e:	08 95       	ret

00002aa0 <M_TIMER1_u16GetOcrValue>:

u16 M_TIMER1_u16GetOcrValue(void){
    2aa0:	df 93       	push	r29
    2aa2:	cf 93       	push	r28
    2aa4:	cd b7       	in	r28, 0x3d	; 61
    2aa6:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    2aa8:	e6 e4       	ldi	r30, 0x46	; 70
    2aaa:	f0 e0       	ldi	r31, 0x00	; 0
    2aac:	80 81       	ld	r24, Z
    2aae:	91 81       	ldd	r25, Z+1	; 0x01
}
    2ab0:	cf 91       	pop	r28
    2ab2:	df 91       	pop	r29
    2ab4:	08 95       	ret

00002ab6 <M_TIMER1_voidSetCallBack>:
void M_TIMER1_voidSetCallBack(void (*l_pf)(void)){
    2ab6:	df 93       	push	r29
    2ab8:	cf 93       	push	r28
    2aba:	00 d0       	rcall	.+0      	; 0x2abc <M_TIMER1_voidSetCallBack+0x6>
    2abc:	cd b7       	in	r28, 0x3d	; 61
    2abe:	de b7       	in	r29, 0x3e	; 62
    2ac0:	9a 83       	std	Y+2, r25	; 0x02
    2ac2:	89 83       	std	Y+1, r24	; 0x01
	pf_icu = l_pf;
    2ac4:	89 81       	ldd	r24, Y+1	; 0x01
    2ac6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac8:	90 93 48 02 	sts	0x0248, r25
    2acc:	80 93 47 02 	sts	0x0247, r24
}
    2ad0:	0f 90       	pop	r0
    2ad2:	0f 90       	pop	r0
    2ad4:	cf 91       	pop	r28
    2ad6:	df 91       	pop	r29
    2ad8:	08 95       	ret

00002ada <ICU_clearTimerValue>:
void ICU_clearTimerValue(void)
{
    2ada:	df 93       	push	r29
    2adc:	cf 93       	push	r28
    2ade:	cd b7       	in	r28, 0x3d	; 61
    2ae0:	de b7       	in	r29, 0x3e	; 62
	TCNT1=0;
    2ae2:	ec e4       	ldi	r30, 0x4C	; 76
    2ae4:	f0 e0       	ldi	r31, 0x00	; 0
    2ae6:	11 82       	std	Z+1, r1	; 0x01
    2ae8:	10 82       	st	Z, r1
	ICR1 = 0;
    2aea:	e6 e4       	ldi	r30, 0x46	; 70
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	11 82       	std	Z+1, r1	; 0x01
    2af0:	10 82       	st	Z, r1
}
    2af2:	cf 91       	pop	r28
    2af4:	df 91       	pop	r29
    2af6:	08 95       	ret

00002af8 <__vector_6>:
/*************************** Set ISR ********************************/

void __vector_6(void)       __attribute__((signal));
void __vector_6(void){
    2af8:	1f 92       	push	r1
    2afa:	0f 92       	push	r0
    2afc:	0f b6       	in	r0, 0x3f	; 63
    2afe:	0f 92       	push	r0
    2b00:	11 24       	eor	r1, r1
    2b02:	2f 93       	push	r18
    2b04:	3f 93       	push	r19
    2b06:	4f 93       	push	r20
    2b08:	5f 93       	push	r21
    2b0a:	6f 93       	push	r22
    2b0c:	7f 93       	push	r23
    2b0e:	8f 93       	push	r24
    2b10:	9f 93       	push	r25
    2b12:	af 93       	push	r26
    2b14:	bf 93       	push	r27
    2b16:	ef 93       	push	r30
    2b18:	ff 93       	push	r31
    2b1a:	df 93       	push	r29
    2b1c:	cf 93       	push	r28
    2b1e:	cd b7       	in	r28, 0x3d	; 61
    2b20:	de b7       	in	r29, 0x3e	; 62
	if(pf_icu != NULL_PTR ){
    2b22:	80 91 47 02 	lds	r24, 0x0247
    2b26:	90 91 48 02 	lds	r25, 0x0248
    2b2a:	00 97       	sbiw	r24, 0x00	; 0
    2b2c:	29 f0       	breq	.+10     	; 0x2b38 <__vector_6+0x40>
		(*pf_icu)();
    2b2e:	e0 91 47 02 	lds	r30, 0x0247
    2b32:	f0 91 48 02 	lds	r31, 0x0248
    2b36:	09 95       	icall
	}
}
    2b38:	cf 91       	pop	r28
    2b3a:	df 91       	pop	r29
    2b3c:	ff 91       	pop	r31
    2b3e:	ef 91       	pop	r30
    2b40:	bf 91       	pop	r27
    2b42:	af 91       	pop	r26
    2b44:	9f 91       	pop	r25
    2b46:	8f 91       	pop	r24
    2b48:	7f 91       	pop	r23
    2b4a:	6f 91       	pop	r22
    2b4c:	5f 91       	pop	r21
    2b4e:	4f 91       	pop	r20
    2b50:	3f 91       	pop	r19
    2b52:	2f 91       	pop	r18
    2b54:	0f 90       	pop	r0
    2b56:	0f be       	out	0x3f, r0	; 63
    2b58:	0f 90       	pop	r0
    2b5a:	1f 90       	pop	r1
    2b5c:	18 95       	reti

00002b5e <MADC_voidInit>:
#include "adc_interface.h"
#include "adc_register.h"
#include "adc_private.h"
#include "adc_config.h"

void MADC_voidInit(ADC_ConfigType *config_ptr){
    2b5e:	df 93       	push	r29
    2b60:	cf 93       	push	r28
    2b62:	00 d0       	rcall	.+0      	; 0x2b64 <MADC_voidInit+0x6>
    2b64:	cd b7       	in	r28, 0x3d	; 61
    2b66:	de b7       	in	r29, 0x3e	; 62
    2b68:	9a 83       	std	Y+2, r25	; 0x02
    2b6a:	89 83       	std	Y+1, r24	; 0x01
	 * ADMUX Register Bits Description:
	 * REFS1:0 = 00 to choose to connect external reference voltage by input this voltage through AREF pin
	 * ADLAR   = 0 right adjusted
	 * MUX4:0  = 00000 to choose channel 0 as initialization
	 */
	ADMUX = ((config_ptr->reference)<<6);
    2b6c:	a7 e2       	ldi	r26, 0x27	; 39
    2b6e:	b0 e0       	ldi	r27, 0x00	; 0
    2b70:	e9 81       	ldd	r30, Y+1	; 0x01
    2b72:	fa 81       	ldd	r31, Y+2	; 0x02
    2b74:	81 81       	ldd	r24, Z+1	; 0x01
    2b76:	82 95       	swap	r24
    2b78:	88 0f       	add	r24, r24
    2b7a:	88 0f       	add	r24, r24
    2b7c:	80 7c       	andi	r24, 0xC0	; 192
    2b7e:	8c 93       	st	X, r24
	 * ADEN    = 1 Enable ADC
	 * ADIE    = 0 Disable ADC Interrupt
	 * ADATE   = 0 Disable Auto Trigger
	 * ADPS2:0 = 011 to choose ADC_Clock = F_CPU/8 = 1Mhz/8 = 125Khz --> ADC must operate in range 50-200Khz
	 */
	ADCSRA = (1<<ADCSRA_ADEN) | (config_ptr->prescaler);
    2b80:	a6 e2       	ldi	r26, 0x26	; 38
    2b82:	b0 e0       	ldi	r27, 0x00	; 0
    2b84:	e9 81       	ldd	r30, Y+1	; 0x01
    2b86:	fa 81       	ldd	r31, Y+2	; 0x02
    2b88:	82 81       	ldd	r24, Z+2	; 0x02
    2b8a:	80 68       	ori	r24, 0x80	; 128
    2b8c:	8c 93       	st	X, r24
	/* Auto trigger mode selection */
	SFIOR |= ((config_ptr->trigger_mode)<<5);
    2b8e:	a0 e5       	ldi	r26, 0x50	; 80
    2b90:	b0 e0       	ldi	r27, 0x00	; 0
    2b92:	e0 e5       	ldi	r30, 0x50	; 80
    2b94:	f0 e0       	ldi	r31, 0x00	; 0
    2b96:	80 81       	ld	r24, Z
    2b98:	28 2f       	mov	r18, r24
    2b9a:	e9 81       	ldd	r30, Y+1	; 0x01
    2b9c:	fa 81       	ldd	r31, Y+2	; 0x02
    2b9e:	80 81       	ld	r24, Z
    2ba0:	88 2f       	mov	r24, r24
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	88 0f       	add	r24, r24
    2ba6:	99 1f       	adc	r25, r25
    2ba8:	82 95       	swap	r24
    2baa:	92 95       	swap	r25
    2bac:	90 7f       	andi	r25, 0xF0	; 240
    2bae:	98 27       	eor	r25, r24
    2bb0:	80 7f       	andi	r24, 0xF0	; 240
    2bb2:	98 27       	eor	r25, r24
    2bb4:	82 2b       	or	r24, r18
    2bb6:	8c 93       	st	X, r24

}
    2bb8:	0f 90       	pop	r0
    2bba:	0f 90       	pop	r0
    2bbc:	cf 91       	pop	r28
    2bbe:	df 91       	pop	r29
    2bc0:	08 95       	ret

00002bc2 <MADC_u16ReadChannel>:
u16  MADC_u16ReadChannel(u8 channel){
    2bc2:	df 93       	push	r29
    2bc4:	cf 93       	push	r28
    2bc6:	0f 92       	push	r0
    2bc8:	cd b7       	in	r28, 0x3d	; 61
    2bca:	de b7       	in	r29, 0x3e	; 62
    2bcc:	89 83       	std	Y+1, r24	; 0x01

	/* To select Channel */
	ADMUX = (ADMUX & 0xE0) | (channel & 0x07) ;
    2bce:	a7 e2       	ldi	r26, 0x27	; 39
    2bd0:	b0 e0       	ldi	r27, 0x00	; 0
    2bd2:	e7 e2       	ldi	r30, 0x27	; 39
    2bd4:	f0 e0       	ldi	r31, 0x00	; 0
    2bd6:	80 81       	ld	r24, Z
    2bd8:	98 2f       	mov	r25, r24
    2bda:	90 7e       	andi	r25, 0xE0	; 224
    2bdc:	89 81       	ldd	r24, Y+1	; 0x01
    2bde:	87 70       	andi	r24, 0x07	; 7
    2be0:	89 2b       	or	r24, r25
    2be2:	8c 93       	st	X, r24
	/* Start conversion by setting bit in ADSC */
	SET_BIT(ADCSRA,ADCSRA_ADSC);
    2be4:	a6 e2       	ldi	r26, 0x26	; 38
    2be6:	b0 e0       	ldi	r27, 0x00	; 0
    2be8:	e6 e2       	ldi	r30, 0x26	; 38
    2bea:	f0 e0       	ldi	r31, 0x00	; 0
    2bec:	80 81       	ld	r24, Z
    2bee:	80 64       	ori	r24, 0x40	; 64
    2bf0:	8c 93       	st	X, r24
	/* Wait until finishing the conversion by polling on it */
	while(BIT_IS_CLEAR(ADCSRA,ADCSRA_ADIF));
    2bf2:	e6 e2       	ldi	r30, 0x26	; 38
    2bf4:	f0 e0       	ldi	r31, 0x00	; 0
    2bf6:	80 81       	ld	r24, Z
    2bf8:	88 2f       	mov	r24, r24
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	80 71       	andi	r24, 0x10	; 16
    2bfe:	90 70       	andi	r25, 0x00	; 0
    2c00:	00 97       	sbiw	r24, 0x00	; 0
    2c02:	b9 f3       	breq	.-18     	; 0x2bf2 <MADC_u16ReadChannel+0x30>
	/* Clear Interrupt flag */
	SET_BIT(ADCSRA,ADCSRA_ADIF);
    2c04:	a6 e2       	ldi	r26, 0x26	; 38
    2c06:	b0 e0       	ldi	r27, 0x00	; 0
    2c08:	e6 e2       	ldi	r30, 0x26	; 38
    2c0a:	f0 e0       	ldi	r31, 0x00	; 0
    2c0c:	80 81       	ld	r24, Z
    2c0e:	80 61       	ori	r24, 0x10	; 16
    2c10:	8c 93       	st	X, r24
	/* Return digital signal in ADC register */
	return ADC_DATA_REG;
    2c12:	e4 e2       	ldi	r30, 0x24	; 36
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	80 81       	ld	r24, Z
    2c18:	91 81       	ldd	r25, Z+1	; 0x01

}
    2c1a:	0f 90       	pop	r0
    2c1c:	cf 91       	pop	r28
    2c1e:	df 91       	pop	r29
    2c20:	08 95       	ret

00002c22 <HLCD_voidInit>:
#include "hlcd_interface.h"
#include "hlcd_private.h"



void HLCD_voidInit(void){
    2c22:	df 93       	push	r29
    2c24:	cf 93       	push	r28
    2c26:	cd b7       	in	r28, 0x3d	; 61
    2c28:	de b7       	in	r29, 0x3e	; 62
    2c2a:	2e 97       	sbiw	r28, 0x0e	; 14
    2c2c:	0f b6       	in	r0, 0x3f	; 63
    2c2e:	f8 94       	cli
    2c30:	de bf       	out	0x3e, r29	; 62
    2c32:	0f be       	out	0x3f, r0	; 63
    2c34:	cd bf       	out	0x3d, r28	; 61
    2c36:	80 e0       	ldi	r24, 0x00	; 0
    2c38:	90 e0       	ldi	r25, 0x00	; 0
    2c3a:	a0 e2       	ldi	r26, 0x20	; 32
    2c3c:	b2 e4       	ldi	r27, 0x42	; 66
    2c3e:	8b 87       	std	Y+11, r24	; 0x0b
    2c40:	9c 87       	std	Y+12, r25	; 0x0c
    2c42:	ad 87       	std	Y+13, r26	; 0x0d
    2c44:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c46:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c48:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c4a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c4c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c4e:	20 e0       	ldi	r18, 0x00	; 0
    2c50:	30 e0       	ldi	r19, 0x00	; 0
    2c52:	4a ef       	ldi	r20, 0xFA	; 250
    2c54:	54 e4       	ldi	r21, 0x44	; 68
    2c56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c5a:	dc 01       	movw	r26, r24
    2c5c:	cb 01       	movw	r24, r22
    2c5e:	8f 83       	std	Y+7, r24	; 0x07
    2c60:	98 87       	std	Y+8, r25	; 0x08
    2c62:	a9 87       	std	Y+9, r26	; 0x09
    2c64:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2c66:	6f 81       	ldd	r22, Y+7	; 0x07
    2c68:	78 85       	ldd	r23, Y+8	; 0x08
    2c6a:	89 85       	ldd	r24, Y+9	; 0x09
    2c6c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c6e:	20 e0       	ldi	r18, 0x00	; 0
    2c70:	30 e0       	ldi	r19, 0x00	; 0
    2c72:	40 e8       	ldi	r20, 0x80	; 128
    2c74:	5f e3       	ldi	r21, 0x3F	; 63
    2c76:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c7a:	88 23       	and	r24, r24
    2c7c:	2c f4       	brge	.+10     	; 0x2c88 <HLCD_voidInit+0x66>
		__ticks = 1;
    2c7e:	81 e0       	ldi	r24, 0x01	; 1
    2c80:	90 e0       	ldi	r25, 0x00	; 0
    2c82:	9e 83       	std	Y+6, r25	; 0x06
    2c84:	8d 83       	std	Y+5, r24	; 0x05
    2c86:	3f c0       	rjmp	.+126    	; 0x2d06 <HLCD_voidInit+0xe4>
	else if (__tmp > 65535)
    2c88:	6f 81       	ldd	r22, Y+7	; 0x07
    2c8a:	78 85       	ldd	r23, Y+8	; 0x08
    2c8c:	89 85       	ldd	r24, Y+9	; 0x09
    2c8e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	3f ef       	ldi	r19, 0xFF	; 255
    2c94:	4f e7       	ldi	r20, 0x7F	; 127
    2c96:	57 e4       	ldi	r21, 0x47	; 71
    2c98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c9c:	18 16       	cp	r1, r24
    2c9e:	4c f5       	brge	.+82     	; 0x2cf2 <HLCD_voidInit+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ca0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ca2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ca4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ca6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	40 e2       	ldi	r20, 0x20	; 32
    2cae:	51 e4       	ldi	r21, 0x41	; 65
    2cb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2cb4:	dc 01       	movw	r26, r24
    2cb6:	cb 01       	movw	r24, r22
    2cb8:	bc 01       	movw	r22, r24
    2cba:	cd 01       	movw	r24, r26
    2cbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cc0:	dc 01       	movw	r26, r24
    2cc2:	cb 01       	movw	r24, r22
    2cc4:	9e 83       	std	Y+6, r25	; 0x06
    2cc6:	8d 83       	std	Y+5, r24	; 0x05
    2cc8:	0f c0       	rjmp	.+30     	; 0x2ce8 <HLCD_voidInit+0xc6>
    2cca:	88 ec       	ldi	r24, 0xC8	; 200
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	9c 83       	std	Y+4, r25	; 0x04
    2cd0:	8b 83       	std	Y+3, r24	; 0x03
    2cd2:	8b 81       	ldd	r24, Y+3	; 0x03
    2cd4:	9c 81       	ldd	r25, Y+4	; 0x04
    2cd6:	01 97       	sbiw	r24, 0x01	; 1
    2cd8:	f1 f7       	brne	.-4      	; 0x2cd6 <HLCD_voidInit+0xb4>
    2cda:	9c 83       	std	Y+4, r25	; 0x04
    2cdc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cde:	8d 81       	ldd	r24, Y+5	; 0x05
    2ce0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ce2:	01 97       	sbiw	r24, 0x01	; 1
    2ce4:	9e 83       	std	Y+6, r25	; 0x06
    2ce6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ce8:	8d 81       	ldd	r24, Y+5	; 0x05
    2cea:	9e 81       	ldd	r25, Y+6	; 0x06
    2cec:	00 97       	sbiw	r24, 0x00	; 0
    2cee:	69 f7       	brne	.-38     	; 0x2cca <HLCD_voidInit+0xa8>
    2cf0:	14 c0       	rjmp	.+40     	; 0x2d1a <HLCD_voidInit+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cf2:	6f 81       	ldd	r22, Y+7	; 0x07
    2cf4:	78 85       	ldd	r23, Y+8	; 0x08
    2cf6:	89 85       	ldd	r24, Y+9	; 0x09
    2cf8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2cfe:	dc 01       	movw	r26, r24
    2d00:	cb 01       	movw	r24, r22
    2d02:	9e 83       	std	Y+6, r25	; 0x06
    2d04:	8d 83       	std	Y+5, r24	; 0x05
    2d06:	8d 81       	ldd	r24, Y+5	; 0x05
    2d08:	9e 81       	ldd	r25, Y+6	; 0x06
    2d0a:	9a 83       	std	Y+2, r25	; 0x02
    2d0c:	89 83       	std	Y+1, r24	; 0x01
    2d0e:	89 81       	ldd	r24, Y+1	; 0x01
    2d10:	9a 81       	ldd	r25, Y+2	; 0x02
    2d12:	01 97       	sbiw	r24, 0x01	; 1
    2d14:	f1 f7       	brne	.-4      	; 0x2d12 <HLCD_voidInit+0xf0>
    2d16:	9a 83       	std	Y+2, r25	; 0x02
    2d18:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(40);
#if LCD_DATA_BITS_MODE == 8
	/* Send command Function set */
	HLCD_voidSendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
#elif LCD_DATA_BITS_MODE == 4
	HLCD_voidSendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT1); /* LCD 2 lines 4 bit mode */
    2d1a:	83 e3       	ldi	r24, 0x33	; 51
    2d1c:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <HLCD_voidSendCommand>
	HLCD_voidSendCommand(LCD_TWO_LINES_FOUR_BITS_MODE_INIT2);
    2d20:	82 e3       	ldi	r24, 0x32	; 50
    2d22:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <HLCD_voidSendCommand>
	HLCD_voidSendCommand(LCD_TWO_LINES_FOUR_BITS_MODE); /* 4 bits + 2 Lines + 5x7 mode command */
    2d26:	8c e2       	ldi	r24, 0x2C	; 44
    2d28:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <HLCD_voidSendCommand>
#endif
	/* Send Command to display ON/OFF control */
	HLCD_voidSendCommand(DISPLAY_CURSOR_OFF_COMMAND);
    2d2c:	8c e0       	ldi	r24, 0x0C	; 12
    2d2e:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <HLCD_voidSendCommand>
	/* Send command to Clear screen */
	HLCD_voidSendCommand(CLEAR_COMMAND);
    2d32:	81 e0       	ldi	r24, 0x01	; 1
    2d34:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <HLCD_voidSendCommand>
}
    2d38:	2e 96       	adiw	r28, 0x0e	; 14
    2d3a:	0f b6       	in	r0, 0x3f	; 63
    2d3c:	f8 94       	cli
    2d3e:	de bf       	out	0x3e, r29	; 62
    2d40:	0f be       	out	0x3f, r0	; 63
    2d42:	cd bf       	out	0x3d, r28	; 61
    2d44:	cf 91       	pop	r28
    2d46:	df 91       	pop	r29
    2d48:	08 95       	ret

00002d4a <HLCD_voidSendCommand>:

void HLCD_voidSendCommand(u8 Copy_u8command){
    2d4a:	df 93       	push	r29
    2d4c:	cf 93       	push	r28
    2d4e:	cd b7       	in	r28, 0x3d	; 61
    2d50:	de b7       	in	r29, 0x3e	; 62
    2d52:	6d 97       	sbiw	r28, 0x1d	; 29
    2d54:	0f b6       	in	r0, 0x3f	; 63
    2d56:	f8 94       	cli
    2d58:	de bf       	out	0x3e, r29	; 62
    2d5a:	0f be       	out	0x3f, r0	; 63
    2d5c:	cd bf       	out	0x3d, r28	; 61
    2d5e:	8d 8f       	std	Y+29, r24	; 0x1d
	/* Clr RS to send command */
	MDIO_errorStateSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_LOW);
    2d60:	83 e0       	ldi	r24, 0x03	; 3
    2d62:	62 e0       	ldi	r22, 0x02	; 2
    2d64:	40 e0       	ldi	r20, 0x00	; 0
    2d66:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <MDIO_errorStateSetPinValue>
	//MDIO_errorStateSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_LOW);
#if LCD_DATA_BITS_MODE == 8
	/* Send Data */
	MDIO_errorStateSetPortValue(LCD_PORT_DATA,Copy_u8command);
#elif LCD_DATA_BITS_MODE == 4
	MDIO_errorStateSetPinValue(LCD_PORT_DATA,LCD_DB4_PIN,GET_BIT(Copy_u8command,4));
    2d6a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d6c:	82 95       	swap	r24
    2d6e:	8f 70       	andi	r24, 0x0F	; 15
    2d70:	98 2f       	mov	r25, r24
    2d72:	91 70       	andi	r25, 0x01	; 1
    2d74:	83 e0       	ldi	r24, 0x03	; 3
    2d76:	64 e0       	ldi	r22, 0x04	; 4
    2d78:	49 2f       	mov	r20, r25
    2d7a:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <MDIO_errorStateSetPinValue>
	MDIO_errorStateSetPinValue(LCD_PORT_DATA,LCD_DB5_PIN,GET_BIT(Copy_u8command,5));
    2d7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d80:	82 95       	swap	r24
    2d82:	86 95       	lsr	r24
    2d84:	87 70       	andi	r24, 0x07	; 7
    2d86:	98 2f       	mov	r25, r24
    2d88:	91 70       	andi	r25, 0x01	; 1
    2d8a:	83 e0       	ldi	r24, 0x03	; 3
    2d8c:	65 e0       	ldi	r22, 0x05	; 5
    2d8e:	49 2f       	mov	r20, r25
    2d90:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <MDIO_errorStateSetPinValue>
	MDIO_errorStateSetPinValue(LCD_PORT_DATA,LCD_DB6_PIN,GET_BIT(Copy_u8command,6));
    2d94:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2d96:	82 95       	swap	r24
    2d98:	86 95       	lsr	r24
    2d9a:	86 95       	lsr	r24
    2d9c:	83 70       	andi	r24, 0x03	; 3
    2d9e:	98 2f       	mov	r25, r24
    2da0:	91 70       	andi	r25, 0x01	; 1
    2da2:	83 e0       	ldi	r24, 0x03	; 3
    2da4:	66 e0       	ldi	r22, 0x06	; 6
    2da6:	49 2f       	mov	r20, r25
    2da8:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <MDIO_errorStateSetPinValue>
	MDIO_errorStateSetPinValue(LCD_PORT_DATA,LCD_DB7_PIN,GET_BIT(Copy_u8command,7));
    2dac:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2dae:	98 2f       	mov	r25, r24
    2db0:	99 1f       	adc	r25, r25
    2db2:	99 27       	eor	r25, r25
    2db4:	99 1f       	adc	r25, r25
    2db6:	83 e0       	ldi	r24, 0x03	; 3
    2db8:	67 e0       	ldi	r22, 0x07	; 7
    2dba:	49 2f       	mov	r20, r25
    2dbc:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <MDIO_errorStateSetPinValue>
	/* Set EN to make LND Micro read Copy_u8command */
	MDIO_errorStateSetPinValue(LCD_ENABLE_PORT,LCD_ENABLE_PIN,DIO_HIGH);
    2dc0:	83 e0       	ldi	r24, 0x03	; 3
    2dc2:	63 e0       	ldi	r22, 0x03	; 3
    2dc4:	41 e0       	ldi	r20, 0x01	; 1
    2dc6:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <MDIO_errorStateSetPinValue>
    2dca:	80 e0       	ldi	r24, 0x00	; 0
    2dcc:	90 e0       	ldi	r25, 0x00	; 0
    2dce:	a0 e0       	ldi	r26, 0x00	; 0
    2dd0:	b0 e4       	ldi	r27, 0x40	; 64
    2dd2:	89 8f       	std	Y+25, r24	; 0x19
    2dd4:	9a 8f       	std	Y+26, r25	; 0x1a
    2dd6:	ab 8f       	std	Y+27, r26	; 0x1b
    2dd8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dda:	69 8d       	ldd	r22, Y+25	; 0x19
    2ddc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2dde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2de0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2de2:	20 e0       	ldi	r18, 0x00	; 0
    2de4:	30 e0       	ldi	r19, 0x00	; 0
    2de6:	4a ef       	ldi	r20, 0xFA	; 250
    2de8:	54 e4       	ldi	r21, 0x44	; 68
    2dea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dee:	dc 01       	movw	r26, r24
    2df0:	cb 01       	movw	r24, r22
    2df2:	8d 8b       	std	Y+21, r24	; 0x15
    2df4:	9e 8b       	std	Y+22, r25	; 0x16
    2df6:	af 8b       	std	Y+23, r26	; 0x17
    2df8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2dfa:	6d 89       	ldd	r22, Y+21	; 0x15
    2dfc:	7e 89       	ldd	r23, Y+22	; 0x16
    2dfe:	8f 89       	ldd	r24, Y+23	; 0x17
    2e00:	98 8d       	ldd	r25, Y+24	; 0x18
    2e02:	20 e0       	ldi	r18, 0x00	; 0
    2e04:	30 e0       	ldi	r19, 0x00	; 0
    2e06:	40 e8       	ldi	r20, 0x80	; 128
    2e08:	5f e3       	ldi	r21, 0x3F	; 63
    2e0a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e0e:	88 23       	and	r24, r24
    2e10:	2c f4       	brge	.+10     	; 0x2e1c <HLCD_voidSendCommand+0xd2>
		__ticks = 1;
    2e12:	81 e0       	ldi	r24, 0x01	; 1
    2e14:	90 e0       	ldi	r25, 0x00	; 0
    2e16:	9c 8b       	std	Y+20, r25	; 0x14
    2e18:	8b 8b       	std	Y+19, r24	; 0x13
    2e1a:	3f c0       	rjmp	.+126    	; 0x2e9a <HLCD_voidSendCommand+0x150>
	else if (__tmp > 65535)
    2e1c:	6d 89       	ldd	r22, Y+21	; 0x15
    2e1e:	7e 89       	ldd	r23, Y+22	; 0x16
    2e20:	8f 89       	ldd	r24, Y+23	; 0x17
    2e22:	98 8d       	ldd	r25, Y+24	; 0x18
    2e24:	20 e0       	ldi	r18, 0x00	; 0
    2e26:	3f ef       	ldi	r19, 0xFF	; 255
    2e28:	4f e7       	ldi	r20, 0x7F	; 127
    2e2a:	57 e4       	ldi	r21, 0x47	; 71
    2e2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e30:	18 16       	cp	r1, r24
    2e32:	4c f5       	brge	.+82     	; 0x2e86 <HLCD_voidSendCommand+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e34:	69 8d       	ldd	r22, Y+25	; 0x19
    2e36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2e38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2e3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	30 e0       	ldi	r19, 0x00	; 0
    2e40:	40 e2       	ldi	r20, 0x20	; 32
    2e42:	51 e4       	ldi	r21, 0x41	; 65
    2e44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e48:	dc 01       	movw	r26, r24
    2e4a:	cb 01       	movw	r24, r22
    2e4c:	bc 01       	movw	r22, r24
    2e4e:	cd 01       	movw	r24, r26
    2e50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e54:	dc 01       	movw	r26, r24
    2e56:	cb 01       	movw	r24, r22
    2e58:	9c 8b       	std	Y+20, r25	; 0x14
    2e5a:	8b 8b       	std	Y+19, r24	; 0x13
    2e5c:	0f c0       	rjmp	.+30     	; 0x2e7c <HLCD_voidSendCommand+0x132>
    2e5e:	88 ec       	ldi	r24, 0xC8	; 200
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	9a 8b       	std	Y+18, r25	; 0x12
    2e64:	89 8b       	std	Y+17, r24	; 0x11
    2e66:	89 89       	ldd	r24, Y+17	; 0x11
    2e68:	9a 89       	ldd	r25, Y+18	; 0x12
    2e6a:	01 97       	sbiw	r24, 0x01	; 1
    2e6c:	f1 f7       	brne	.-4      	; 0x2e6a <HLCD_voidSendCommand+0x120>
    2e6e:	9a 8b       	std	Y+18, r25	; 0x12
    2e70:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e72:	8b 89       	ldd	r24, Y+19	; 0x13
    2e74:	9c 89       	ldd	r25, Y+20	; 0x14
    2e76:	01 97       	sbiw	r24, 0x01	; 1
    2e78:	9c 8b       	std	Y+20, r25	; 0x14
    2e7a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e7c:	8b 89       	ldd	r24, Y+19	; 0x13
    2e7e:	9c 89       	ldd	r25, Y+20	; 0x14
    2e80:	00 97       	sbiw	r24, 0x00	; 0
    2e82:	69 f7       	brne	.-38     	; 0x2e5e <HLCD_voidSendCommand+0x114>
    2e84:	14 c0       	rjmp	.+40     	; 0x2eae <HLCD_voidSendCommand+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e86:	6d 89       	ldd	r22, Y+21	; 0x15
    2e88:	7e 89       	ldd	r23, Y+22	; 0x16
    2e8a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e8c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	9c 8b       	std	Y+20, r25	; 0x14
    2e98:	8b 8b       	std	Y+19, r24	; 0x13
    2e9a:	8b 89       	ldd	r24, Y+19	; 0x13
    2e9c:	9c 89       	ldd	r25, Y+20	; 0x14
    2e9e:	98 8b       	std	Y+16, r25	; 0x10
    2ea0:	8f 87       	std	Y+15, r24	; 0x0f
    2ea2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ea4:	98 89       	ldd	r25, Y+16	; 0x10
    2ea6:	01 97       	sbiw	r24, 0x01	; 1
    2ea8:	f1 f7       	brne	.-4      	; 0x2ea6 <HLCD_voidSendCommand+0x15c>
    2eaa:	98 8b       	std	Y+16, r25	; 0x10
    2eac:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(2);
	MDIO_errorStateSetPinValue(LCD_ENABLE_PORT,LCD_ENABLE_PIN,DIO_LOW);
    2eae:	83 e0       	ldi	r24, 0x03	; 3
    2eb0:	63 e0       	ldi	r22, 0x03	; 3
    2eb2:	40 e0       	ldi	r20, 0x00	; 0
    2eb4:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <MDIO_errorStateSetPinValue>

	MDIO_errorStateSetPinValue(LCD_PORT_DATA,LCD_DB4_PIN,GET_BIT(Copy_u8command,0));
    2eb8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2eba:	98 2f       	mov	r25, r24
    2ebc:	91 70       	andi	r25, 0x01	; 1
    2ebe:	83 e0       	ldi	r24, 0x03	; 3
    2ec0:	64 e0       	ldi	r22, 0x04	; 4
    2ec2:	49 2f       	mov	r20, r25
    2ec4:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <MDIO_errorStateSetPinValue>
	MDIO_errorStateSetPinValue(LCD_PORT_DATA,LCD_DB5_PIN,GET_BIT(Copy_u8command,1));
    2ec8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2eca:	86 95       	lsr	r24
    2ecc:	98 2f       	mov	r25, r24
    2ece:	91 70       	andi	r25, 0x01	; 1
    2ed0:	83 e0       	ldi	r24, 0x03	; 3
    2ed2:	65 e0       	ldi	r22, 0x05	; 5
    2ed4:	49 2f       	mov	r20, r25
    2ed6:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <MDIO_errorStateSetPinValue>
	MDIO_errorStateSetPinValue(LCD_PORT_DATA,LCD_DB6_PIN,GET_BIT(Copy_u8command,2));
    2eda:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2edc:	86 95       	lsr	r24
    2ede:	86 95       	lsr	r24
    2ee0:	98 2f       	mov	r25, r24
    2ee2:	91 70       	andi	r25, 0x01	; 1
    2ee4:	83 e0       	ldi	r24, 0x03	; 3
    2ee6:	66 e0       	ldi	r22, 0x06	; 6
    2ee8:	49 2f       	mov	r20, r25
    2eea:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <MDIO_errorStateSetPinValue>
	MDIO_errorStateSetPinValue(LCD_PORT_DATA,LCD_DB7_PIN,GET_BIT(Copy_u8command,3));
    2eee:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2ef0:	86 95       	lsr	r24
    2ef2:	86 95       	lsr	r24
    2ef4:	86 95       	lsr	r24
    2ef6:	98 2f       	mov	r25, r24
    2ef8:	91 70       	andi	r25, 0x01	; 1
    2efa:	83 e0       	ldi	r24, 0x03	; 3
    2efc:	67 e0       	ldi	r22, 0x07	; 7
    2efe:	49 2f       	mov	r20, r25
    2f00:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <MDIO_errorStateSetPinValue>
#endif
	/* Set EN to make LND Micro read command */
	MDIO_errorStateSetPinValue(LCD_ENABLE_PORT,LCD_ENABLE_PIN,DIO_HIGH);
    2f04:	83 e0       	ldi	r24, 0x03	; 3
    2f06:	63 e0       	ldi	r22, 0x03	; 3
    2f08:	41 e0       	ldi	r20, 0x01	; 1
    2f0a:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <MDIO_errorStateSetPinValue>
    2f0e:	80 e0       	ldi	r24, 0x00	; 0
    2f10:	90 e0       	ldi	r25, 0x00	; 0
    2f12:	a0 e0       	ldi	r26, 0x00	; 0
    2f14:	b0 e4       	ldi	r27, 0x40	; 64
    2f16:	8b 87       	std	Y+11, r24	; 0x0b
    2f18:	9c 87       	std	Y+12, r25	; 0x0c
    2f1a:	ad 87       	std	Y+13, r26	; 0x0d
    2f1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f20:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f22:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f24:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f26:	20 e0       	ldi	r18, 0x00	; 0
    2f28:	30 e0       	ldi	r19, 0x00	; 0
    2f2a:	4a ef       	ldi	r20, 0xFA	; 250
    2f2c:	54 e4       	ldi	r21, 0x44	; 68
    2f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f32:	dc 01       	movw	r26, r24
    2f34:	cb 01       	movw	r24, r22
    2f36:	8f 83       	std	Y+7, r24	; 0x07
    2f38:	98 87       	std	Y+8, r25	; 0x08
    2f3a:	a9 87       	std	Y+9, r26	; 0x09
    2f3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2f3e:	6f 81       	ldd	r22, Y+7	; 0x07
    2f40:	78 85       	ldd	r23, Y+8	; 0x08
    2f42:	89 85       	ldd	r24, Y+9	; 0x09
    2f44:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f46:	20 e0       	ldi	r18, 0x00	; 0
    2f48:	30 e0       	ldi	r19, 0x00	; 0
    2f4a:	40 e8       	ldi	r20, 0x80	; 128
    2f4c:	5f e3       	ldi	r21, 0x3F	; 63
    2f4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f52:	88 23       	and	r24, r24
    2f54:	2c f4       	brge	.+10     	; 0x2f60 <HLCD_voidSendCommand+0x216>
		__ticks = 1;
    2f56:	81 e0       	ldi	r24, 0x01	; 1
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	9e 83       	std	Y+6, r25	; 0x06
    2f5c:	8d 83       	std	Y+5, r24	; 0x05
    2f5e:	3f c0       	rjmp	.+126    	; 0x2fde <HLCD_voidSendCommand+0x294>
	else if (__tmp > 65535)
    2f60:	6f 81       	ldd	r22, Y+7	; 0x07
    2f62:	78 85       	ldd	r23, Y+8	; 0x08
    2f64:	89 85       	ldd	r24, Y+9	; 0x09
    2f66:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f68:	20 e0       	ldi	r18, 0x00	; 0
    2f6a:	3f ef       	ldi	r19, 0xFF	; 255
    2f6c:	4f e7       	ldi	r20, 0x7F	; 127
    2f6e:	57 e4       	ldi	r21, 0x47	; 71
    2f70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f74:	18 16       	cp	r1, r24
    2f76:	4c f5       	brge	.+82     	; 0x2fca <HLCD_voidSendCommand+0x280>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f78:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2f7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2f80:	20 e0       	ldi	r18, 0x00	; 0
    2f82:	30 e0       	ldi	r19, 0x00	; 0
    2f84:	40 e2       	ldi	r20, 0x20	; 32
    2f86:	51 e4       	ldi	r21, 0x41	; 65
    2f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	cb 01       	movw	r24, r22
    2f90:	bc 01       	movw	r22, r24
    2f92:	cd 01       	movw	r24, r26
    2f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	9e 83       	std	Y+6, r25	; 0x06
    2f9e:	8d 83       	std	Y+5, r24	; 0x05
    2fa0:	0f c0       	rjmp	.+30     	; 0x2fc0 <HLCD_voidSendCommand+0x276>
    2fa2:	88 ec       	ldi	r24, 0xC8	; 200
    2fa4:	90 e0       	ldi	r25, 0x00	; 0
    2fa6:	9c 83       	std	Y+4, r25	; 0x04
    2fa8:	8b 83       	std	Y+3, r24	; 0x03
    2faa:	8b 81       	ldd	r24, Y+3	; 0x03
    2fac:	9c 81       	ldd	r25, Y+4	; 0x04
    2fae:	01 97       	sbiw	r24, 0x01	; 1
    2fb0:	f1 f7       	brne	.-4      	; 0x2fae <HLCD_voidSendCommand+0x264>
    2fb2:	9c 83       	std	Y+4, r25	; 0x04
    2fb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    2fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    2fba:	01 97       	sbiw	r24, 0x01	; 1
    2fbc:	9e 83       	std	Y+6, r25	; 0x06
    2fbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    2fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    2fc4:	00 97       	sbiw	r24, 0x00	; 0
    2fc6:	69 f7       	brne	.-38     	; 0x2fa2 <HLCD_voidSendCommand+0x258>
    2fc8:	14 c0       	rjmp	.+40     	; 0x2ff2 <HLCD_voidSendCommand+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fca:	6f 81       	ldd	r22, Y+7	; 0x07
    2fcc:	78 85       	ldd	r23, Y+8	; 0x08
    2fce:	89 85       	ldd	r24, Y+9	; 0x09
    2fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fd6:	dc 01       	movw	r26, r24
    2fd8:	cb 01       	movw	r24, r22
    2fda:	9e 83       	std	Y+6, r25	; 0x06
    2fdc:	8d 83       	std	Y+5, r24	; 0x05
    2fde:	8d 81       	ldd	r24, Y+5	; 0x05
    2fe0:	9e 81       	ldd	r25, Y+6	; 0x06
    2fe2:	9a 83       	std	Y+2, r25	; 0x02
    2fe4:	89 83       	std	Y+1, r24	; 0x01
    2fe6:	89 81       	ldd	r24, Y+1	; 0x01
    2fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    2fea:	01 97       	sbiw	r24, 0x01	; 1
    2fec:	f1 f7       	brne	.-4      	; 0x2fea <HLCD_voidSendCommand+0x2a0>
    2fee:	9a 83       	std	Y+2, r25	; 0x02
    2ff0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_errorStateSetPinValue(LCD_ENABLE_PORT,LCD_ENABLE_PIN,DIO_LOW);
    2ff2:	83 e0       	ldi	r24, 0x03	; 3
    2ff4:	63 e0       	ldi	r22, 0x03	; 3
    2ff6:	40 e0       	ldi	r20, 0x00	; 0
    2ff8:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <MDIO_errorStateSetPinValue>
}
    2ffc:	6d 96       	adiw	r28, 0x1d	; 29
    2ffe:	0f b6       	in	r0, 0x3f	; 63
    3000:	f8 94       	cli
    3002:	de bf       	out	0x3e, r29	; 62
    3004:	0f be       	out	0x3f, r0	; 63
    3006:	cd bf       	out	0x3d, r28	; 61
    3008:	cf 91       	pop	r28
    300a:	df 91       	pop	r29
    300c:	08 95       	ret

0000300e <HLCD_voidDisplayCharacter>:

void HLCD_voidDisplayCharacter(u8 Copy_u8data){
    300e:	0f 93       	push	r16
    3010:	1f 93       	push	r17
    3012:	df 93       	push	r29
    3014:	cf 93       	push	r28
    3016:	cd b7       	in	r28, 0x3d	; 61
    3018:	de b7       	in	r29, 0x3e	; 62
    301a:	c7 54       	subi	r28, 0x47	; 71
    301c:	d0 40       	sbci	r29, 0x00	; 0
    301e:	0f b6       	in	r0, 0x3f	; 63
    3020:	f8 94       	cli
    3022:	de bf       	out	0x3e, r29	; 62
    3024:	0f be       	out	0x3f, r0	; 63
    3026:	cd bf       	out	0x3d, r28	; 61
    3028:	fe 01       	movw	r30, r28
    302a:	e9 5b       	subi	r30, 0xB9	; 185
    302c:	ff 4f       	sbci	r31, 0xFF	; 255
    302e:	80 83       	st	Z, r24
	/* SET RS to send data */
	MDIO_errorStateSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_HIGH);
    3030:	83 e0       	ldi	r24, 0x03	; 3
    3032:	62 e0       	ldi	r22, 0x02	; 2
    3034:	41 e0       	ldi	r20, 0x01	; 1
    3036:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <MDIO_errorStateSetPinValue>
    303a:	fe 01       	movw	r30, r28
    303c:	ed 5b       	subi	r30, 0xBD	; 189
    303e:	ff 4f       	sbci	r31, 0xFF	; 255
    3040:	80 e0       	ldi	r24, 0x00	; 0
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	a0 e8       	ldi	r26, 0x80	; 128
    3046:	bf e3       	ldi	r27, 0x3F	; 63
    3048:	80 83       	st	Z, r24
    304a:	91 83       	std	Z+1, r25	; 0x01
    304c:	a2 83       	std	Z+2, r26	; 0x02
    304e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3050:	8e 01       	movw	r16, r28
    3052:	01 5c       	subi	r16, 0xC1	; 193
    3054:	1f 4f       	sbci	r17, 0xFF	; 255
    3056:	fe 01       	movw	r30, r28
    3058:	ed 5b       	subi	r30, 0xBD	; 189
    305a:	ff 4f       	sbci	r31, 0xFF	; 255
    305c:	60 81       	ld	r22, Z
    305e:	71 81       	ldd	r23, Z+1	; 0x01
    3060:	82 81       	ldd	r24, Z+2	; 0x02
    3062:	93 81       	ldd	r25, Z+3	; 0x03
    3064:	20 e0       	ldi	r18, 0x00	; 0
    3066:	30 e0       	ldi	r19, 0x00	; 0
    3068:	4a ef       	ldi	r20, 0xFA	; 250
    306a:	54 e4       	ldi	r21, 0x44	; 68
    306c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3070:	dc 01       	movw	r26, r24
    3072:	cb 01       	movw	r24, r22
    3074:	f8 01       	movw	r30, r16
    3076:	80 83       	st	Z, r24
    3078:	91 83       	std	Z+1, r25	; 0x01
    307a:	a2 83       	std	Z+2, r26	; 0x02
    307c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    307e:	fe 01       	movw	r30, r28
    3080:	ff 96       	adiw	r30, 0x3f	; 63
    3082:	60 81       	ld	r22, Z
    3084:	71 81       	ldd	r23, Z+1	; 0x01
    3086:	82 81       	ldd	r24, Z+2	; 0x02
    3088:	93 81       	ldd	r25, Z+3	; 0x03
    308a:	20 e0       	ldi	r18, 0x00	; 0
    308c:	30 e0       	ldi	r19, 0x00	; 0
    308e:	40 e8       	ldi	r20, 0x80	; 128
    3090:	5f e3       	ldi	r21, 0x3F	; 63
    3092:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3096:	88 23       	and	r24, r24
    3098:	2c f4       	brge	.+10     	; 0x30a4 <HLCD_voidDisplayCharacter+0x96>
		__ticks = 1;
    309a:	81 e0       	ldi	r24, 0x01	; 1
    309c:	90 e0       	ldi	r25, 0x00	; 0
    309e:	9e af       	std	Y+62, r25	; 0x3e
    30a0:	8d af       	std	Y+61, r24	; 0x3d
    30a2:	46 c0       	rjmp	.+140    	; 0x3130 <HLCD_voidDisplayCharacter+0x122>
	else if (__tmp > 65535)
    30a4:	fe 01       	movw	r30, r28
    30a6:	ff 96       	adiw	r30, 0x3f	; 63
    30a8:	60 81       	ld	r22, Z
    30aa:	71 81       	ldd	r23, Z+1	; 0x01
    30ac:	82 81       	ldd	r24, Z+2	; 0x02
    30ae:	93 81       	ldd	r25, Z+3	; 0x03
    30b0:	20 e0       	ldi	r18, 0x00	; 0
    30b2:	3f ef       	ldi	r19, 0xFF	; 255
    30b4:	4f e7       	ldi	r20, 0x7F	; 127
    30b6:	57 e4       	ldi	r21, 0x47	; 71
    30b8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30bc:	18 16       	cp	r1, r24
    30be:	64 f5       	brge	.+88     	; 0x3118 <HLCD_voidDisplayCharacter+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30c0:	fe 01       	movw	r30, r28
    30c2:	ed 5b       	subi	r30, 0xBD	; 189
    30c4:	ff 4f       	sbci	r31, 0xFF	; 255
    30c6:	60 81       	ld	r22, Z
    30c8:	71 81       	ldd	r23, Z+1	; 0x01
    30ca:	82 81       	ldd	r24, Z+2	; 0x02
    30cc:	93 81       	ldd	r25, Z+3	; 0x03
    30ce:	20 e0       	ldi	r18, 0x00	; 0
    30d0:	30 e0       	ldi	r19, 0x00	; 0
    30d2:	40 e2       	ldi	r20, 0x20	; 32
    30d4:	51 e4       	ldi	r21, 0x41	; 65
    30d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30da:	dc 01       	movw	r26, r24
    30dc:	cb 01       	movw	r24, r22
    30de:	bc 01       	movw	r22, r24
    30e0:	cd 01       	movw	r24, r26
    30e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30e6:	dc 01       	movw	r26, r24
    30e8:	cb 01       	movw	r24, r22
    30ea:	9e af       	std	Y+62, r25	; 0x3e
    30ec:	8d af       	std	Y+61, r24	; 0x3d
    30ee:	0f c0       	rjmp	.+30     	; 0x310e <HLCD_voidDisplayCharacter+0x100>
    30f0:	88 ec       	ldi	r24, 0xC8	; 200
    30f2:	90 e0       	ldi	r25, 0x00	; 0
    30f4:	9c af       	std	Y+60, r25	; 0x3c
    30f6:	8b af       	std	Y+59, r24	; 0x3b
    30f8:	8b ad       	ldd	r24, Y+59	; 0x3b
    30fa:	9c ad       	ldd	r25, Y+60	; 0x3c
    30fc:	01 97       	sbiw	r24, 0x01	; 1
    30fe:	f1 f7       	brne	.-4      	; 0x30fc <HLCD_voidDisplayCharacter+0xee>
    3100:	9c af       	std	Y+60, r25	; 0x3c
    3102:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3104:	8d ad       	ldd	r24, Y+61	; 0x3d
    3106:	9e ad       	ldd	r25, Y+62	; 0x3e
    3108:	01 97       	sbiw	r24, 0x01	; 1
    310a:	9e af       	std	Y+62, r25	; 0x3e
    310c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    310e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3110:	9e ad       	ldd	r25, Y+62	; 0x3e
    3112:	00 97       	sbiw	r24, 0x00	; 0
    3114:	69 f7       	brne	.-38     	; 0x30f0 <HLCD_voidDisplayCharacter+0xe2>
    3116:	16 c0       	rjmp	.+44     	; 0x3144 <HLCD_voidDisplayCharacter+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3118:	fe 01       	movw	r30, r28
    311a:	ff 96       	adiw	r30, 0x3f	; 63
    311c:	60 81       	ld	r22, Z
    311e:	71 81       	ldd	r23, Z+1	; 0x01
    3120:	82 81       	ldd	r24, Z+2	; 0x02
    3122:	93 81       	ldd	r25, Z+3	; 0x03
    3124:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3128:	dc 01       	movw	r26, r24
    312a:	cb 01       	movw	r24, r22
    312c:	9e af       	std	Y+62, r25	; 0x3e
    312e:	8d af       	std	Y+61, r24	; 0x3d
    3130:	8d ad       	ldd	r24, Y+61	; 0x3d
    3132:	9e ad       	ldd	r25, Y+62	; 0x3e
    3134:	9a af       	std	Y+58, r25	; 0x3a
    3136:	89 af       	std	Y+57, r24	; 0x39
    3138:	89 ad       	ldd	r24, Y+57	; 0x39
    313a:	9a ad       	ldd	r25, Y+58	; 0x3a
    313c:	01 97       	sbiw	r24, 0x01	; 1
    313e:	f1 f7       	brne	.-4      	; 0x313c <HLCD_voidDisplayCharacter+0x12e>
    3140:	9a af       	std	Y+58, r25	; 0x3a
    3142:	89 af       	std	Y+57, r24	; 0x39
	//_delay_ms(1);
#if LCD_DATA_BITS_MODE == 8
	/* Send Data */
	MDIO_errorStateSetPortValue(LCD_PORT_DATA,Copy_u8data);
#elif LCD_DATA_BITS_MODE == 4
	MDIO_errorStateSetPinValue(LCD_PORT_DATA,LCD_DB4_PIN,GET_BIT(Copy_u8data,4));
    3144:	fe 01       	movw	r30, r28
    3146:	e9 5b       	subi	r30, 0xB9	; 185
    3148:	ff 4f       	sbci	r31, 0xFF	; 255
    314a:	80 81       	ld	r24, Z
    314c:	82 95       	swap	r24
    314e:	8f 70       	andi	r24, 0x0F	; 15
    3150:	98 2f       	mov	r25, r24
    3152:	91 70       	andi	r25, 0x01	; 1
    3154:	83 e0       	ldi	r24, 0x03	; 3
    3156:	64 e0       	ldi	r22, 0x04	; 4
    3158:	49 2f       	mov	r20, r25
    315a:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <MDIO_errorStateSetPinValue>
	MDIO_errorStateSetPinValue(LCD_PORT_DATA,LCD_DB5_PIN,GET_BIT(Copy_u8data,5));
    315e:	fe 01       	movw	r30, r28
    3160:	e9 5b       	subi	r30, 0xB9	; 185
    3162:	ff 4f       	sbci	r31, 0xFF	; 255
    3164:	80 81       	ld	r24, Z
    3166:	82 95       	swap	r24
    3168:	86 95       	lsr	r24
    316a:	87 70       	andi	r24, 0x07	; 7
    316c:	98 2f       	mov	r25, r24
    316e:	91 70       	andi	r25, 0x01	; 1
    3170:	83 e0       	ldi	r24, 0x03	; 3
    3172:	65 e0       	ldi	r22, 0x05	; 5
    3174:	49 2f       	mov	r20, r25
    3176:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <MDIO_errorStateSetPinValue>
	MDIO_errorStateSetPinValue(LCD_PORT_DATA,LCD_DB6_PIN,GET_BIT(Copy_u8data,6));
    317a:	fe 01       	movw	r30, r28
    317c:	e9 5b       	subi	r30, 0xB9	; 185
    317e:	ff 4f       	sbci	r31, 0xFF	; 255
    3180:	80 81       	ld	r24, Z
    3182:	82 95       	swap	r24
    3184:	86 95       	lsr	r24
    3186:	86 95       	lsr	r24
    3188:	83 70       	andi	r24, 0x03	; 3
    318a:	98 2f       	mov	r25, r24
    318c:	91 70       	andi	r25, 0x01	; 1
    318e:	83 e0       	ldi	r24, 0x03	; 3
    3190:	66 e0       	ldi	r22, 0x06	; 6
    3192:	49 2f       	mov	r20, r25
    3194:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <MDIO_errorStateSetPinValue>
	MDIO_errorStateSetPinValue(LCD_PORT_DATA,LCD_DB7_PIN,GET_BIT(Copy_u8data,7));
    3198:	fe 01       	movw	r30, r28
    319a:	e9 5b       	subi	r30, 0xB9	; 185
    319c:	ff 4f       	sbci	r31, 0xFF	; 255
    319e:	80 81       	ld	r24, Z
    31a0:	98 2f       	mov	r25, r24
    31a2:	99 1f       	adc	r25, r25
    31a4:	99 27       	eor	r25, r25
    31a6:	99 1f       	adc	r25, r25
    31a8:	83 e0       	ldi	r24, 0x03	; 3
    31aa:	67 e0       	ldi	r22, 0x07	; 7
    31ac:	49 2f       	mov	r20, r25
    31ae:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <MDIO_errorStateSetPinValue>
    31b2:	80 e0       	ldi	r24, 0x00	; 0
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	a0 e8       	ldi	r26, 0x80	; 128
    31b8:	bf e3       	ldi	r27, 0x3F	; 63
    31ba:	8d ab       	std	Y+53, r24	; 0x35
    31bc:	9e ab       	std	Y+54, r25	; 0x36
    31be:	af ab       	std	Y+55, r26	; 0x37
    31c0:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31c2:	6d a9       	ldd	r22, Y+53	; 0x35
    31c4:	7e a9       	ldd	r23, Y+54	; 0x36
    31c6:	8f a9       	ldd	r24, Y+55	; 0x37
    31c8:	98 ad       	ldd	r25, Y+56	; 0x38
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	4a ef       	ldi	r20, 0xFA	; 250
    31d0:	54 e4       	ldi	r21, 0x44	; 68
    31d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	89 ab       	std	Y+49, r24	; 0x31
    31dc:	9a ab       	std	Y+50, r25	; 0x32
    31de:	ab ab       	std	Y+51, r26	; 0x33
    31e0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    31e2:	69 a9       	ldd	r22, Y+49	; 0x31
    31e4:	7a a9       	ldd	r23, Y+50	; 0x32
    31e6:	8b a9       	ldd	r24, Y+51	; 0x33
    31e8:	9c a9       	ldd	r25, Y+52	; 0x34
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	40 e8       	ldi	r20, 0x80	; 128
    31f0:	5f e3       	ldi	r21, 0x3F	; 63
    31f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31f6:	88 23       	and	r24, r24
    31f8:	2c f4       	brge	.+10     	; 0x3204 <HLCD_voidDisplayCharacter+0x1f6>
		__ticks = 1;
    31fa:	81 e0       	ldi	r24, 0x01	; 1
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	98 ab       	std	Y+48, r25	; 0x30
    3200:	8f a7       	std	Y+47, r24	; 0x2f
    3202:	3f c0       	rjmp	.+126    	; 0x3282 <HLCD_voidDisplayCharacter+0x274>
	else if (__tmp > 65535)
    3204:	69 a9       	ldd	r22, Y+49	; 0x31
    3206:	7a a9       	ldd	r23, Y+50	; 0x32
    3208:	8b a9       	ldd	r24, Y+51	; 0x33
    320a:	9c a9       	ldd	r25, Y+52	; 0x34
    320c:	20 e0       	ldi	r18, 0x00	; 0
    320e:	3f ef       	ldi	r19, 0xFF	; 255
    3210:	4f e7       	ldi	r20, 0x7F	; 127
    3212:	57 e4       	ldi	r21, 0x47	; 71
    3214:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3218:	18 16       	cp	r1, r24
    321a:	4c f5       	brge	.+82     	; 0x326e <HLCD_voidDisplayCharacter+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    321c:	6d a9       	ldd	r22, Y+53	; 0x35
    321e:	7e a9       	ldd	r23, Y+54	; 0x36
    3220:	8f a9       	ldd	r24, Y+55	; 0x37
    3222:	98 ad       	ldd	r25, Y+56	; 0x38
    3224:	20 e0       	ldi	r18, 0x00	; 0
    3226:	30 e0       	ldi	r19, 0x00	; 0
    3228:	40 e2       	ldi	r20, 0x20	; 32
    322a:	51 e4       	ldi	r21, 0x41	; 65
    322c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3230:	dc 01       	movw	r26, r24
    3232:	cb 01       	movw	r24, r22
    3234:	bc 01       	movw	r22, r24
    3236:	cd 01       	movw	r24, r26
    3238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    323c:	dc 01       	movw	r26, r24
    323e:	cb 01       	movw	r24, r22
    3240:	98 ab       	std	Y+48, r25	; 0x30
    3242:	8f a7       	std	Y+47, r24	; 0x2f
    3244:	0f c0       	rjmp	.+30     	; 0x3264 <HLCD_voidDisplayCharacter+0x256>
    3246:	88 ec       	ldi	r24, 0xC8	; 200
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	9e a7       	std	Y+46, r25	; 0x2e
    324c:	8d a7       	std	Y+45, r24	; 0x2d
    324e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3250:	9e a5       	ldd	r25, Y+46	; 0x2e
    3252:	01 97       	sbiw	r24, 0x01	; 1
    3254:	f1 f7       	brne	.-4      	; 0x3252 <HLCD_voidDisplayCharacter+0x244>
    3256:	9e a7       	std	Y+46, r25	; 0x2e
    3258:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    325a:	8f a5       	ldd	r24, Y+47	; 0x2f
    325c:	98 a9       	ldd	r25, Y+48	; 0x30
    325e:	01 97       	sbiw	r24, 0x01	; 1
    3260:	98 ab       	std	Y+48, r25	; 0x30
    3262:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3264:	8f a5       	ldd	r24, Y+47	; 0x2f
    3266:	98 a9       	ldd	r25, Y+48	; 0x30
    3268:	00 97       	sbiw	r24, 0x00	; 0
    326a:	69 f7       	brne	.-38     	; 0x3246 <HLCD_voidDisplayCharacter+0x238>
    326c:	14 c0       	rjmp	.+40     	; 0x3296 <HLCD_voidDisplayCharacter+0x288>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    326e:	69 a9       	ldd	r22, Y+49	; 0x31
    3270:	7a a9       	ldd	r23, Y+50	; 0x32
    3272:	8b a9       	ldd	r24, Y+51	; 0x33
    3274:	9c a9       	ldd	r25, Y+52	; 0x34
    3276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327a:	dc 01       	movw	r26, r24
    327c:	cb 01       	movw	r24, r22
    327e:	98 ab       	std	Y+48, r25	; 0x30
    3280:	8f a7       	std	Y+47, r24	; 0x2f
    3282:	8f a5       	ldd	r24, Y+47	; 0x2f
    3284:	98 a9       	ldd	r25, Y+48	; 0x30
    3286:	9c a7       	std	Y+44, r25	; 0x2c
    3288:	8b a7       	std	Y+43, r24	; 0x2b
    328a:	8b a5       	ldd	r24, Y+43	; 0x2b
    328c:	9c a5       	ldd	r25, Y+44	; 0x2c
    328e:	01 97       	sbiw	r24, 0x01	; 1
    3290:	f1 f7       	brne	.-4      	; 0x328e <HLCD_voidDisplayCharacter+0x280>
    3292:	9c a7       	std	Y+44, r25	; 0x2c
    3294:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	/* Set EN to make LND Micro read Copy_u8data */
	MDIO_errorStateSetPinValue(LCD_ENABLE_PORT,LCD_ENABLE_PIN,DIO_HIGH);
    3296:	83 e0       	ldi	r24, 0x03	; 3
    3298:	63 e0       	ldi	r22, 0x03	; 3
    329a:	41 e0       	ldi	r20, 0x01	; 1
    329c:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <MDIO_errorStateSetPinValue>
    32a0:	80 e0       	ldi	r24, 0x00	; 0
    32a2:	90 e0       	ldi	r25, 0x00	; 0
    32a4:	a0 e0       	ldi	r26, 0x00	; 0
    32a6:	b0 e4       	ldi	r27, 0x40	; 64
    32a8:	8f a3       	std	Y+39, r24	; 0x27
    32aa:	98 a7       	std	Y+40, r25	; 0x28
    32ac:	a9 a7       	std	Y+41, r26	; 0x29
    32ae:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32b0:	6f a1       	ldd	r22, Y+39	; 0x27
    32b2:	78 a5       	ldd	r23, Y+40	; 0x28
    32b4:	89 a5       	ldd	r24, Y+41	; 0x29
    32b6:	9a a5       	ldd	r25, Y+42	; 0x2a
    32b8:	20 e0       	ldi	r18, 0x00	; 0
    32ba:	30 e0       	ldi	r19, 0x00	; 0
    32bc:	4a ef       	ldi	r20, 0xFA	; 250
    32be:	54 e4       	ldi	r21, 0x44	; 68
    32c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c4:	dc 01       	movw	r26, r24
    32c6:	cb 01       	movw	r24, r22
    32c8:	8b a3       	std	Y+35, r24	; 0x23
    32ca:	9c a3       	std	Y+36, r25	; 0x24
    32cc:	ad a3       	std	Y+37, r26	; 0x25
    32ce:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    32d0:	6b a1       	ldd	r22, Y+35	; 0x23
    32d2:	7c a1       	ldd	r23, Y+36	; 0x24
    32d4:	8d a1       	ldd	r24, Y+37	; 0x25
    32d6:	9e a1       	ldd	r25, Y+38	; 0x26
    32d8:	20 e0       	ldi	r18, 0x00	; 0
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	40 e8       	ldi	r20, 0x80	; 128
    32de:	5f e3       	ldi	r21, 0x3F	; 63
    32e0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    32e4:	88 23       	and	r24, r24
    32e6:	2c f4       	brge	.+10     	; 0x32f2 <HLCD_voidDisplayCharacter+0x2e4>
		__ticks = 1;
    32e8:	81 e0       	ldi	r24, 0x01	; 1
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	9a a3       	std	Y+34, r25	; 0x22
    32ee:	89 a3       	std	Y+33, r24	; 0x21
    32f0:	3f c0       	rjmp	.+126    	; 0x3370 <HLCD_voidDisplayCharacter+0x362>
	else if (__tmp > 65535)
    32f2:	6b a1       	ldd	r22, Y+35	; 0x23
    32f4:	7c a1       	ldd	r23, Y+36	; 0x24
    32f6:	8d a1       	ldd	r24, Y+37	; 0x25
    32f8:	9e a1       	ldd	r25, Y+38	; 0x26
    32fa:	20 e0       	ldi	r18, 0x00	; 0
    32fc:	3f ef       	ldi	r19, 0xFF	; 255
    32fe:	4f e7       	ldi	r20, 0x7F	; 127
    3300:	57 e4       	ldi	r21, 0x47	; 71
    3302:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3306:	18 16       	cp	r1, r24
    3308:	4c f5       	brge	.+82     	; 0x335c <HLCD_voidDisplayCharacter+0x34e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    330a:	6f a1       	ldd	r22, Y+39	; 0x27
    330c:	78 a5       	ldd	r23, Y+40	; 0x28
    330e:	89 a5       	ldd	r24, Y+41	; 0x29
    3310:	9a a5       	ldd	r25, Y+42	; 0x2a
    3312:	20 e0       	ldi	r18, 0x00	; 0
    3314:	30 e0       	ldi	r19, 0x00	; 0
    3316:	40 e2       	ldi	r20, 0x20	; 32
    3318:	51 e4       	ldi	r21, 0x41	; 65
    331a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    331e:	dc 01       	movw	r26, r24
    3320:	cb 01       	movw	r24, r22
    3322:	bc 01       	movw	r22, r24
    3324:	cd 01       	movw	r24, r26
    3326:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    332a:	dc 01       	movw	r26, r24
    332c:	cb 01       	movw	r24, r22
    332e:	9a a3       	std	Y+34, r25	; 0x22
    3330:	89 a3       	std	Y+33, r24	; 0x21
    3332:	0f c0       	rjmp	.+30     	; 0x3352 <HLCD_voidDisplayCharacter+0x344>
    3334:	88 ec       	ldi	r24, 0xC8	; 200
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	98 a3       	std	Y+32, r25	; 0x20
    333a:	8f 8f       	std	Y+31, r24	; 0x1f
    333c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    333e:	98 a1       	ldd	r25, Y+32	; 0x20
    3340:	01 97       	sbiw	r24, 0x01	; 1
    3342:	f1 f7       	brne	.-4      	; 0x3340 <HLCD_voidDisplayCharacter+0x332>
    3344:	98 a3       	std	Y+32, r25	; 0x20
    3346:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3348:	89 a1       	ldd	r24, Y+33	; 0x21
    334a:	9a a1       	ldd	r25, Y+34	; 0x22
    334c:	01 97       	sbiw	r24, 0x01	; 1
    334e:	9a a3       	std	Y+34, r25	; 0x22
    3350:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3352:	89 a1       	ldd	r24, Y+33	; 0x21
    3354:	9a a1       	ldd	r25, Y+34	; 0x22
    3356:	00 97       	sbiw	r24, 0x00	; 0
    3358:	69 f7       	brne	.-38     	; 0x3334 <HLCD_voidDisplayCharacter+0x326>
    335a:	14 c0       	rjmp	.+40     	; 0x3384 <HLCD_voidDisplayCharacter+0x376>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    335c:	6b a1       	ldd	r22, Y+35	; 0x23
    335e:	7c a1       	ldd	r23, Y+36	; 0x24
    3360:	8d a1       	ldd	r24, Y+37	; 0x25
    3362:	9e a1       	ldd	r25, Y+38	; 0x26
    3364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3368:	dc 01       	movw	r26, r24
    336a:	cb 01       	movw	r24, r22
    336c:	9a a3       	std	Y+34, r25	; 0x22
    336e:	89 a3       	std	Y+33, r24	; 0x21
    3370:	89 a1       	ldd	r24, Y+33	; 0x21
    3372:	9a a1       	ldd	r25, Y+34	; 0x22
    3374:	9e 8f       	std	Y+30, r25	; 0x1e
    3376:	8d 8f       	std	Y+29, r24	; 0x1d
    3378:	8d 8d       	ldd	r24, Y+29	; 0x1d
    337a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    337c:	01 97       	sbiw	r24, 0x01	; 1
    337e:	f1 f7       	brne	.-4      	; 0x337c <HLCD_voidDisplayCharacter+0x36e>
    3380:	9e 8f       	std	Y+30, r25	; 0x1e
    3382:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	MDIO_errorStateSetPinValue(LCD_ENABLE_PORT,LCD_ENABLE_PIN,DIO_LOW);
    3384:	83 e0       	ldi	r24, 0x03	; 3
    3386:	63 e0       	ldi	r22, 0x03	; 3
    3388:	40 e0       	ldi	r20, 0x00	; 0
    338a:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <MDIO_errorStateSetPinValue>

	MDIO_errorStateSetPinValue(LCD_PORT_DATA,LCD_DB4_PIN,GET_BIT(Copy_u8data,0));
    338e:	fe 01       	movw	r30, r28
    3390:	e9 5b       	subi	r30, 0xB9	; 185
    3392:	ff 4f       	sbci	r31, 0xFF	; 255
    3394:	80 81       	ld	r24, Z
    3396:	98 2f       	mov	r25, r24
    3398:	91 70       	andi	r25, 0x01	; 1
    339a:	83 e0       	ldi	r24, 0x03	; 3
    339c:	64 e0       	ldi	r22, 0x04	; 4
    339e:	49 2f       	mov	r20, r25
    33a0:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <MDIO_errorStateSetPinValue>
	MDIO_errorStateSetPinValue(LCD_PORT_DATA,LCD_DB5_PIN,GET_BIT(Copy_u8data,1));
    33a4:	fe 01       	movw	r30, r28
    33a6:	e9 5b       	subi	r30, 0xB9	; 185
    33a8:	ff 4f       	sbci	r31, 0xFF	; 255
    33aa:	80 81       	ld	r24, Z
    33ac:	86 95       	lsr	r24
    33ae:	98 2f       	mov	r25, r24
    33b0:	91 70       	andi	r25, 0x01	; 1
    33b2:	83 e0       	ldi	r24, 0x03	; 3
    33b4:	65 e0       	ldi	r22, 0x05	; 5
    33b6:	49 2f       	mov	r20, r25
    33b8:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <MDIO_errorStateSetPinValue>
	MDIO_errorStateSetPinValue(LCD_PORT_DATA,LCD_DB6_PIN,GET_BIT(Copy_u8data,2));
    33bc:	fe 01       	movw	r30, r28
    33be:	e9 5b       	subi	r30, 0xB9	; 185
    33c0:	ff 4f       	sbci	r31, 0xFF	; 255
    33c2:	80 81       	ld	r24, Z
    33c4:	86 95       	lsr	r24
    33c6:	86 95       	lsr	r24
    33c8:	98 2f       	mov	r25, r24
    33ca:	91 70       	andi	r25, 0x01	; 1
    33cc:	83 e0       	ldi	r24, 0x03	; 3
    33ce:	66 e0       	ldi	r22, 0x06	; 6
    33d0:	49 2f       	mov	r20, r25
    33d2:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <MDIO_errorStateSetPinValue>
	MDIO_errorStateSetPinValue(LCD_PORT_DATA,LCD_DB7_PIN,GET_BIT(Copy_u8data,3));
    33d6:	fe 01       	movw	r30, r28
    33d8:	e9 5b       	subi	r30, 0xB9	; 185
    33da:	ff 4f       	sbci	r31, 0xFF	; 255
    33dc:	80 81       	ld	r24, Z
    33de:	86 95       	lsr	r24
    33e0:	86 95       	lsr	r24
    33e2:	86 95       	lsr	r24
    33e4:	98 2f       	mov	r25, r24
    33e6:	91 70       	andi	r25, 0x01	; 1
    33e8:	83 e0       	ldi	r24, 0x03	; 3
    33ea:	67 e0       	ldi	r22, 0x07	; 7
    33ec:	49 2f       	mov	r20, r25
    33ee:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <MDIO_errorStateSetPinValue>
    33f2:	80 e0       	ldi	r24, 0x00	; 0
    33f4:	90 e0       	ldi	r25, 0x00	; 0
    33f6:	a0 e8       	ldi	r26, 0x80	; 128
    33f8:	bf e3       	ldi	r27, 0x3F	; 63
    33fa:	89 8f       	std	Y+25, r24	; 0x19
    33fc:	9a 8f       	std	Y+26, r25	; 0x1a
    33fe:	ab 8f       	std	Y+27, r26	; 0x1b
    3400:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3402:	69 8d       	ldd	r22, Y+25	; 0x19
    3404:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3406:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3408:	9c 8d       	ldd	r25, Y+28	; 0x1c
    340a:	20 e0       	ldi	r18, 0x00	; 0
    340c:	30 e0       	ldi	r19, 0x00	; 0
    340e:	4a ef       	ldi	r20, 0xFA	; 250
    3410:	54 e4       	ldi	r21, 0x44	; 68
    3412:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3416:	dc 01       	movw	r26, r24
    3418:	cb 01       	movw	r24, r22
    341a:	8d 8b       	std	Y+21, r24	; 0x15
    341c:	9e 8b       	std	Y+22, r25	; 0x16
    341e:	af 8b       	std	Y+23, r26	; 0x17
    3420:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3422:	6d 89       	ldd	r22, Y+21	; 0x15
    3424:	7e 89       	ldd	r23, Y+22	; 0x16
    3426:	8f 89       	ldd	r24, Y+23	; 0x17
    3428:	98 8d       	ldd	r25, Y+24	; 0x18
    342a:	20 e0       	ldi	r18, 0x00	; 0
    342c:	30 e0       	ldi	r19, 0x00	; 0
    342e:	40 e8       	ldi	r20, 0x80	; 128
    3430:	5f e3       	ldi	r21, 0x3F	; 63
    3432:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3436:	88 23       	and	r24, r24
    3438:	2c f4       	brge	.+10     	; 0x3444 <HLCD_voidDisplayCharacter+0x436>
		__ticks = 1;
    343a:	81 e0       	ldi	r24, 0x01	; 1
    343c:	90 e0       	ldi	r25, 0x00	; 0
    343e:	9c 8b       	std	Y+20, r25	; 0x14
    3440:	8b 8b       	std	Y+19, r24	; 0x13
    3442:	3f c0       	rjmp	.+126    	; 0x34c2 <HLCD_voidDisplayCharacter+0x4b4>
	else if (__tmp > 65535)
    3444:	6d 89       	ldd	r22, Y+21	; 0x15
    3446:	7e 89       	ldd	r23, Y+22	; 0x16
    3448:	8f 89       	ldd	r24, Y+23	; 0x17
    344a:	98 8d       	ldd	r25, Y+24	; 0x18
    344c:	20 e0       	ldi	r18, 0x00	; 0
    344e:	3f ef       	ldi	r19, 0xFF	; 255
    3450:	4f e7       	ldi	r20, 0x7F	; 127
    3452:	57 e4       	ldi	r21, 0x47	; 71
    3454:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3458:	18 16       	cp	r1, r24
    345a:	4c f5       	brge	.+82     	; 0x34ae <HLCD_voidDisplayCharacter+0x4a0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    345c:	69 8d       	ldd	r22, Y+25	; 0x19
    345e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3460:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3462:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3464:	20 e0       	ldi	r18, 0x00	; 0
    3466:	30 e0       	ldi	r19, 0x00	; 0
    3468:	40 e2       	ldi	r20, 0x20	; 32
    346a:	51 e4       	ldi	r21, 0x41	; 65
    346c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3470:	dc 01       	movw	r26, r24
    3472:	cb 01       	movw	r24, r22
    3474:	bc 01       	movw	r22, r24
    3476:	cd 01       	movw	r24, r26
    3478:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    347c:	dc 01       	movw	r26, r24
    347e:	cb 01       	movw	r24, r22
    3480:	9c 8b       	std	Y+20, r25	; 0x14
    3482:	8b 8b       	std	Y+19, r24	; 0x13
    3484:	0f c0       	rjmp	.+30     	; 0x34a4 <HLCD_voidDisplayCharacter+0x496>
    3486:	88 ec       	ldi	r24, 0xC8	; 200
    3488:	90 e0       	ldi	r25, 0x00	; 0
    348a:	9a 8b       	std	Y+18, r25	; 0x12
    348c:	89 8b       	std	Y+17, r24	; 0x11
    348e:	89 89       	ldd	r24, Y+17	; 0x11
    3490:	9a 89       	ldd	r25, Y+18	; 0x12
    3492:	01 97       	sbiw	r24, 0x01	; 1
    3494:	f1 f7       	brne	.-4      	; 0x3492 <HLCD_voidDisplayCharacter+0x484>
    3496:	9a 8b       	std	Y+18, r25	; 0x12
    3498:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    349a:	8b 89       	ldd	r24, Y+19	; 0x13
    349c:	9c 89       	ldd	r25, Y+20	; 0x14
    349e:	01 97       	sbiw	r24, 0x01	; 1
    34a0:	9c 8b       	std	Y+20, r25	; 0x14
    34a2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34a4:	8b 89       	ldd	r24, Y+19	; 0x13
    34a6:	9c 89       	ldd	r25, Y+20	; 0x14
    34a8:	00 97       	sbiw	r24, 0x00	; 0
    34aa:	69 f7       	brne	.-38     	; 0x3486 <HLCD_voidDisplayCharacter+0x478>
    34ac:	14 c0       	rjmp	.+40     	; 0x34d6 <HLCD_voidDisplayCharacter+0x4c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34ae:	6d 89       	ldd	r22, Y+21	; 0x15
    34b0:	7e 89       	ldd	r23, Y+22	; 0x16
    34b2:	8f 89       	ldd	r24, Y+23	; 0x17
    34b4:	98 8d       	ldd	r25, Y+24	; 0x18
    34b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ba:	dc 01       	movw	r26, r24
    34bc:	cb 01       	movw	r24, r22
    34be:	9c 8b       	std	Y+20, r25	; 0x14
    34c0:	8b 8b       	std	Y+19, r24	; 0x13
    34c2:	8b 89       	ldd	r24, Y+19	; 0x13
    34c4:	9c 89       	ldd	r25, Y+20	; 0x14
    34c6:	98 8b       	std	Y+16, r25	; 0x10
    34c8:	8f 87       	std	Y+15, r24	; 0x0f
    34ca:	8f 85       	ldd	r24, Y+15	; 0x0f
    34cc:	98 89       	ldd	r25, Y+16	; 0x10
    34ce:	01 97       	sbiw	r24, 0x01	; 1
    34d0:	f1 f7       	brne	.-4      	; 0x34ce <HLCD_voidDisplayCharacter+0x4c0>
    34d2:	98 8b       	std	Y+16, r25	; 0x10
    34d4:	8f 87       	std	Y+15, r24	; 0x0f
#endif
	_delay_ms(1);
	/* Set EN to make LND Micro read data */
	MDIO_errorStateSetPinValue(LCD_ENABLE_PORT,LCD_ENABLE_PIN,DIO_HIGH);
    34d6:	83 e0       	ldi	r24, 0x03	; 3
    34d8:	63 e0       	ldi	r22, 0x03	; 3
    34da:	41 e0       	ldi	r20, 0x01	; 1
    34dc:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <MDIO_errorStateSetPinValue>
    34e0:	80 e0       	ldi	r24, 0x00	; 0
    34e2:	90 e0       	ldi	r25, 0x00	; 0
    34e4:	a0 e0       	ldi	r26, 0x00	; 0
    34e6:	b0 e4       	ldi	r27, 0x40	; 64
    34e8:	8b 87       	std	Y+11, r24	; 0x0b
    34ea:	9c 87       	std	Y+12, r25	; 0x0c
    34ec:	ad 87       	std	Y+13, r26	; 0x0d
    34ee:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    34f0:	6b 85       	ldd	r22, Y+11	; 0x0b
    34f2:	7c 85       	ldd	r23, Y+12	; 0x0c
    34f4:	8d 85       	ldd	r24, Y+13	; 0x0d
    34f6:	9e 85       	ldd	r25, Y+14	; 0x0e
    34f8:	20 e0       	ldi	r18, 0x00	; 0
    34fa:	30 e0       	ldi	r19, 0x00	; 0
    34fc:	4a ef       	ldi	r20, 0xFA	; 250
    34fe:	54 e4       	ldi	r21, 0x44	; 68
    3500:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3504:	dc 01       	movw	r26, r24
    3506:	cb 01       	movw	r24, r22
    3508:	8f 83       	std	Y+7, r24	; 0x07
    350a:	98 87       	std	Y+8, r25	; 0x08
    350c:	a9 87       	std	Y+9, r26	; 0x09
    350e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3510:	6f 81       	ldd	r22, Y+7	; 0x07
    3512:	78 85       	ldd	r23, Y+8	; 0x08
    3514:	89 85       	ldd	r24, Y+9	; 0x09
    3516:	9a 85       	ldd	r25, Y+10	; 0x0a
    3518:	20 e0       	ldi	r18, 0x00	; 0
    351a:	30 e0       	ldi	r19, 0x00	; 0
    351c:	40 e8       	ldi	r20, 0x80	; 128
    351e:	5f e3       	ldi	r21, 0x3F	; 63
    3520:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3524:	88 23       	and	r24, r24
    3526:	2c f4       	brge	.+10     	; 0x3532 <HLCD_voidDisplayCharacter+0x524>
		__ticks = 1;
    3528:	81 e0       	ldi	r24, 0x01	; 1
    352a:	90 e0       	ldi	r25, 0x00	; 0
    352c:	9e 83       	std	Y+6, r25	; 0x06
    352e:	8d 83       	std	Y+5, r24	; 0x05
    3530:	3f c0       	rjmp	.+126    	; 0x35b0 <HLCD_voidDisplayCharacter+0x5a2>
	else if (__tmp > 65535)
    3532:	6f 81       	ldd	r22, Y+7	; 0x07
    3534:	78 85       	ldd	r23, Y+8	; 0x08
    3536:	89 85       	ldd	r24, Y+9	; 0x09
    3538:	9a 85       	ldd	r25, Y+10	; 0x0a
    353a:	20 e0       	ldi	r18, 0x00	; 0
    353c:	3f ef       	ldi	r19, 0xFF	; 255
    353e:	4f e7       	ldi	r20, 0x7F	; 127
    3540:	57 e4       	ldi	r21, 0x47	; 71
    3542:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3546:	18 16       	cp	r1, r24
    3548:	4c f5       	brge	.+82     	; 0x359c <HLCD_voidDisplayCharacter+0x58e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    354a:	6b 85       	ldd	r22, Y+11	; 0x0b
    354c:	7c 85       	ldd	r23, Y+12	; 0x0c
    354e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3550:	9e 85       	ldd	r25, Y+14	; 0x0e
    3552:	20 e0       	ldi	r18, 0x00	; 0
    3554:	30 e0       	ldi	r19, 0x00	; 0
    3556:	40 e2       	ldi	r20, 0x20	; 32
    3558:	51 e4       	ldi	r21, 0x41	; 65
    355a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    355e:	dc 01       	movw	r26, r24
    3560:	cb 01       	movw	r24, r22
    3562:	bc 01       	movw	r22, r24
    3564:	cd 01       	movw	r24, r26
    3566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    356a:	dc 01       	movw	r26, r24
    356c:	cb 01       	movw	r24, r22
    356e:	9e 83       	std	Y+6, r25	; 0x06
    3570:	8d 83       	std	Y+5, r24	; 0x05
    3572:	0f c0       	rjmp	.+30     	; 0x3592 <HLCD_voidDisplayCharacter+0x584>
    3574:	88 ec       	ldi	r24, 0xC8	; 200
    3576:	90 e0       	ldi	r25, 0x00	; 0
    3578:	9c 83       	std	Y+4, r25	; 0x04
    357a:	8b 83       	std	Y+3, r24	; 0x03
    357c:	8b 81       	ldd	r24, Y+3	; 0x03
    357e:	9c 81       	ldd	r25, Y+4	; 0x04
    3580:	01 97       	sbiw	r24, 0x01	; 1
    3582:	f1 f7       	brne	.-4      	; 0x3580 <HLCD_voidDisplayCharacter+0x572>
    3584:	9c 83       	std	Y+4, r25	; 0x04
    3586:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3588:	8d 81       	ldd	r24, Y+5	; 0x05
    358a:	9e 81       	ldd	r25, Y+6	; 0x06
    358c:	01 97       	sbiw	r24, 0x01	; 1
    358e:	9e 83       	std	Y+6, r25	; 0x06
    3590:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3592:	8d 81       	ldd	r24, Y+5	; 0x05
    3594:	9e 81       	ldd	r25, Y+6	; 0x06
    3596:	00 97       	sbiw	r24, 0x00	; 0
    3598:	69 f7       	brne	.-38     	; 0x3574 <HLCD_voidDisplayCharacter+0x566>
    359a:	14 c0       	rjmp	.+40     	; 0x35c4 <HLCD_voidDisplayCharacter+0x5b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    359c:	6f 81       	ldd	r22, Y+7	; 0x07
    359e:	78 85       	ldd	r23, Y+8	; 0x08
    35a0:	89 85       	ldd	r24, Y+9	; 0x09
    35a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35a8:	dc 01       	movw	r26, r24
    35aa:	cb 01       	movw	r24, r22
    35ac:	9e 83       	std	Y+6, r25	; 0x06
    35ae:	8d 83       	std	Y+5, r24	; 0x05
    35b0:	8d 81       	ldd	r24, Y+5	; 0x05
    35b2:	9e 81       	ldd	r25, Y+6	; 0x06
    35b4:	9a 83       	std	Y+2, r25	; 0x02
    35b6:	89 83       	std	Y+1, r24	; 0x01
    35b8:	89 81       	ldd	r24, Y+1	; 0x01
    35ba:	9a 81       	ldd	r25, Y+2	; 0x02
    35bc:	01 97       	sbiw	r24, 0x01	; 1
    35be:	f1 f7       	brne	.-4      	; 0x35bc <HLCD_voidDisplayCharacter+0x5ae>
    35c0:	9a 83       	std	Y+2, r25	; 0x02
    35c2:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	MDIO_errorStateSetPinValue(LCD_ENABLE_PORT,LCD_ENABLE_PIN,DIO_LOW);
    35c4:	83 e0       	ldi	r24, 0x03	; 3
    35c6:	63 e0       	ldi	r22, 0x03	; 3
    35c8:	40 e0       	ldi	r20, 0x00	; 0
    35ca:	0e 94 9f 1f 	call	0x3f3e	; 0x3f3e <MDIO_errorStateSetPinValue>
}
    35ce:	c9 5b       	subi	r28, 0xB9	; 185
    35d0:	df 4f       	sbci	r29, 0xFF	; 255
    35d2:	0f b6       	in	r0, 0x3f	; 63
    35d4:	f8 94       	cli
    35d6:	de bf       	out	0x3e, r29	; 62
    35d8:	0f be       	out	0x3f, r0	; 63
    35da:	cd bf       	out	0x3d, r28	; 61
    35dc:	cf 91       	pop	r28
    35de:	df 91       	pop	r29
    35e0:	1f 91       	pop	r17
    35e2:	0f 91       	pop	r16
    35e4:	08 95       	ret

000035e6 <HLCD_displayString>:
void HLCD_displayString(const char *string){
    35e6:	df 93       	push	r29
    35e8:	cf 93       	push	r28
    35ea:	00 d0       	rcall	.+0      	; 0x35ec <HLCD_displayString+0x6>
    35ec:	cd b7       	in	r28, 0x3d	; 61
    35ee:	de b7       	in	r29, 0x3e	; 62
    35f0:	9a 83       	std	Y+2, r25	; 0x02
    35f2:	89 83       	std	Y+1, r24	; 0x01
    35f4:	0a c0       	rjmp	.+20     	; 0x360a <HLCD_displayString+0x24>
	while((*string) != '\0'){
		HLCD_voidDisplayCharacter(*string);
    35f6:	e9 81       	ldd	r30, Y+1	; 0x01
    35f8:	fa 81       	ldd	r31, Y+2	; 0x02
    35fa:	80 81       	ld	r24, Z
    35fc:	0e 94 07 18 	call	0x300e	; 0x300e <HLCD_voidDisplayCharacter>
		string++;
    3600:	89 81       	ldd	r24, Y+1	; 0x01
    3602:	9a 81       	ldd	r25, Y+2	; 0x02
    3604:	01 96       	adiw	r24, 0x01	; 1
    3606:	9a 83       	std	Y+2, r25	; 0x02
    3608:	89 83       	std	Y+1, r24	; 0x01
	MDIO_errorStateSetPinValue(LCD_ENABLE_PORT,LCD_ENABLE_PIN,DIO_HIGH);
	_delay_ms(2);
	MDIO_errorStateSetPinValue(LCD_ENABLE_PORT,LCD_ENABLE_PIN,DIO_LOW);
}
void HLCD_displayString(const char *string){
	while((*string) != '\0'){
    360a:	e9 81       	ldd	r30, Y+1	; 0x01
    360c:	fa 81       	ldd	r31, Y+2	; 0x02
    360e:	80 81       	ld	r24, Z
    3610:	88 23       	and	r24, r24
    3612:	89 f7       	brne	.-30     	; 0x35f6 <HLCD_displayString+0x10>
		HLCD_voidDisplayCharacter(*string);
		string++;
	}
}
    3614:	0f 90       	pop	r0
    3616:	0f 90       	pop	r0
    3618:	cf 91       	pop	r28
    361a:	df 91       	pop	r29
    361c:	08 95       	ret

0000361e <HLCD_moveCursor>:
void HLCD_moveCursor(u8 row , u8 column){
    361e:	df 93       	push	r29
    3620:	cf 93       	push	r28
    3622:	00 d0       	rcall	.+0      	; 0x3624 <HLCD_moveCursor+0x6>
    3624:	00 d0       	rcall	.+0      	; 0x3626 <HLCD_moveCursor+0x8>
    3626:	0f 92       	push	r0
    3628:	cd b7       	in	r28, 0x3d	; 61
    362a:	de b7       	in	r29, 0x3e	; 62
    362c:	8a 83       	std	Y+2, r24	; 0x02
    362e:	6b 83       	std	Y+3, r22	; 0x03
	u8 adressresult;
	switch(row)
    3630:	8a 81       	ldd	r24, Y+2	; 0x02
    3632:	28 2f       	mov	r18, r24
    3634:	30 e0       	ldi	r19, 0x00	; 0
    3636:	3d 83       	std	Y+5, r19	; 0x05
    3638:	2c 83       	std	Y+4, r18	; 0x04
    363a:	8c 81       	ldd	r24, Y+4	; 0x04
    363c:	9d 81       	ldd	r25, Y+5	; 0x05
    363e:	81 30       	cpi	r24, 0x01	; 1
    3640:	91 05       	cpc	r25, r1
    3642:	c1 f0       	breq	.+48     	; 0x3674 <HLCD_moveCursor+0x56>
    3644:	2c 81       	ldd	r18, Y+4	; 0x04
    3646:	3d 81       	ldd	r19, Y+5	; 0x05
    3648:	22 30       	cpi	r18, 0x02	; 2
    364a:	31 05       	cpc	r19, r1
    364c:	2c f4       	brge	.+10     	; 0x3658 <HLCD_moveCursor+0x3a>
    364e:	8c 81       	ldd	r24, Y+4	; 0x04
    3650:	9d 81       	ldd	r25, Y+5	; 0x05
    3652:	00 97       	sbiw	r24, 0x00	; 0
    3654:	61 f0       	breq	.+24     	; 0x366e <HLCD_moveCursor+0x50>
    3656:	19 c0       	rjmp	.+50     	; 0x368a <HLCD_moveCursor+0x6c>
    3658:	2c 81       	ldd	r18, Y+4	; 0x04
    365a:	3d 81       	ldd	r19, Y+5	; 0x05
    365c:	22 30       	cpi	r18, 0x02	; 2
    365e:	31 05       	cpc	r19, r1
    3660:	69 f0       	breq	.+26     	; 0x367c <HLCD_moveCursor+0x5e>
    3662:	8c 81       	ldd	r24, Y+4	; 0x04
    3664:	9d 81       	ldd	r25, Y+5	; 0x05
    3666:	83 30       	cpi	r24, 0x03	; 3
    3668:	91 05       	cpc	r25, r1
    366a:	61 f0       	breq	.+24     	; 0x3684 <HLCD_moveCursor+0x66>
    366c:	0e c0       	rjmp	.+28     	; 0x368a <HLCD_moveCursor+0x6c>
	{
	case 0: adressresult = column;
    366e:	8b 81       	ldd	r24, Y+3	; 0x03
    3670:	89 83       	std	Y+1, r24	; 0x01
    3672:	0b c0       	rjmp	.+22     	; 0x368a <HLCD_moveCursor+0x6c>
	break;
	case 1: adressresult = column + 0x40;
    3674:	8b 81       	ldd	r24, Y+3	; 0x03
    3676:	80 5c       	subi	r24, 0xC0	; 192
    3678:	89 83       	std	Y+1, r24	; 0x01
    367a:	07 c0       	rjmp	.+14     	; 0x368a <HLCD_moveCursor+0x6c>
	break;
	case 2: adressresult = column + 0x10;
    367c:	8b 81       	ldd	r24, Y+3	; 0x03
    367e:	80 5f       	subi	r24, 0xF0	; 240
    3680:	89 83       	std	Y+1, r24	; 0x01
    3682:	03 c0       	rjmp	.+6      	; 0x368a <HLCD_moveCursor+0x6c>
	break;
	case 3: adressresult = column + 0x50;
    3684:	8b 81       	ldd	r24, Y+3	; 0x03
    3686:	80 5b       	subi	r24, 0xB0	; 176
    3688:	89 83       	std	Y+1, r24	; 0x01
	}
	HLCD_voidSendCommand(adressresult | LCD_CURSOR_TO_BEGIN);
    368a:	89 81       	ldd	r24, Y+1	; 0x01
    368c:	80 68       	ori	r24, 0x80	; 128
    368e:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <HLCD_voidSendCommand>
}
    3692:	0f 90       	pop	r0
    3694:	0f 90       	pop	r0
    3696:	0f 90       	pop	r0
    3698:	0f 90       	pop	r0
    369a:	0f 90       	pop	r0
    369c:	cf 91       	pop	r28
    369e:	df 91       	pop	r29
    36a0:	08 95       	ret

000036a2 <HLCD_displayStringRowColumn>:
void HLCD_displayStringRowColumn(u8 row,u8 column,const u8 *string){
    36a2:	df 93       	push	r29
    36a4:	cf 93       	push	r28
    36a6:	00 d0       	rcall	.+0      	; 0x36a8 <HLCD_displayStringRowColumn+0x6>
    36a8:	00 d0       	rcall	.+0      	; 0x36aa <HLCD_displayStringRowColumn+0x8>
    36aa:	cd b7       	in	r28, 0x3d	; 61
    36ac:	de b7       	in	r29, 0x3e	; 62
    36ae:	89 83       	std	Y+1, r24	; 0x01
    36b0:	6a 83       	std	Y+2, r22	; 0x02
    36b2:	5c 83       	std	Y+4, r21	; 0x04
    36b4:	4b 83       	std	Y+3, r20	; 0x03
	HLCD_moveCursor(row,column);
    36b6:	89 81       	ldd	r24, Y+1	; 0x01
    36b8:	6a 81       	ldd	r22, Y+2	; 0x02
    36ba:	0e 94 0f 1b 	call	0x361e	; 0x361e <HLCD_moveCursor>
	HLCD_displayString(string);
    36be:	8b 81       	ldd	r24, Y+3	; 0x03
    36c0:	9c 81       	ldd	r25, Y+4	; 0x04
    36c2:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <HLCD_displayString>
}
    36c6:	0f 90       	pop	r0
    36c8:	0f 90       	pop	r0
    36ca:	0f 90       	pop	r0
    36cc:	0f 90       	pop	r0
    36ce:	cf 91       	pop	r28
    36d0:	df 91       	pop	r29
    36d2:	08 95       	ret

000036d4 <HLCD_displayStringRowColumnDirection>:
void HLCD_displayStringRowColumnDirection(/*u8 row,u8 column,*/const u8 *string,u8 direction){
    36d4:	df 93       	push	r29
    36d6:	cf 93       	push	r28
    36d8:	00 d0       	rcall	.+0      	; 0x36da <HLCD_displayStringRowColumnDirection+0x6>
    36da:	0f 92       	push	r0
    36dc:	cd b7       	in	r28, 0x3d	; 61
    36de:	de b7       	in	r29, 0x3e	; 62
    36e0:	9a 83       	std	Y+2, r25	; 0x02
    36e2:	89 83       	std	Y+1, r24	; 0x01
    36e4:	6b 83       	std	Y+3, r22	; 0x03
	//HLCD_moveCursor(row,column);
	if(direction == RIGHT){
    36e6:	8b 81       	ldd	r24, Y+3	; 0x03
    36e8:	86 30       	cpi	r24, 0x06	; 6
    36ea:	21 f4       	brne	.+8      	; 0x36f4 <HLCD_displayStringRowColumnDirection+0x20>
		HLCD_voidSendCommand(LCD_SHIFT_CURSOR_RIGHT);
    36ec:	84 e1       	ldi	r24, 0x14	; 20
    36ee:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <HLCD_voidSendCommand>
    36f2:	06 c0       	rjmp	.+12     	; 0x3700 <HLCD_displayStringRowColumnDirection+0x2c>
	}
	else if(direction == LEFT){
    36f4:	8b 81       	ldd	r24, Y+3	; 0x03
    36f6:	85 30       	cpi	r24, 0x05	; 5
    36f8:	19 f4       	brne	.+6      	; 0x3700 <HLCD_displayStringRowColumnDirection+0x2c>
		HLCD_voidSendCommand(LCD_SHIFT_CURSOR_LEFT);
    36fa:	80 e1       	ldi	r24, 0x10	; 16
    36fc:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <HLCD_voidSendCommand>
	}
	HLCD_displayString(string);
    3700:	89 81       	ldd	r24, Y+1	; 0x01
    3702:	9a 81       	ldd	r25, Y+2	; 0x02
    3704:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <HLCD_displayString>
}
    3708:	0f 90       	pop	r0
    370a:	0f 90       	pop	r0
    370c:	0f 90       	pop	r0
    370e:	cf 91       	pop	r28
    3710:	df 91       	pop	r29
    3712:	08 95       	ret

00003714 <HLCD_intgerToString>:
void HLCD_intgerToString(int number){
    3714:	df 93       	push	r29
    3716:	cf 93       	push	r28
    3718:	cd b7       	in	r28, 0x3d	; 61
    371a:	de b7       	in	r29, 0x3e	; 62
    371c:	62 97       	sbiw	r28, 0x12	; 18
    371e:	0f b6       	in	r0, 0x3f	; 63
    3720:	f8 94       	cli
    3722:	de bf       	out	0x3e, r29	; 62
    3724:	0f be       	out	0x3f, r0	; 63
    3726:	cd bf       	out	0x3d, r28	; 61
    3728:	9a 8b       	std	Y+18, r25	; 0x12
    372a:	89 8b       	std	Y+17, r24	; 0x11
	u8 buff[16];
	itoa(number,buff,10);
    372c:	89 89       	ldd	r24, Y+17	; 0x11
    372e:	9a 89       	ldd	r25, Y+18	; 0x12
    3730:	9e 01       	movw	r18, r28
    3732:	2f 5f       	subi	r18, 0xFF	; 255
    3734:	3f 4f       	sbci	r19, 0xFF	; 255
    3736:	b9 01       	movw	r22, r18
    3738:	4a e0       	ldi	r20, 0x0A	; 10
    373a:	50 e0       	ldi	r21, 0x00	; 0
    373c:	0e 94 71 22 	call	0x44e2	; 0x44e2 <itoa>
	HLCD_displayString(buff);
    3740:	ce 01       	movw	r24, r28
    3742:	01 96       	adiw	r24, 0x01	; 1
    3744:	0e 94 f3 1a 	call	0x35e6	; 0x35e6 <HLCD_displayString>
}
    3748:	62 96       	adiw	r28, 0x12	; 18
    374a:	0f b6       	in	r0, 0x3f	; 63
    374c:	f8 94       	cli
    374e:	de bf       	out	0x3e, r29	; 62
    3750:	0f be       	out	0x3f, r0	; 63
    3752:	cd bf       	out	0x3d, r28	; 61
    3754:	cf 91       	pop	r28
    3756:	df 91       	pop	r29
    3758:	08 95       	ret

0000375a <HLCD_clearScrean>:
void HLCD_clearScrean(){
    375a:	df 93       	push	r29
    375c:	cf 93       	push	r28
    375e:	cd b7       	in	r28, 0x3d	; 61
    3760:	de b7       	in	r29, 0x3e	; 62
	HLCD_voidSendCommand(CLEAR_COMMAND);
    3762:	81 e0       	ldi	r24, 0x01	; 1
    3764:	0e 94 a5 16 	call	0x2d4a	; 0x2d4a <HLCD_voidSendCommand>
}
    3768:	cf 91       	pop	r28
    376a:	df 91       	pop	r29
    376c:	08 95       	ret

0000376e <HLDR_u16GetSensorRead>:
#include "hldr_config.h"
#include "hldr_interface.h"
#include "adc_interface.h"


u8 HLDR_u16GetSensorRead(){
    376e:	df 93       	push	r29
    3770:	cf 93       	push	r28
    3772:	00 d0       	rcall	.+0      	; 0x3774 <HLDR_u16GetSensorRead+0x6>
    3774:	0f 92       	push	r0
    3776:	cd b7       	in	r28, 0x3d	; 61
    3778:	de b7       	in	r29, 0x3e	; 62
    u8 result = 0 ;
    377a:	1b 82       	std	Y+3, r1	; 0x03
	u16 adc_value;

	adc_value = MADC_u16ReadChannel(LDR_CHANNEL_ID);
    377c:	81 e0       	ldi	r24, 0x01	; 1
    377e:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <MADC_u16ReadChannel>
    3782:	9a 83       	std	Y+2, r25	; 0x02
    3784:	89 83       	std	Y+1, r24	; 0x01
//	adc_value = 0;

	result = (u8)((( (u32) (adc_value-MIN_ADC_REG) * (MAX_AVR_REG - MIN_AVR_REG) ) / (MAX_ADC_REG - MIN_ADC_REG) ) + MIN_AVR_REG);
    3786:	89 81       	ldd	r24, Y+1	; 0x01
    3788:	9a 81       	ldd	r25, Y+2	; 0x02
    378a:	cc 01       	movw	r24, r24
    378c:	a0 e0       	ldi	r26, 0x00	; 0
    378e:	b0 e0       	ldi	r27, 0x00	; 0
    3790:	2f ef       	ldi	r18, 0xFF	; 255
    3792:	30 e0       	ldi	r19, 0x00	; 0
    3794:	40 e0       	ldi	r20, 0x00	; 0
    3796:	50 e0       	ldi	r21, 0x00	; 0
    3798:	bc 01       	movw	r22, r24
    379a:	cd 01       	movw	r24, r26
    379c:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <__mulsi3>
    37a0:	dc 01       	movw	r26, r24
    37a2:	cb 01       	movw	r24, r22
    37a4:	07 2e       	mov	r0, r23
    37a6:	7a e0       	ldi	r23, 0x0A	; 10
    37a8:	b6 95       	lsr	r27
    37aa:	a7 95       	ror	r26
    37ac:	97 95       	ror	r25
    37ae:	87 95       	ror	r24
    37b0:	7a 95       	dec	r23
    37b2:	d1 f7       	brne	.-12     	; 0x37a8 <HLDR_u16GetSensorRead+0x3a>
    37b4:	70 2d       	mov	r23, r0
    37b6:	8b 83       	std	Y+3, r24	; 0x03
//result = ( (u8) ((u32) 90 * adc_value )/1024);
	return result;
    37b8:	8b 81       	ldd	r24, Y+3	; 0x03
}
    37ba:	0f 90       	pop	r0
    37bc:	0f 90       	pop	r0
    37be:	0f 90       	pop	r0
    37c0:	cf 91       	pop	r28
    37c2:	df 91       	pop	r29
    37c4:	08 95       	ret

000037c6 <LM35_getTemperature>:
/*
 * Description:
 * Function responsible for calculate the temperature from the ADC digital value.
 */
u8 LM35_getTemperature()
{
    37c6:	df 93       	push	r29
    37c8:	cf 93       	push	r28
    37ca:	00 d0       	rcall	.+0      	; 0x37cc <LM35_getTemperature+0x6>
    37cc:	00 d0       	rcall	.+0      	; 0x37ce <LM35_getTemperature+0x8>
    37ce:	cd b7       	in	r28, 0x3d	; 61
    37d0:	de b7       	in	r29, 0x3e	; 62
	u16 adc_value = 0 ;
    37d2:	1c 82       	std	Y+4, r1	; 0x04
    37d4:	1b 82       	std	Y+3, r1	; 0x03

	u8 sensor_temp_map = 0 ;
    37d6:	1a 82       	std	Y+2, r1	; 0x02
	u8 sensor_temp = 0 ;
    37d8:	19 82       	std	Y+1, r1	; 0x01

	adc_value = MADC_u16ReadChannel(SENSOR_CHANNEL_ID);
    37da:	80 e0       	ldi	r24, 0x00	; 0
    37dc:	0e 94 e1 15 	call	0x2bc2	; 0x2bc2 <MADC_u16ReadChannel>
    37e0:	9c 83       	std	Y+4, r25	; 0x04
    37e2:	8b 83       	std	Y+3, r24	; 0x03
	sensor_temp_map = (u8)( ((u32) ADC_REF_VOLT_VALUE*adc_value * LM35_TEMP_MAX_VALUE ) / (LM35_VOLT_MAX_VALUE * ADC_MAXIMUM_VALUE) );
    37e4:	8b 81       	ldd	r24, Y+3	; 0x03
    37e6:	9c 81       	ldd	r25, Y+4	; 0x04
    37e8:	cc 01       	movw	r24, r24
    37ea:	a0 e0       	ldi	r26, 0x00	; 0
    37ec:	b0 e0       	ldi	r27, 0x00	; 0
    37ee:	2e ee       	ldi	r18, 0xEE	; 238
    37f0:	32 e0       	ldi	r19, 0x02	; 2
    37f2:	40 e0       	ldi	r20, 0x00	; 0
    37f4:	50 e0       	ldi	r21, 0x00	; 0
    37f6:	bc 01       	movw	r22, r24
    37f8:	cd 01       	movw	r24, r26
    37fa:	0e 94 f9 21 	call	0x43f2	; 0x43f2 <__mulsi3>
    37fe:	dc 01       	movw	r26, r24
    3800:	cb 01       	movw	r24, r22
    3802:	bc 01       	movw	r22, r24
    3804:	cd 01       	movw	r24, r26
    3806:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    380a:	dc 01       	movw	r26, r24
    380c:	cb 01       	movw	r24, r22
    380e:	bc 01       	movw	r22, r24
    3810:	cd 01       	movw	r24, r26
    3812:	20 e0       	ldi	r18, 0x00	; 0
    3814:	30 ed       	ldi	r19, 0xD0	; 208
    3816:	4f eb       	ldi	r20, 0xBF	; 191
    3818:	54 e4       	ldi	r21, 0x44	; 68
    381a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    381e:	dc 01       	movw	r26, r24
    3820:	cb 01       	movw	r24, r22
    3822:	bc 01       	movw	r22, r24
    3824:	cd 01       	movw	r24, r26
    3826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    382a:	dc 01       	movw	r26, r24
    382c:	cb 01       	movw	r24, r22
    382e:	8a 83       	std	Y+2, r24	; 0x02

	sensor_temp = (u8) (((u32)(50 * sensor_temp_map)) / 255) ;
    3830:	8a 81       	ldd	r24, Y+2	; 0x02
    3832:	28 2f       	mov	r18, r24
    3834:	30 e0       	ldi	r19, 0x00	; 0
    3836:	82 e3       	ldi	r24, 0x32	; 50
    3838:	90 e0       	ldi	r25, 0x00	; 0
    383a:	ac 01       	movw	r20, r24
    383c:	24 9f       	mul	r18, r20
    383e:	c0 01       	movw	r24, r0
    3840:	25 9f       	mul	r18, r21
    3842:	90 0d       	add	r25, r0
    3844:	34 9f       	mul	r19, r20
    3846:	90 0d       	add	r25, r0
    3848:	11 24       	eor	r1, r1
    384a:	aa 27       	eor	r26, r26
    384c:	97 fd       	sbrc	r25, 7
    384e:	a0 95       	com	r26
    3850:	ba 2f       	mov	r27, r26
    3852:	2f ef       	ldi	r18, 0xFF	; 255
    3854:	30 e0       	ldi	r19, 0x00	; 0
    3856:	40 e0       	ldi	r20, 0x00	; 0
    3858:	50 e0       	ldi	r21, 0x00	; 0
    385a:	bc 01       	movw	r22, r24
    385c:	cd 01       	movw	r24, r26
    385e:	0e 94 18 22 	call	0x4430	; 0x4430 <__udivmodsi4>
    3862:	da 01       	movw	r26, r20
    3864:	c9 01       	movw	r24, r18
    3866:	89 83       	std	Y+1, r24	; 0x01
	return sensor_temp_map;
    3868:	8a 81       	ldd	r24, Y+2	; 0x02
}
    386a:	0f 90       	pop	r0
    386c:	0f 90       	pop	r0
    386e:	0f 90       	pop	r0
    3870:	0f 90       	pop	r0
    3872:	cf 91       	pop	r28
    3874:	df 91       	pop	r29
    3876:	08 95       	ret

00003878 <M_SPI_initMaster>:
 *   Enable Master bit
 *   Select SCK frequency
 *   Enable SPI
 */
void M_SPI_initMaster(SPI_ConfigType *config_master)
{
    3878:	df 93       	push	r29
    387a:	cf 93       	push	r28
    387c:	00 d0       	rcall	.+0      	; 0x387e <M_SPI_initMaster+0x6>
    387e:	cd b7       	in	r28, 0x3d	; 61
    3880:	de b7       	in	r29, 0x3e	; 62
    3882:	9a 83       	std	Y+2, r25	; 0x02
    3884:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPinDirection(SPI_PORT_ID, SPI_SS_PIN, DIO_OUTPUT);
    3886:	82 e0       	ldi	r24, 0x02	; 2
    3888:	64 e0       	ldi	r22, 0x04	; 4
    388a:	41 e0       	ldi	r20, 0x01	; 1
    388c:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(SPI_PORT_ID, SPI_MOSI_PIN, DIO_OUTPUT);
    3890:	82 e0       	ldi	r24, 0x02	; 2
    3892:	65 e0       	ldi	r22, 0x05	; 5
    3894:	41 e0       	ldi	r20, 0x01	; 1
    3896:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(SPI_PORT_ID, SPI_SCK_PIN, DIO_OUTPUT);
    389a:	82 e0       	ldi	r24, 0x02	; 2
    389c:	67 e0       	ldi	r22, 0x07	; 7
    389e:	41 e0       	ldi	r20, 0x01	; 1
    38a0:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(SPI_PORT_ID,SPI_MISO_PIN, DIO_INPUT);
    38a4:	82 e0       	ldi	r24, 0x02	; 2
    38a6:	66 e0       	ldi	r22, 0x06	; 6
    38a8:	40 e0       	ldi	r20, 0x00	; 0
    38aa:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <MDIO_voidSetPinDirection>
	/* Enable SPI pin and Initiate master  */
	SPCR = (1<<SPCR_SPE) | (1<<SPCR_MSTR);
    38ae:	ed e2       	ldi	r30, 0x2D	; 45
    38b0:	f0 e0       	ldi	r31, 0x00	; 0
    38b2:	80 e5       	ldi	r24, 0x50	; 80
    38b4:	80 83       	st	Z, r24

	SET_BIT(SPCR,SPCR_DORD);
    38b6:	ad e2       	ldi	r26, 0x2D	; 45
    38b8:	b0 e0       	ldi	r27, 0x00	; 0
    38ba:	ed e2       	ldi	r30, 0x2D	; 45
    38bc:	f0 e0       	ldi	r31, 0x00	; 0
    38be:	80 81       	ld	r24, Z
    38c0:	80 62       	ori	r24, 0x20	; 32
    38c2:	8c 93       	st	X, r24
	/* Configure sampling edge */
	SPCR |= ((config_master->clk_polarity)<<3) | ((config_master->clk_phase)<<2);
    38c4:	ad e2       	ldi	r26, 0x2D	; 45
    38c6:	b0 e0       	ldi	r27, 0x00	; 0
    38c8:	ed e2       	ldi	r30, 0x2D	; 45
    38ca:	f0 e0       	ldi	r31, 0x00	; 0
    38cc:	80 81       	ld	r24, Z
    38ce:	38 2f       	mov	r19, r24
    38d0:	e9 81       	ldd	r30, Y+1	; 0x01
    38d2:	fa 81       	ldd	r31, Y+2	; 0x02
    38d4:	80 81       	ld	r24, Z
    38d6:	88 2f       	mov	r24, r24
    38d8:	90 e0       	ldi	r25, 0x00	; 0
    38da:	88 0f       	add	r24, r24
    38dc:	99 1f       	adc	r25, r25
    38de:	88 0f       	add	r24, r24
    38e0:	99 1f       	adc	r25, r25
    38e2:	88 0f       	add	r24, r24
    38e4:	99 1f       	adc	r25, r25
    38e6:	28 2f       	mov	r18, r24
    38e8:	e9 81       	ldd	r30, Y+1	; 0x01
    38ea:	fa 81       	ldd	r31, Y+2	; 0x02
    38ec:	81 81       	ldd	r24, Z+1	; 0x01
    38ee:	88 2f       	mov	r24, r24
    38f0:	90 e0       	ldi	r25, 0x00	; 0
    38f2:	88 0f       	add	r24, r24
    38f4:	99 1f       	adc	r25, r25
    38f6:	88 0f       	add	r24, r24
    38f8:	99 1f       	adc	r25, r25
    38fa:	82 2b       	or	r24, r18
    38fc:	83 2b       	or	r24, r19
    38fe:	8c 93       	st	X, r24
	/* Configure clock rate */
	SPCR = SPCR | ((config_master->clk_rate) & 0x03);
    3900:	ad e2       	ldi	r26, 0x2D	; 45
    3902:	b0 e0       	ldi	r27, 0x00	; 0
    3904:	ed e2       	ldi	r30, 0x2D	; 45
    3906:	f0 e0       	ldi	r31, 0x00	; 0
    3908:	80 81       	ld	r24, Z
    390a:	98 2f       	mov	r25, r24
    390c:	e9 81       	ldd	r30, Y+1	; 0x01
    390e:	fa 81       	ldd	r31, Y+2	; 0x02
    3910:	82 81       	ldd	r24, Z+2	; 0x02
    3912:	83 70       	andi	r24, 0x03	; 3
    3914:	89 2b       	or	r24, r25
    3916:	8c 93       	st	X, r24
	SPSR = SPSR | (((config_master->clk_rate) & 0x04)>>2);
    3918:	ae e2       	ldi	r26, 0x2E	; 46
    391a:	b0 e0       	ldi	r27, 0x00	; 0
    391c:	ee e2       	ldi	r30, 0x2E	; 46
    391e:	f0 e0       	ldi	r31, 0x00	; 0
    3920:	80 81       	ld	r24, Z
    3922:	28 2f       	mov	r18, r24
    3924:	e9 81       	ldd	r30, Y+1	; 0x01
    3926:	fa 81       	ldd	r31, Y+2	; 0x02
    3928:	82 81       	ldd	r24, Z+2	; 0x02
    392a:	88 2f       	mov	r24, r24
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	84 70       	andi	r24, 0x04	; 4
    3930:	90 70       	andi	r25, 0x00	; 0
    3932:	95 95       	asr	r25
    3934:	87 95       	ror	r24
    3936:	95 95       	asr	r25
    3938:	87 95       	ror	r24
    393a:	82 2b       	or	r24, r18
    393c:	8c 93       	st	X, r24
}
    393e:	0f 90       	pop	r0
    3940:	0f 90       	pop	r0
    3942:	cf 91       	pop	r28
    3944:	df 91       	pop	r29
    3946:	08 95       	ret

00003948 <M_SPI_initSlave>:
 *   Select MISO pin as output and rest pins input.
 *   Enable SPI.
 *   Setup clock polarity and phase same as master
 */
void M_SPI_initSlave(SPI_ConfigType *config_slave)
{
    3948:	df 93       	push	r29
    394a:	cf 93       	push	r28
    394c:	00 d0       	rcall	.+0      	; 0x394e <M_SPI_initSlave+0x6>
    394e:	cd b7       	in	r28, 0x3d	; 61
    3950:	de b7       	in	r29, 0x3e	; 62
    3952:	9a 83       	std	Y+2, r25	; 0x02
    3954:	89 83       	std	Y+1, r24	; 0x01
	MDIO_voidSetPinDirection(SPI_PORT_ID,SPI_MISO_PIN, DIO_OUTPUT);
    3956:	82 e0       	ldi	r24, 0x02	; 2
    3958:	66 e0       	ldi	r22, 0x06	; 6
    395a:	41 e0       	ldi	r20, 0x01	; 1
    395c:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(SPI_PORT_ID, SPI_SS_PIN, DIO_INPUT);
    3960:	82 e0       	ldi	r24, 0x02	; 2
    3962:	64 e0       	ldi	r22, 0x04	; 4
    3964:	40 e0       	ldi	r20, 0x00	; 0
    3966:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(SPI_PORT_ID, SPI_MOSI_PIN, DIO_INPUT);
    396a:	82 e0       	ldi	r24, 0x02	; 2
    396c:	65 e0       	ldi	r22, 0x05	; 5
    396e:	40 e0       	ldi	r20, 0x00	; 0
    3970:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <MDIO_voidSetPinDirection>
	MDIO_voidSetPinDirection(SPI_PORT_ID, SPI_SCK_PIN, DIO_INPUT);
    3974:	82 e0       	ldi	r24, 0x02	; 2
    3976:	67 e0       	ldi	r22, 0x07	; 7
    3978:	40 e0       	ldi	r20, 0x00	; 0
    397a:	0e 94 9d 1e 	call	0x3d3a	; 0x3d3a <MDIO_voidSetPinDirection>
	/* Enable SPI pin */
	SPCR |= (1<<SPCR_SPE);
    397e:	ad e2       	ldi	r26, 0x2D	; 45
    3980:	b0 e0       	ldi	r27, 0x00	; 0
    3982:	ed e2       	ldi	r30, 0x2D	; 45
    3984:	f0 e0       	ldi	r31, 0x00	; 0
    3986:	80 81       	ld	r24, Z
    3988:	80 64       	ori	r24, 0x40	; 64
    398a:	8c 93       	st	X, r24

	SET_BIT(SPCR,SPCR_DORD);
    398c:	ad e2       	ldi	r26, 0x2D	; 45
    398e:	b0 e0       	ldi	r27, 0x00	; 0
    3990:	ed e2       	ldi	r30, 0x2D	; 45
    3992:	f0 e0       	ldi	r31, 0x00	; 0
    3994:	80 81       	ld	r24, Z
    3996:	80 62       	ori	r24, 0x20	; 32
    3998:	8c 93       	st	X, r24
	/* Configure sampling edge */
	SPCR |= ((config_slave->clk_polarity)<<3) | ((config_slave->clk_phase)<<2);
    399a:	ad e2       	ldi	r26, 0x2D	; 45
    399c:	b0 e0       	ldi	r27, 0x00	; 0
    399e:	ed e2       	ldi	r30, 0x2D	; 45
    39a0:	f0 e0       	ldi	r31, 0x00	; 0
    39a2:	80 81       	ld	r24, Z
    39a4:	38 2f       	mov	r19, r24
    39a6:	e9 81       	ldd	r30, Y+1	; 0x01
    39a8:	fa 81       	ldd	r31, Y+2	; 0x02
    39aa:	80 81       	ld	r24, Z
    39ac:	88 2f       	mov	r24, r24
    39ae:	90 e0       	ldi	r25, 0x00	; 0
    39b0:	88 0f       	add	r24, r24
    39b2:	99 1f       	adc	r25, r25
    39b4:	88 0f       	add	r24, r24
    39b6:	99 1f       	adc	r25, r25
    39b8:	88 0f       	add	r24, r24
    39ba:	99 1f       	adc	r25, r25
    39bc:	28 2f       	mov	r18, r24
    39be:	e9 81       	ldd	r30, Y+1	; 0x01
    39c0:	fa 81       	ldd	r31, Y+2	; 0x02
    39c2:	81 81       	ldd	r24, Z+1	; 0x01
    39c4:	88 2f       	mov	r24, r24
    39c6:	90 e0       	ldi	r25, 0x00	; 0
    39c8:	88 0f       	add	r24, r24
    39ca:	99 1f       	adc	r25, r25
    39cc:	88 0f       	add	r24, r24
    39ce:	99 1f       	adc	r25, r25
    39d0:	82 2b       	or	r24, r18
    39d2:	83 2b       	or	r24, r19
    39d4:	8c 93       	st	X, r24
	SPSR &= ~(1<<SPSR_SPI2X);
    39d6:	ae e2       	ldi	r26, 0x2E	; 46
    39d8:	b0 e0       	ldi	r27, 0x00	; 0
    39da:	ee e2       	ldi	r30, 0x2E	; 46
    39dc:	f0 e0       	ldi	r31, 0x00	; 0
    39de:	80 81       	ld	r24, Z
    39e0:	8e 7f       	andi	r24, 0xFE	; 254
    39e2:	8c 93       	st	X, r24

}
    39e4:	0f 90       	pop	r0
    39e6:	0f 90       	pop	r0
    39e8:	cf 91       	pop	r28
    39ea:	df 91       	pop	r29
    39ec:	08 95       	ret

000039ee <M_SPI_sendReceiveByte>:
/*
 * Description:
 *  Function to send and receive data.
 */
u8 M_SPI_sendReceiveByte(u8 data)
{
    39ee:	df 93       	push	r29
    39f0:	cf 93       	push	r28
    39f2:	0f 92       	push	r0
    39f4:	cd b7       	in	r28, 0x3d	; 61
    39f6:	de b7       	in	r29, 0x3e	; 62
    39f8:	89 83       	std	Y+1, r24	; 0x01
	/* Send data */
	SPDR = data;
    39fa:	ef e2       	ldi	r30, 0x2F	; 47
    39fc:	f0 e0       	ldi	r31, 0x00	; 0
    39fe:	89 81       	ldd	r24, Y+1	; 0x01
    3a00:	80 83       	st	Z, r24
	/* Polling on SPI interrupt flag until finish sending */
	while(BIT_IS_CLEAR(SPSR,SPSR_SPIF)){}
    3a02:	ee e2       	ldi	r30, 0x2E	; 46
    3a04:	f0 e0       	ldi	r31, 0x00	; 0
    3a06:	80 81       	ld	r24, Z
    3a08:	88 23       	and	r24, r24
    3a0a:	dc f7       	brge	.-10     	; 0x3a02 <M_SPI_sendReceiveByte+0x14>
	/* Read received data and clear interrupt flag */
	return SPDR;
    3a0c:	ef e2       	ldi	r30, 0x2F	; 47
    3a0e:	f0 e0       	ldi	r31, 0x00	; 0
    3a10:	80 81       	ld	r24, Z
}
    3a12:	0f 90       	pop	r0
    3a14:	cf 91       	pop	r28
    3a16:	df 91       	pop	r29
    3a18:	08 95       	ret

00003a1a <M_SPI_sendString>:
/*
 * Description:
 *
 */
void M_SPI_sendString(u8 *string)
{
    3a1a:	df 93       	push	r29
    3a1c:	cf 93       	push	r28
    3a1e:	00 d0       	rcall	.+0      	; 0x3a20 <M_SPI_sendString+0x6>
    3a20:	0f 92       	push	r0
    3a22:	cd b7       	in	r28, 0x3d	; 61
    3a24:	de b7       	in	r29, 0x3e	; 62
    3a26:	9b 83       	std	Y+3, r25	; 0x03
    3a28:	8a 83       	std	Y+2, r24	; 0x02
	u8 received_data = 0;
    3a2a:	19 82       	std	Y+1, r1	; 0x01
    3a2c:	0b c0       	rjmp	.+22     	; 0x3a44 <M_SPI_sendString+0x2a>
	while (*string != '\0')
	{
		received_data = M_SPI_sendReceiveByte(*string);
    3a2e:	ea 81       	ldd	r30, Y+2	; 0x02
    3a30:	fb 81       	ldd	r31, Y+3	; 0x03
    3a32:	80 81       	ld	r24, Z
    3a34:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <M_SPI_sendReceiveByte>
    3a38:	89 83       	std	Y+1, r24	; 0x01
		string++;
    3a3a:	8a 81       	ldd	r24, Y+2	; 0x02
    3a3c:	9b 81       	ldd	r25, Y+3	; 0x03
    3a3e:	01 96       	adiw	r24, 0x01	; 1
    3a40:	9b 83       	std	Y+3, r25	; 0x03
    3a42:	8a 83       	std	Y+2, r24	; 0x02
 *
 */
void M_SPI_sendString(u8 *string)
{
	u8 received_data = 0;
	while (*string != '\0')
    3a44:	ea 81       	ldd	r30, Y+2	; 0x02
    3a46:	fb 81       	ldd	r31, Y+3	; 0x03
    3a48:	80 81       	ld	r24, Z
    3a4a:	88 23       	and	r24, r24
    3a4c:	81 f7       	brne	.-32     	; 0x3a2e <M_SPI_sendString+0x14>
	{
		received_data = M_SPI_sendReceiveByte(*string);
		string++;
	}
}
    3a4e:	0f 90       	pop	r0
    3a50:	0f 90       	pop	r0
    3a52:	0f 90       	pop	r0
    3a54:	cf 91       	pop	r28
    3a56:	df 91       	pop	r29
    3a58:	08 95       	ret

00003a5a <M_SPI_receiveString>:
/*
 * Description:
 *
 */
void M_SPI_receiveString(u8 *string)
{
    3a5a:	0f 93       	push	r16
    3a5c:	1f 93       	push	r17
    3a5e:	df 93       	push	r29
    3a60:	cf 93       	push	r28
    3a62:	00 d0       	rcall	.+0      	; 0x3a64 <M_SPI_receiveString+0xa>
    3a64:	0f 92       	push	r0
    3a66:	cd b7       	in	r28, 0x3d	; 61
    3a68:	de b7       	in	r29, 0x3e	; 62
    3a6a:	9b 83       	std	Y+3, r25	; 0x03
    3a6c:	8a 83       	std	Y+2, r24	; 0x02
	s8 i = -1;
    3a6e:	8f ef       	ldi	r24, 0xFF	; 255
    3a70:	89 83       	std	Y+1, r24	; 0x01
	do{
		i++;
    3a72:	89 81       	ldd	r24, Y+1	; 0x01
    3a74:	8f 5f       	subi	r24, 0xFF	; 255
    3a76:	89 83       	std	Y+1, r24	; 0x01
		string[i] = M_SPI_sendReceiveByte(SPI_DEFAULT_DATA_VALUE);
    3a78:	89 81       	ldd	r24, Y+1	; 0x01
    3a7a:	28 2f       	mov	r18, r24
    3a7c:	33 27       	eor	r19, r19
    3a7e:	27 fd       	sbrc	r18, 7
    3a80:	30 95       	com	r19
    3a82:	8a 81       	ldd	r24, Y+2	; 0x02
    3a84:	9b 81       	ldd	r25, Y+3	; 0x03
    3a86:	8c 01       	movw	r16, r24
    3a88:	02 0f       	add	r16, r18
    3a8a:	13 1f       	adc	r17, r19
    3a8c:	8f ef       	ldi	r24, 0xFF	; 255
    3a8e:	0e 94 f7 1c 	call	0x39ee	; 0x39ee <M_SPI_sendReceiveByte>
    3a92:	f8 01       	movw	r30, r16
    3a94:	80 83       	st	Z, r24
	}while(string[i] != '#');
    3a96:	89 81       	ldd	r24, Y+1	; 0x01
    3a98:	28 2f       	mov	r18, r24
    3a9a:	33 27       	eor	r19, r19
    3a9c:	27 fd       	sbrc	r18, 7
    3a9e:	30 95       	com	r19
    3aa0:	8a 81       	ldd	r24, Y+2	; 0x02
    3aa2:	9b 81       	ldd	r25, Y+3	; 0x03
    3aa4:	fc 01       	movw	r30, r24
    3aa6:	e2 0f       	add	r30, r18
    3aa8:	f3 1f       	adc	r31, r19
    3aaa:	80 81       	ld	r24, Z
    3aac:	83 32       	cpi	r24, 0x23	; 35
    3aae:	09 f7       	brne	.-62     	; 0x3a72 <M_SPI_receiveString+0x18>
	string[i] = '\0';
    3ab0:	89 81       	ldd	r24, Y+1	; 0x01
    3ab2:	28 2f       	mov	r18, r24
    3ab4:	33 27       	eor	r19, r19
    3ab6:	27 fd       	sbrc	r18, 7
    3ab8:	30 95       	com	r19
    3aba:	8a 81       	ldd	r24, Y+2	; 0x02
    3abc:	9b 81       	ldd	r25, Y+3	; 0x03
    3abe:	fc 01       	movw	r30, r24
    3ac0:	e2 0f       	add	r30, r18
    3ac2:	f3 1f       	adc	r31, r19
    3ac4:	10 82       	st	Z, r1
}
    3ac6:	0f 90       	pop	r0
    3ac8:	0f 90       	pop	r0
    3aca:	0f 90       	pop	r0
    3acc:	cf 91       	pop	r28
    3ace:	df 91       	pop	r29
    3ad0:	1f 91       	pop	r17
    3ad2:	0f 91       	pop	r16
    3ad4:	08 95       	ret

00003ad6 <M_UART_voidInit>:
#include "m_uart_private.h"
#include "m_uart_config.h"
#ifdef RX_INTERRUPT
static void (*g_pf)(void) = NULL_PTR ;
#endif
void  M_UART_voidInit(UART_ConfigType *config_type){
    3ad6:	df 93       	push	r29
    3ad8:	cf 93       	push	r28
    3ada:	00 d0       	rcall	.+0      	; 0x3adc <M_UART_voidInit+0x6>
    3adc:	00 d0       	rcall	.+0      	; 0x3ade <M_UART_voidInit+0x8>
    3ade:	cd b7       	in	r28, 0x3d	; 61
    3ae0:	de b7       	in	r29, 0x3e	; 62
    3ae2:	9c 83       	std	Y+4, r25	; 0x04
    3ae4:	8b 83       	std	Y+3, r24	; 0x03
	u16 ubrr_value = 0;
    3ae6:	1a 82       	std	Y+2, r1	; 0x02
    3ae8:	19 82       	std	Y+1, r1	; 0x01

	/* Set double transmission speed */
	UCSRA= (1<<UCSRA_U2X);
    3aea:	eb e2       	ldi	r30, 0x2B	; 43
    3aec:	f0 e0       	ldi	r31, 0x00	; 0
    3aee:	82 e0       	ldi	r24, 0x02	; 2
    3af0:	80 83       	st	Z, r24
	/*
	 * 1- Enable receive and transmit.
	 * 2- choose Number of data bits per frame
	 */
	UCSRB = (1<<UCSRB_RXEN) | (1<<UCSRB_TXEN);
    3af2:	ea e2       	ldi	r30, 0x2A	; 42
    3af4:	f0 e0       	ldi	r31, 0x00	; 0
    3af6:	88 e1       	ldi	r24, 0x18	; 24
    3af8:	80 83       	st	Z, r24
	UCSRB =  UCSRB | (config_type->char_size & 0x04);
    3afa:	aa e2       	ldi	r26, 0x2A	; 42
    3afc:	b0 e0       	ldi	r27, 0x00	; 0
    3afe:	ea e2       	ldi	r30, 0x2A	; 42
    3b00:	f0 e0       	ldi	r31, 0x00	; 0
    3b02:	80 81       	ld	r24, Z
    3b04:	98 2f       	mov	r25, r24
    3b06:	eb 81       	ldd	r30, Y+3	; 0x03
    3b08:	fc 81       	ldd	r31, Y+4	; 0x04
    3b0a:	82 81       	ldd	r24, Z+2	; 0x02
    3b0c:	84 70       	andi	r24, 0x04	; 4
    3b0e:	89 2b       	or	r24, r25
    3b10:	8c 93       	st	X, r24
	/*
	 * 1-choose parity mode
	 * 2-choose stop bit for frame
	 * 3-choose number of data bits per frame
	 */
	UCSRC = (1<<UCSRC_URSEL) | (config_type->parity<<4) | (config_type->stop_bit<<3) | ((config_type->char_size & 0x03)<<1);
    3b12:	a0 e4       	ldi	r26, 0x40	; 64
    3b14:	b0 e0       	ldi	r27, 0x00	; 0
    3b16:	eb 81       	ldd	r30, Y+3	; 0x03
    3b18:	fc 81       	ldd	r31, Y+4	; 0x04
    3b1a:	80 81       	ld	r24, Z
    3b1c:	88 2f       	mov	r24, r24
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	82 95       	swap	r24
    3b22:	92 95       	swap	r25
    3b24:	90 7f       	andi	r25, 0xF0	; 240
    3b26:	98 27       	eor	r25, r24
    3b28:	80 7f       	andi	r24, 0xF0	; 240
    3b2a:	98 27       	eor	r25, r24
    3b2c:	28 2f       	mov	r18, r24
    3b2e:	20 68       	ori	r18, 0x80	; 128
    3b30:	eb 81       	ldd	r30, Y+3	; 0x03
    3b32:	fc 81       	ldd	r31, Y+4	; 0x04
    3b34:	81 81       	ldd	r24, Z+1	; 0x01
    3b36:	88 2f       	mov	r24, r24
    3b38:	90 e0       	ldi	r25, 0x00	; 0
    3b3a:	88 0f       	add	r24, r24
    3b3c:	99 1f       	adc	r25, r25
    3b3e:	88 0f       	add	r24, r24
    3b40:	99 1f       	adc	r25, r25
    3b42:	88 0f       	add	r24, r24
    3b44:	99 1f       	adc	r25, r25
    3b46:	28 2b       	or	r18, r24
    3b48:	eb 81       	ldd	r30, Y+3	; 0x03
    3b4a:	fc 81       	ldd	r31, Y+4	; 0x04
    3b4c:	82 81       	ldd	r24, Z+2	; 0x02
    3b4e:	88 2f       	mov	r24, r24
    3b50:	90 e0       	ldi	r25, 0x00	; 0
    3b52:	83 70       	andi	r24, 0x03	; 3
    3b54:	90 70       	andi	r25, 0x00	; 0
    3b56:	88 0f       	add	r24, r24
    3b58:	99 1f       	adc	r25, r25
    3b5a:	82 2b       	or	r24, r18
    3b5c:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (u16)(((F_CPU / (config_type->baud_rate * 8UL))) - 1);
    3b5e:	eb 81       	ldd	r30, Y+3	; 0x03
    3b60:	fc 81       	ldd	r31, Y+4	; 0x04
    3b62:	83 81       	ldd	r24, Z+3	; 0x03
    3b64:	94 81       	ldd	r25, Z+4	; 0x04
    3b66:	a5 81       	ldd	r26, Z+5	; 0x05
    3b68:	b6 81       	ldd	r27, Z+6	; 0x06
    3b6a:	88 0f       	add	r24, r24
    3b6c:	99 1f       	adc	r25, r25
    3b6e:	aa 1f       	adc	r26, r26
    3b70:	bb 1f       	adc	r27, r27
    3b72:	88 0f       	add	r24, r24
    3b74:	99 1f       	adc	r25, r25
    3b76:	aa 1f       	adc	r26, r26
    3b78:	bb 1f       	adc	r27, r27
    3b7a:	88 0f       	add	r24, r24
    3b7c:	99 1f       	adc	r25, r25
    3b7e:	aa 1f       	adc	r26, r26
    3b80:	bb 1f       	adc	r27, r27
    3b82:	9c 01       	movw	r18, r24
    3b84:	ad 01       	movw	r20, r26
    3b86:	80 e0       	ldi	r24, 0x00	; 0
    3b88:	92 e1       	ldi	r25, 0x12	; 18
    3b8a:	aa e7       	ldi	r26, 0x7A	; 122
    3b8c:	b0 e0       	ldi	r27, 0x00	; 0
    3b8e:	bc 01       	movw	r22, r24
    3b90:	cd 01       	movw	r24, r26
    3b92:	0e 94 18 22 	call	0x4430	; 0x4430 <__udivmodsi4>
    3b96:	da 01       	movw	r26, r20
    3b98:	c9 01       	movw	r24, r18
    3b9a:	01 97       	sbiw	r24, 0x01	; 1
    3b9c:	9a 83       	std	Y+2, r25	; 0x02
    3b9e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Choose baud rate:
	 * First 8 bit of ubrr_value in UBRRL
	 * Last 4 bit of ubrr_value in UBRRH
	 */
	UBRRL = ubrr_value;
    3ba0:	e9 e2       	ldi	r30, 0x29	; 41
    3ba2:	f0 e0       	ldi	r31, 0x00	; 0
    3ba4:	89 81       	ldd	r24, Y+1	; 0x01
    3ba6:	80 83       	st	Z, r24
	UBRRH = (ubrr_value>>8);
    3ba8:	e0 e4       	ldi	r30, 0x40	; 64
    3baa:	f0 e0       	ldi	r31, 0x00	; 0
    3bac:	89 81       	ldd	r24, Y+1	; 0x01
    3bae:	9a 81       	ldd	r25, Y+2	; 0x02
    3bb0:	89 2f       	mov	r24, r25
    3bb2:	99 27       	eor	r25, r25
    3bb4:	80 83       	st	Z, r24
}
    3bb6:	0f 90       	pop	r0
    3bb8:	0f 90       	pop	r0
    3bba:	0f 90       	pop	r0
    3bbc:	0f 90       	pop	r0
    3bbe:	cf 91       	pop	r28
    3bc0:	df 91       	pop	r29
    3bc2:	08 95       	ret

00003bc4 <M_UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void M_UART_sendByte(const u8 byte){
    3bc4:	df 93       	push	r29
    3bc6:	cf 93       	push	r28
    3bc8:	0f 92       	push	r0
    3bca:	cd b7       	in	r28, 0x3d	; 61
    3bcc:	de b7       	in	r29, 0x3e	; 62
    3bce:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UCSRA_UDRE));
    3bd0:	eb e2       	ldi	r30, 0x2B	; 43
    3bd2:	f0 e0       	ldi	r31, 0x00	; 0
    3bd4:	80 81       	ld	r24, Z
    3bd6:	88 2f       	mov	r24, r24
    3bd8:	90 e0       	ldi	r25, 0x00	; 0
    3bda:	80 72       	andi	r24, 0x20	; 32
    3bdc:	90 70       	andi	r25, 0x00	; 0
    3bde:	00 97       	sbiw	r24, 0x00	; 0
    3be0:	b9 f3       	breq	.-18     	; 0x3bd0 <M_UART_sendByte+0xc>
	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = byte;
    3be2:	ec e2       	ldi	r30, 0x2C	; 44
    3be4:	f0 e0       	ldi	r31, 0x00	; 0
    3be6:	89 81       	ldd	r24, Y+1	; 0x01
    3be8:	80 83       	st	Z, r24
	/************************* Another Method *************************
	 * UDR = byte;
	 * while(BIT_IS_CLEAR(UCSRA,UCSRA_TXC)); // Wait until the transmission is complete TXC = 1
	 * SET_BIT(UCSRA,UCSRA_TXC)); // Clear the TXC flag
	 *******************************************************************/
}
    3bea:	0f 90       	pop	r0
    3bec:	cf 91       	pop	r28
    3bee:	df 91       	pop	r29
    3bf0:	08 95       	ret

00003bf2 <M_UART_receiveByte>:
/*
 * Description :
 * Functional responsible for receive byte to another UART device.
 */
u8 M_UART_receiveByte(void){
    3bf2:	df 93       	push	r29
    3bf4:	cf 93       	push	r28
    3bf6:	cd b7       	in	r28, 0x3d	; 61
    3bf8:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,UCSRA_RXC));
    3bfa:	eb e2       	ldi	r30, 0x2B	; 43
    3bfc:	f0 e0       	ldi	r31, 0x00	; 0
    3bfe:	80 81       	ld	r24, Z
    3c00:	88 23       	and	r24, r24
    3c02:	dc f7       	brge	.-10     	; 0x3bfa <M_UART_receiveByte+0x8>
	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
	return UDR;
    3c04:	ec e2       	ldi	r30, 0x2C	; 44
    3c06:	f0 e0       	ldi	r31, 0x00	; 0
    3c08:	80 81       	ld	r24, Z
}
    3c0a:	cf 91       	pop	r28
    3c0c:	df 91       	pop	r29
    3c0e:	08 95       	ret

00003c10 <M_UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void M_UART_sendString(const u8 *str){
    3c10:	df 93       	push	r29
    3c12:	cf 93       	push	r28
    3c14:	00 d0       	rcall	.+0      	; 0x3c16 <M_UART_sendString+0x6>
    3c16:	cd b7       	in	r28, 0x3d	; 61
    3c18:	de b7       	in	r29, 0x3e	; 62
    3c1a:	9a 83       	std	Y+2, r25	; 0x02
    3c1c:	89 83       	std	Y+1, r24	; 0x01
    3c1e:	0a c0       	rjmp	.+20     	; 0x3c34 <M_UART_sendString+0x24>
	while(*str != '\0')
	{
		M_UART_sendByte(*str);
    3c20:	e9 81       	ldd	r30, Y+1	; 0x01
    3c22:	fa 81       	ldd	r31, Y+2	; 0x02
    3c24:	80 81       	ld	r24, Z
    3c26:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <M_UART_sendByte>
		str++;
    3c2a:	89 81       	ldd	r24, Y+1	; 0x01
    3c2c:	9a 81       	ldd	r25, Y+2	; 0x02
    3c2e:	01 96       	adiw	r24, 0x01	; 1
    3c30:	9a 83       	std	Y+2, r25	; 0x02
    3c32:	89 83       	std	Y+1, r24	; 0x01
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void M_UART_sendString(const u8 *str){
	while(*str != '\0')
    3c34:	e9 81       	ldd	r30, Y+1	; 0x01
    3c36:	fa 81       	ldd	r31, Y+2	; 0x02
    3c38:	80 81       	ld	r24, Z
    3c3a:	88 23       	and	r24, r24
    3c3c:	89 f7       	brne	.-30     	; 0x3c20 <M_UART_sendString+0x10>
	{
		M_UART_sendByte(*str);
		str++;
	}
}
    3c3e:	0f 90       	pop	r0
    3c40:	0f 90       	pop	r0
    3c42:	cf 91       	pop	r28
    3c44:	df 91       	pop	r29
    3c46:	08 95       	ret

00003c48 <M_UART_receiveString>:
/*
 * Description:
 *
 */
void M_UART_receiveString(u8 *str){
    3c48:	0f 93       	push	r16
    3c4a:	1f 93       	push	r17
    3c4c:	df 93       	push	r29
    3c4e:	cf 93       	push	r28
    3c50:	00 d0       	rcall	.+0      	; 0x3c52 <M_UART_receiveString+0xa>
    3c52:	0f 92       	push	r0
    3c54:	cd b7       	in	r28, 0x3d	; 61
    3c56:	de b7       	in	r29, 0x3e	; 62
    3c58:	9b 83       	std	Y+3, r25	; 0x03
    3c5a:	8a 83       	std	Y+2, r24	; 0x02
	s8 i = -1 ;
    3c5c:	8f ef       	ldi	r24, 0xFF	; 255
    3c5e:	89 83       	std	Y+1, r24	; 0x01
	/* Receive the whole string until the '#' */
	do{
		i++;
    3c60:	89 81       	ldd	r24, Y+1	; 0x01
    3c62:	8f 5f       	subi	r24, 0xFF	; 255
    3c64:	89 83       	std	Y+1, r24	; 0x01
		str[i] = M_UART_receiveByte();
    3c66:	89 81       	ldd	r24, Y+1	; 0x01
    3c68:	28 2f       	mov	r18, r24
    3c6a:	33 27       	eor	r19, r19
    3c6c:	27 fd       	sbrc	r18, 7
    3c6e:	30 95       	com	r19
    3c70:	8a 81       	ldd	r24, Y+2	; 0x02
    3c72:	9b 81       	ldd	r25, Y+3	; 0x03
    3c74:	8c 01       	movw	r16, r24
    3c76:	02 0f       	add	r16, r18
    3c78:	13 1f       	adc	r17, r19
    3c7a:	0e 94 f9 1d 	call	0x3bf2	; 0x3bf2 <M_UART_receiveByte>
    3c7e:	f8 01       	movw	r30, r16
    3c80:	80 83       	st	Z, r24
	}while(str[i] != '#');
    3c82:	89 81       	ldd	r24, Y+1	; 0x01
    3c84:	28 2f       	mov	r18, r24
    3c86:	33 27       	eor	r19, r19
    3c88:	27 fd       	sbrc	r18, 7
    3c8a:	30 95       	com	r19
    3c8c:	8a 81       	ldd	r24, Y+2	; 0x02
    3c8e:	9b 81       	ldd	r25, Y+3	; 0x03
    3c90:	fc 01       	movw	r30, r24
    3c92:	e2 0f       	add	r30, r18
    3c94:	f3 1f       	adc	r31, r19
    3c96:	80 81       	ld	r24, Z
    3c98:	83 32       	cpi	r24, 0x23	; 35
    3c9a:	11 f7       	brne	.-60     	; 0x3c60 <M_UART_receiveString+0x18>
	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	str[i] = '\0';
    3c9c:	89 81       	ldd	r24, Y+1	; 0x01
    3c9e:	28 2f       	mov	r18, r24
    3ca0:	33 27       	eor	r19, r19
    3ca2:	27 fd       	sbrc	r18, 7
    3ca4:	30 95       	com	r19
    3ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ca8:	9b 81       	ldd	r25, Y+3	; 0x03
    3caa:	fc 01       	movw	r30, r24
    3cac:	e2 0f       	add	r30, r18
    3cae:	f3 1f       	adc	r31, r19
    3cb0:	10 82       	st	Z, r1
}
    3cb2:	0f 90       	pop	r0
    3cb4:	0f 90       	pop	r0
    3cb6:	0f 90       	pop	r0
    3cb8:	cf 91       	pop	r28
    3cba:	df 91       	pop	r29
    3cbc:	1f 91       	pop	r17
    3cbe:	0f 91       	pop	r16
    3cc0:	08 95       	ret

00003cc2 <M_UART_u8RxcFlagState>:
u8 M_UART_u8RxcFlagState(void){
    3cc2:	df 93       	push	r29
    3cc4:	cf 93       	push	r28
    3cc6:	cd b7       	in	r28, 0x3d	; 61
    3cc8:	de b7       	in	r29, 0x3e	; 62
	return GET_BIT(UCSRA,UCSRA_RXC);
    3cca:	eb e2       	ldi	r30, 0x2B	; 43
    3ccc:	f0 e0       	ldi	r31, 0x00	; 0
    3cce:	80 81       	ld	r24, Z
    3cd0:	88 1f       	adc	r24, r24
    3cd2:	88 27       	eor	r24, r24
    3cd4:	88 1f       	adc	r24, r24
}
    3cd6:	cf 91       	pop	r28
    3cd8:	df 91       	pop	r29
    3cda:	08 95       	ret

00003cdc <MUART_u8ReturnValReceived>:
u8 MUART_u8ReturnValReceived(void){
    3cdc:	df 93       	push	r29
    3cde:	cf 93       	push	r28
    3ce0:	cd b7       	in	r28, 0x3d	; 61
    3ce2:	de b7       	in	r29, 0x3e	; 62
	return UDR;
    3ce4:	ec e2       	ldi	r30, 0x2C	; 44
    3ce6:	f0 e0       	ldi	r31, 0x00	; 0
    3ce8:	80 81       	ld	r24, Z
}
    3cea:	cf 91       	pop	r28
    3cec:	df 91       	pop	r29
    3cee:	08 95       	ret

00003cf0 <Port_voidInit>:
#include "mdio_interface.h"
#include "mdio_private.h"
#include "mdio_config.h"
#include "mdio_registers.h"

void Port_voidInit(void){
    3cf0:	df 93       	push	r29
    3cf2:	cf 93       	push	r28
    3cf4:	cd b7       	in	r28, 0x3d	; 61
    3cf6:	de b7       	in	r29, 0x3e	; 62

	DDRA = PORTA_DIR;
    3cf8:	ea e3       	ldi	r30, 0x3A	; 58
    3cfa:	f0 e0       	ldi	r31, 0x00	; 0
    3cfc:	80 ef       	ldi	r24, 0xF0	; 240
    3cfe:	80 83       	st	Z, r24
	DDRB = PORTB_DIR;
    3d00:	e7 e3       	ldi	r30, 0x37	; 55
    3d02:	f0 e0       	ldi	r31, 0x00	; 0
    3d04:	80 eb       	ldi	r24, 0xB0	; 176
    3d06:	80 83       	st	Z, r24
	DDRC = PORTC_DIR;
    3d08:	e4 e3       	ldi	r30, 0x34	; 52
    3d0a:	f0 e0       	ldi	r31, 0x00	; 0
    3d0c:	8c ef       	ldi	r24, 0xFC	; 252
    3d0e:	80 83       	st	Z, r24
	DDRD = PORTD_DIR;
    3d10:	e1 e3       	ldi	r30, 0x31	; 49
    3d12:	f0 e0       	ldi	r31, 0x00	; 0
    3d14:	82 e0       	ldi	r24, 0x02	; 2
    3d16:	80 83       	st	Z, r24

	PORTA = PORTA_VALUE;
    3d18:	eb e3       	ldi	r30, 0x3B	; 59
    3d1a:	f0 e0       	ldi	r31, 0x00	; 0
    3d1c:	80 ef       	ldi	r24, 0xF0	; 240
    3d1e:	80 83       	st	Z, r24
	PORTB = PORTB_VALUE;
    3d20:	e8 e3       	ldi	r30, 0x38	; 56
    3d22:	f0 e0       	ldi	r31, 0x00	; 0
    3d24:	10 82       	st	Z, r1
	PORTC = PORTC_VALUE;
    3d26:	e5 e3       	ldi	r30, 0x35	; 53
    3d28:	f0 e0       	ldi	r31, 0x00	; 0
    3d2a:	10 82       	st	Z, r1
	PORTD = PORTD_VALUE;
    3d2c:	e2 e3       	ldi	r30, 0x32	; 50
    3d2e:	f0 e0       	ldi	r31, 0x00	; 0
    3d30:	80 ef       	ldi	r24, 0xF0	; 240
    3d32:	80 83       	st	Z, r24
}
    3d34:	cf 91       	pop	r28
    3d36:	df 91       	pop	r29
    3d38:	08 95       	ret

00003d3a <MDIO_voidSetPinDirection>:


void MDIO_voidSetPinDirection(u8 Copy_u8port,u8 Copy_u8pin,u8 Copy_u8Mode){
    3d3a:	df 93       	push	r29
    3d3c:	cf 93       	push	r28
    3d3e:	cd b7       	in	r28, 0x3d	; 61
    3d40:	de b7       	in	r29, 0x3e	; 62
    3d42:	27 97       	sbiw	r28, 0x07	; 7
    3d44:	0f b6       	in	r0, 0x3f	; 63
    3d46:	f8 94       	cli
    3d48:	de bf       	out	0x3e, r29	; 62
    3d4a:	0f be       	out	0x3f, r0	; 63
    3d4c:	cd bf       	out	0x3d, r28	; 61
    3d4e:	89 83       	std	Y+1, r24	; 0x01
    3d50:	6a 83       	std	Y+2, r22	; 0x02
    3d52:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_u8Mode == DIO_OUTPUT)
    3d54:	8b 81       	ldd	r24, Y+3	; 0x03
    3d56:	81 30       	cpi	r24, 0x01	; 1
    3d58:	09 f0       	breq	.+2      	; 0x3d5c <MDIO_voidSetPinDirection+0x22>
    3d5a:	70 c0       	rjmp	.+224    	; 0x3e3c <MDIO_voidSetPinDirection+0x102>
	{
		switch(Copy_u8port)
    3d5c:	89 81       	ldd	r24, Y+1	; 0x01
    3d5e:	28 2f       	mov	r18, r24
    3d60:	30 e0       	ldi	r19, 0x00	; 0
    3d62:	3f 83       	std	Y+7, r19	; 0x07
    3d64:	2e 83       	std	Y+6, r18	; 0x06
    3d66:	8e 81       	ldd	r24, Y+6	; 0x06
    3d68:	9f 81       	ldd	r25, Y+7	; 0x07
    3d6a:	82 30       	cpi	r24, 0x02	; 2
    3d6c:	91 05       	cpc	r25, r1
    3d6e:	51 f1       	breq	.+84     	; 0x3dc4 <MDIO_voidSetPinDirection+0x8a>
    3d70:	2e 81       	ldd	r18, Y+6	; 0x06
    3d72:	3f 81       	ldd	r19, Y+7	; 0x07
    3d74:	23 30       	cpi	r18, 0x03	; 3
    3d76:	31 05       	cpc	r19, r1
    3d78:	34 f4       	brge	.+12     	; 0x3d86 <MDIO_voidSetPinDirection+0x4c>
    3d7a:	8e 81       	ldd	r24, Y+6	; 0x06
    3d7c:	9f 81       	ldd	r25, Y+7	; 0x07
    3d7e:	81 30       	cpi	r24, 0x01	; 1
    3d80:	91 05       	cpc	r25, r1
    3d82:	61 f0       	breq	.+24     	; 0x3d9c <MDIO_voidSetPinDirection+0x62>
    3d84:	d3 c0       	rjmp	.+422    	; 0x3f2c <MDIO_voidSetPinDirection+0x1f2>
    3d86:	2e 81       	ldd	r18, Y+6	; 0x06
    3d88:	3f 81       	ldd	r19, Y+7	; 0x07
    3d8a:	23 30       	cpi	r18, 0x03	; 3
    3d8c:	31 05       	cpc	r19, r1
    3d8e:	71 f1       	breq	.+92     	; 0x3dec <MDIO_voidSetPinDirection+0xb2>
    3d90:	8e 81       	ldd	r24, Y+6	; 0x06
    3d92:	9f 81       	ldd	r25, Y+7	; 0x07
    3d94:	84 30       	cpi	r24, 0x04	; 4
    3d96:	91 05       	cpc	r25, r1
    3d98:	e9 f1       	breq	.+122    	; 0x3e14 <MDIO_voidSetPinDirection+0xda>
    3d9a:	c8 c0       	rjmp	.+400    	; 0x3f2c <MDIO_voidSetPinDirection+0x1f2>
		{
		case DIO_PORTA: SET_BIT(DDRA,Copy_u8pin); break;
    3d9c:	aa e3       	ldi	r26, 0x3A	; 58
    3d9e:	b0 e0       	ldi	r27, 0x00	; 0
    3da0:	ea e3       	ldi	r30, 0x3A	; 58
    3da2:	f0 e0       	ldi	r31, 0x00	; 0
    3da4:	80 81       	ld	r24, Z
    3da6:	48 2f       	mov	r20, r24
    3da8:	8a 81       	ldd	r24, Y+2	; 0x02
    3daa:	28 2f       	mov	r18, r24
    3dac:	30 e0       	ldi	r19, 0x00	; 0
    3dae:	81 e0       	ldi	r24, 0x01	; 1
    3db0:	90 e0       	ldi	r25, 0x00	; 0
    3db2:	02 2e       	mov	r0, r18
    3db4:	02 c0       	rjmp	.+4      	; 0x3dba <MDIO_voidSetPinDirection+0x80>
    3db6:	88 0f       	add	r24, r24
    3db8:	99 1f       	adc	r25, r25
    3dba:	0a 94       	dec	r0
    3dbc:	e2 f7       	brpl	.-8      	; 0x3db6 <MDIO_voidSetPinDirection+0x7c>
    3dbe:	84 2b       	or	r24, r20
    3dc0:	8c 93       	st	X, r24
    3dc2:	b4 c0       	rjmp	.+360    	; 0x3f2c <MDIO_voidSetPinDirection+0x1f2>
		case DIO_PORTB: SET_BIT(DDRB,Copy_u8pin); break;
    3dc4:	a7 e3       	ldi	r26, 0x37	; 55
    3dc6:	b0 e0       	ldi	r27, 0x00	; 0
    3dc8:	e7 e3       	ldi	r30, 0x37	; 55
    3dca:	f0 e0       	ldi	r31, 0x00	; 0
    3dcc:	80 81       	ld	r24, Z
    3dce:	48 2f       	mov	r20, r24
    3dd0:	8a 81       	ldd	r24, Y+2	; 0x02
    3dd2:	28 2f       	mov	r18, r24
    3dd4:	30 e0       	ldi	r19, 0x00	; 0
    3dd6:	81 e0       	ldi	r24, 0x01	; 1
    3dd8:	90 e0       	ldi	r25, 0x00	; 0
    3dda:	02 2e       	mov	r0, r18
    3ddc:	02 c0       	rjmp	.+4      	; 0x3de2 <MDIO_voidSetPinDirection+0xa8>
    3dde:	88 0f       	add	r24, r24
    3de0:	99 1f       	adc	r25, r25
    3de2:	0a 94       	dec	r0
    3de4:	e2 f7       	brpl	.-8      	; 0x3dde <MDIO_voidSetPinDirection+0xa4>
    3de6:	84 2b       	or	r24, r20
    3de8:	8c 93       	st	X, r24
    3dea:	a0 c0       	rjmp	.+320    	; 0x3f2c <MDIO_voidSetPinDirection+0x1f2>
		case DIO_PORTC: SET_BIT(DDRC,Copy_u8pin); break;
    3dec:	a4 e3       	ldi	r26, 0x34	; 52
    3dee:	b0 e0       	ldi	r27, 0x00	; 0
    3df0:	e4 e3       	ldi	r30, 0x34	; 52
    3df2:	f0 e0       	ldi	r31, 0x00	; 0
    3df4:	80 81       	ld	r24, Z
    3df6:	48 2f       	mov	r20, r24
    3df8:	8a 81       	ldd	r24, Y+2	; 0x02
    3dfa:	28 2f       	mov	r18, r24
    3dfc:	30 e0       	ldi	r19, 0x00	; 0
    3dfe:	81 e0       	ldi	r24, 0x01	; 1
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	02 2e       	mov	r0, r18
    3e04:	02 c0       	rjmp	.+4      	; 0x3e0a <MDIO_voidSetPinDirection+0xd0>
    3e06:	88 0f       	add	r24, r24
    3e08:	99 1f       	adc	r25, r25
    3e0a:	0a 94       	dec	r0
    3e0c:	e2 f7       	brpl	.-8      	; 0x3e06 <MDIO_voidSetPinDirection+0xcc>
    3e0e:	84 2b       	or	r24, r20
    3e10:	8c 93       	st	X, r24
    3e12:	8c c0       	rjmp	.+280    	; 0x3f2c <MDIO_voidSetPinDirection+0x1f2>
		case DIO_PORTD: SET_BIT(DDRD,Copy_u8pin); break;
    3e14:	a1 e3       	ldi	r26, 0x31	; 49
    3e16:	b0 e0       	ldi	r27, 0x00	; 0
    3e18:	e1 e3       	ldi	r30, 0x31	; 49
    3e1a:	f0 e0       	ldi	r31, 0x00	; 0
    3e1c:	80 81       	ld	r24, Z
    3e1e:	48 2f       	mov	r20, r24
    3e20:	8a 81       	ldd	r24, Y+2	; 0x02
    3e22:	28 2f       	mov	r18, r24
    3e24:	30 e0       	ldi	r19, 0x00	; 0
    3e26:	81 e0       	ldi	r24, 0x01	; 1
    3e28:	90 e0       	ldi	r25, 0x00	; 0
    3e2a:	02 2e       	mov	r0, r18
    3e2c:	02 c0       	rjmp	.+4      	; 0x3e32 <MDIO_voidSetPinDirection+0xf8>
    3e2e:	88 0f       	add	r24, r24
    3e30:	99 1f       	adc	r25, r25
    3e32:	0a 94       	dec	r0
    3e34:	e2 f7       	brpl	.-8      	; 0x3e2e <MDIO_voidSetPinDirection+0xf4>
    3e36:	84 2b       	or	r24, r20
    3e38:	8c 93       	st	X, r24
    3e3a:	78 c0       	rjmp	.+240    	; 0x3f2c <MDIO_voidSetPinDirection+0x1f2>
		default: break;
		}
	}
	else if(Copy_u8Mode == DIO_INPUT)
    3e3c:	8b 81       	ldd	r24, Y+3	; 0x03
    3e3e:	88 23       	and	r24, r24
    3e40:	09 f0       	breq	.+2      	; 0x3e44 <MDIO_voidSetPinDirection+0x10a>
    3e42:	74 c0       	rjmp	.+232    	; 0x3f2c <MDIO_voidSetPinDirection+0x1f2>
	{
		switch(Copy_u8port)
    3e44:	89 81       	ldd	r24, Y+1	; 0x01
    3e46:	28 2f       	mov	r18, r24
    3e48:	30 e0       	ldi	r19, 0x00	; 0
    3e4a:	3d 83       	std	Y+5, r19	; 0x05
    3e4c:	2c 83       	std	Y+4, r18	; 0x04
    3e4e:	8c 81       	ldd	r24, Y+4	; 0x04
    3e50:	9d 81       	ldd	r25, Y+5	; 0x05
    3e52:	82 30       	cpi	r24, 0x02	; 2
    3e54:	91 05       	cpc	r25, r1
    3e56:	61 f1       	breq	.+88     	; 0x3eb0 <MDIO_voidSetPinDirection+0x176>
    3e58:	2c 81       	ldd	r18, Y+4	; 0x04
    3e5a:	3d 81       	ldd	r19, Y+5	; 0x05
    3e5c:	23 30       	cpi	r18, 0x03	; 3
    3e5e:	31 05       	cpc	r19, r1
    3e60:	34 f4       	brge	.+12     	; 0x3e6e <MDIO_voidSetPinDirection+0x134>
    3e62:	8c 81       	ldd	r24, Y+4	; 0x04
    3e64:	9d 81       	ldd	r25, Y+5	; 0x05
    3e66:	81 30       	cpi	r24, 0x01	; 1
    3e68:	91 05       	cpc	r25, r1
    3e6a:	69 f0       	breq	.+26     	; 0x3e86 <MDIO_voidSetPinDirection+0x14c>
    3e6c:	5f c0       	rjmp	.+190    	; 0x3f2c <MDIO_voidSetPinDirection+0x1f2>
    3e6e:	2c 81       	ldd	r18, Y+4	; 0x04
    3e70:	3d 81       	ldd	r19, Y+5	; 0x05
    3e72:	23 30       	cpi	r18, 0x03	; 3
    3e74:	31 05       	cpc	r19, r1
    3e76:	89 f1       	breq	.+98     	; 0x3eda <MDIO_voidSetPinDirection+0x1a0>
    3e78:	8c 81       	ldd	r24, Y+4	; 0x04
    3e7a:	9d 81       	ldd	r25, Y+5	; 0x05
    3e7c:	84 30       	cpi	r24, 0x04	; 4
    3e7e:	91 05       	cpc	r25, r1
    3e80:	09 f4       	brne	.+2      	; 0x3e84 <MDIO_voidSetPinDirection+0x14a>
    3e82:	40 c0       	rjmp	.+128    	; 0x3f04 <MDIO_voidSetPinDirection+0x1ca>
    3e84:	53 c0       	rjmp	.+166    	; 0x3f2c <MDIO_voidSetPinDirection+0x1f2>
		{
		case DIO_PORTA: CLEAR_BIT(DDRA,Copy_u8pin); break;
    3e86:	aa e3       	ldi	r26, 0x3A	; 58
    3e88:	b0 e0       	ldi	r27, 0x00	; 0
    3e8a:	ea e3       	ldi	r30, 0x3A	; 58
    3e8c:	f0 e0       	ldi	r31, 0x00	; 0
    3e8e:	80 81       	ld	r24, Z
    3e90:	48 2f       	mov	r20, r24
    3e92:	8a 81       	ldd	r24, Y+2	; 0x02
    3e94:	28 2f       	mov	r18, r24
    3e96:	30 e0       	ldi	r19, 0x00	; 0
    3e98:	81 e0       	ldi	r24, 0x01	; 1
    3e9a:	90 e0       	ldi	r25, 0x00	; 0
    3e9c:	02 2e       	mov	r0, r18
    3e9e:	02 c0       	rjmp	.+4      	; 0x3ea4 <MDIO_voidSetPinDirection+0x16a>
    3ea0:	88 0f       	add	r24, r24
    3ea2:	99 1f       	adc	r25, r25
    3ea4:	0a 94       	dec	r0
    3ea6:	e2 f7       	brpl	.-8      	; 0x3ea0 <MDIO_voidSetPinDirection+0x166>
    3ea8:	80 95       	com	r24
    3eaa:	84 23       	and	r24, r20
    3eac:	8c 93       	st	X, r24
    3eae:	3e c0       	rjmp	.+124    	; 0x3f2c <MDIO_voidSetPinDirection+0x1f2>
		case DIO_PORTB: CLEAR_BIT(DDRB,Copy_u8pin); break;
    3eb0:	a7 e3       	ldi	r26, 0x37	; 55
    3eb2:	b0 e0       	ldi	r27, 0x00	; 0
    3eb4:	e7 e3       	ldi	r30, 0x37	; 55
    3eb6:	f0 e0       	ldi	r31, 0x00	; 0
    3eb8:	80 81       	ld	r24, Z
    3eba:	48 2f       	mov	r20, r24
    3ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    3ebe:	28 2f       	mov	r18, r24
    3ec0:	30 e0       	ldi	r19, 0x00	; 0
    3ec2:	81 e0       	ldi	r24, 0x01	; 1
    3ec4:	90 e0       	ldi	r25, 0x00	; 0
    3ec6:	02 2e       	mov	r0, r18
    3ec8:	02 c0       	rjmp	.+4      	; 0x3ece <MDIO_voidSetPinDirection+0x194>
    3eca:	88 0f       	add	r24, r24
    3ecc:	99 1f       	adc	r25, r25
    3ece:	0a 94       	dec	r0
    3ed0:	e2 f7       	brpl	.-8      	; 0x3eca <MDIO_voidSetPinDirection+0x190>
    3ed2:	80 95       	com	r24
    3ed4:	84 23       	and	r24, r20
    3ed6:	8c 93       	st	X, r24
    3ed8:	29 c0       	rjmp	.+82     	; 0x3f2c <MDIO_voidSetPinDirection+0x1f2>
		case DIO_PORTC: CLEAR_BIT(DDRC,Copy_u8pin); break;
    3eda:	a4 e3       	ldi	r26, 0x34	; 52
    3edc:	b0 e0       	ldi	r27, 0x00	; 0
    3ede:	e4 e3       	ldi	r30, 0x34	; 52
    3ee0:	f0 e0       	ldi	r31, 0x00	; 0
    3ee2:	80 81       	ld	r24, Z
    3ee4:	48 2f       	mov	r20, r24
    3ee6:	8a 81       	ldd	r24, Y+2	; 0x02
    3ee8:	28 2f       	mov	r18, r24
    3eea:	30 e0       	ldi	r19, 0x00	; 0
    3eec:	81 e0       	ldi	r24, 0x01	; 1
    3eee:	90 e0       	ldi	r25, 0x00	; 0
    3ef0:	02 2e       	mov	r0, r18
    3ef2:	02 c0       	rjmp	.+4      	; 0x3ef8 <MDIO_voidSetPinDirection+0x1be>
    3ef4:	88 0f       	add	r24, r24
    3ef6:	99 1f       	adc	r25, r25
    3ef8:	0a 94       	dec	r0
    3efa:	e2 f7       	brpl	.-8      	; 0x3ef4 <MDIO_voidSetPinDirection+0x1ba>
    3efc:	80 95       	com	r24
    3efe:	84 23       	and	r24, r20
    3f00:	8c 93       	st	X, r24
    3f02:	14 c0       	rjmp	.+40     	; 0x3f2c <MDIO_voidSetPinDirection+0x1f2>
		case DIO_PORTD: CLEAR_BIT(DDRD,Copy_u8pin); break;
    3f04:	a1 e3       	ldi	r26, 0x31	; 49
    3f06:	b0 e0       	ldi	r27, 0x00	; 0
    3f08:	e1 e3       	ldi	r30, 0x31	; 49
    3f0a:	f0 e0       	ldi	r31, 0x00	; 0
    3f0c:	80 81       	ld	r24, Z
    3f0e:	48 2f       	mov	r20, r24
    3f10:	8a 81       	ldd	r24, Y+2	; 0x02
    3f12:	28 2f       	mov	r18, r24
    3f14:	30 e0       	ldi	r19, 0x00	; 0
    3f16:	81 e0       	ldi	r24, 0x01	; 1
    3f18:	90 e0       	ldi	r25, 0x00	; 0
    3f1a:	02 2e       	mov	r0, r18
    3f1c:	02 c0       	rjmp	.+4      	; 0x3f22 <MDIO_voidSetPinDirection+0x1e8>
    3f1e:	88 0f       	add	r24, r24
    3f20:	99 1f       	adc	r25, r25
    3f22:	0a 94       	dec	r0
    3f24:	e2 f7       	brpl	.-8      	; 0x3f1e <MDIO_voidSetPinDirection+0x1e4>
    3f26:	80 95       	com	r24
    3f28:	84 23       	and	r24, r20
    3f2a:	8c 93       	st	X, r24
		default: break;
		}
	}

}
    3f2c:	27 96       	adiw	r28, 0x07	; 7
    3f2e:	0f b6       	in	r0, 0x3f	; 63
    3f30:	f8 94       	cli
    3f32:	de bf       	out	0x3e, r29	; 62
    3f34:	0f be       	out	0x3f, r0	; 63
    3f36:	cd bf       	out	0x3d, r28	; 61
    3f38:	cf 91       	pop	r28
    3f3a:	df 91       	pop	r29
    3f3c:	08 95       	ret

00003f3e <MDIO_errorStateSetPinValue>:
Error_State_t MDIO_errorStateSetPinValue(u8 Copy_u8port,u8 Copy_u8pin,u8 Copy_u8Mode){
    3f3e:	df 93       	push	r29
    3f40:	cf 93       	push	r28
    3f42:	cd b7       	in	r28, 0x3d	; 61
    3f44:	de b7       	in	r29, 0x3e	; 62
    3f46:	28 97       	sbiw	r28, 0x08	; 8
    3f48:	0f b6       	in	r0, 0x3f	; 63
    3f4a:	f8 94       	cli
    3f4c:	de bf       	out	0x3e, r29	; 62
    3f4e:	0f be       	out	0x3f, r0	; 63
    3f50:	cd bf       	out	0x3d, r28	; 61
    3f52:	8a 83       	std	Y+2, r24	; 0x02
    3f54:	6b 83       	std	Y+3, r22	; 0x03
    3f56:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t Error_state = Return_Ok;
    3f58:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin > MAX_PINS ){
    3f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f5c:	88 30       	cpi	r24, 0x08	; 8
    3f5e:	18 f0       	brcs	.+6      	; 0x3f66 <MDIO_errorStateSetPinValue+0x28>
		Error_state = Return_Nok;
    3f60:	81 e0       	ldi	r24, 0x01	; 1
    3f62:	89 83       	std	Y+1, r24	; 0x01
    3f64:	f2 c0       	rjmp	.+484    	; 0x414a <MDIO_errorStateSetPinValue+0x20c>
	}
	else{
		if(Copy_u8Mode == DIO_HIGH)
    3f66:	8c 81       	ldd	r24, Y+4	; 0x04
    3f68:	81 30       	cpi	r24, 0x01	; 1
    3f6a:	09 f0       	breq	.+2      	; 0x3f6e <MDIO_errorStateSetPinValue+0x30>
    3f6c:	73 c0       	rjmp	.+230    	; 0x4054 <MDIO_errorStateSetPinValue+0x116>
		{
			switch(Copy_u8port)
    3f6e:	8a 81       	ldd	r24, Y+2	; 0x02
    3f70:	28 2f       	mov	r18, r24
    3f72:	30 e0       	ldi	r19, 0x00	; 0
    3f74:	38 87       	std	Y+8, r19	; 0x08
    3f76:	2f 83       	std	Y+7, r18	; 0x07
    3f78:	8f 81       	ldd	r24, Y+7	; 0x07
    3f7a:	98 85       	ldd	r25, Y+8	; 0x08
    3f7c:	82 30       	cpi	r24, 0x02	; 2
    3f7e:	91 05       	cpc	r25, r1
    3f80:	51 f1       	breq	.+84     	; 0x3fd6 <MDIO_errorStateSetPinValue+0x98>
    3f82:	2f 81       	ldd	r18, Y+7	; 0x07
    3f84:	38 85       	ldd	r19, Y+8	; 0x08
    3f86:	23 30       	cpi	r18, 0x03	; 3
    3f88:	31 05       	cpc	r19, r1
    3f8a:	34 f4       	brge	.+12     	; 0x3f98 <MDIO_errorStateSetPinValue+0x5a>
    3f8c:	8f 81       	ldd	r24, Y+7	; 0x07
    3f8e:	98 85       	ldd	r25, Y+8	; 0x08
    3f90:	81 30       	cpi	r24, 0x01	; 1
    3f92:	91 05       	cpc	r25, r1
    3f94:	61 f0       	breq	.+24     	; 0x3fae <MDIO_errorStateSetPinValue+0x70>
    3f96:	5b c0       	rjmp	.+182    	; 0x404e <MDIO_errorStateSetPinValue+0x110>
    3f98:	2f 81       	ldd	r18, Y+7	; 0x07
    3f9a:	38 85       	ldd	r19, Y+8	; 0x08
    3f9c:	23 30       	cpi	r18, 0x03	; 3
    3f9e:	31 05       	cpc	r19, r1
    3fa0:	71 f1       	breq	.+92     	; 0x3ffe <MDIO_errorStateSetPinValue+0xc0>
    3fa2:	8f 81       	ldd	r24, Y+7	; 0x07
    3fa4:	98 85       	ldd	r25, Y+8	; 0x08
    3fa6:	84 30       	cpi	r24, 0x04	; 4
    3fa8:	91 05       	cpc	r25, r1
    3faa:	e9 f1       	breq	.+122    	; 0x4026 <MDIO_errorStateSetPinValue+0xe8>
    3fac:	50 c0       	rjmp	.+160    	; 0x404e <MDIO_errorStateSetPinValue+0x110>
			{
			case DIO_PORTA: SET_BIT(PORTA,Copy_u8pin); break;
    3fae:	ab e3       	ldi	r26, 0x3B	; 59
    3fb0:	b0 e0       	ldi	r27, 0x00	; 0
    3fb2:	eb e3       	ldi	r30, 0x3B	; 59
    3fb4:	f0 e0       	ldi	r31, 0x00	; 0
    3fb6:	80 81       	ld	r24, Z
    3fb8:	48 2f       	mov	r20, r24
    3fba:	8b 81       	ldd	r24, Y+3	; 0x03
    3fbc:	28 2f       	mov	r18, r24
    3fbe:	30 e0       	ldi	r19, 0x00	; 0
    3fc0:	81 e0       	ldi	r24, 0x01	; 1
    3fc2:	90 e0       	ldi	r25, 0x00	; 0
    3fc4:	02 2e       	mov	r0, r18
    3fc6:	02 c0       	rjmp	.+4      	; 0x3fcc <MDIO_errorStateSetPinValue+0x8e>
    3fc8:	88 0f       	add	r24, r24
    3fca:	99 1f       	adc	r25, r25
    3fcc:	0a 94       	dec	r0
    3fce:	e2 f7       	brpl	.-8      	; 0x3fc8 <MDIO_errorStateSetPinValue+0x8a>
    3fd0:	84 2b       	or	r24, r20
    3fd2:	8c 93       	st	X, r24
    3fd4:	ba c0       	rjmp	.+372    	; 0x414a <MDIO_errorStateSetPinValue+0x20c>
			case DIO_PORTB: SET_BIT(PORTB,Copy_u8pin); break;
    3fd6:	a8 e3       	ldi	r26, 0x38	; 56
    3fd8:	b0 e0       	ldi	r27, 0x00	; 0
    3fda:	e8 e3       	ldi	r30, 0x38	; 56
    3fdc:	f0 e0       	ldi	r31, 0x00	; 0
    3fde:	80 81       	ld	r24, Z
    3fe0:	48 2f       	mov	r20, r24
    3fe2:	8b 81       	ldd	r24, Y+3	; 0x03
    3fe4:	28 2f       	mov	r18, r24
    3fe6:	30 e0       	ldi	r19, 0x00	; 0
    3fe8:	81 e0       	ldi	r24, 0x01	; 1
    3fea:	90 e0       	ldi	r25, 0x00	; 0
    3fec:	02 2e       	mov	r0, r18
    3fee:	02 c0       	rjmp	.+4      	; 0x3ff4 <MDIO_errorStateSetPinValue+0xb6>
    3ff0:	88 0f       	add	r24, r24
    3ff2:	99 1f       	adc	r25, r25
    3ff4:	0a 94       	dec	r0
    3ff6:	e2 f7       	brpl	.-8      	; 0x3ff0 <MDIO_errorStateSetPinValue+0xb2>
    3ff8:	84 2b       	or	r24, r20
    3ffa:	8c 93       	st	X, r24
    3ffc:	a6 c0       	rjmp	.+332    	; 0x414a <MDIO_errorStateSetPinValue+0x20c>
			case DIO_PORTC: SET_BIT(PORTC,Copy_u8pin); break;
    3ffe:	a5 e3       	ldi	r26, 0x35	; 53
    4000:	b0 e0       	ldi	r27, 0x00	; 0
    4002:	e5 e3       	ldi	r30, 0x35	; 53
    4004:	f0 e0       	ldi	r31, 0x00	; 0
    4006:	80 81       	ld	r24, Z
    4008:	48 2f       	mov	r20, r24
    400a:	8b 81       	ldd	r24, Y+3	; 0x03
    400c:	28 2f       	mov	r18, r24
    400e:	30 e0       	ldi	r19, 0x00	; 0
    4010:	81 e0       	ldi	r24, 0x01	; 1
    4012:	90 e0       	ldi	r25, 0x00	; 0
    4014:	02 2e       	mov	r0, r18
    4016:	02 c0       	rjmp	.+4      	; 0x401c <MDIO_errorStateSetPinValue+0xde>
    4018:	88 0f       	add	r24, r24
    401a:	99 1f       	adc	r25, r25
    401c:	0a 94       	dec	r0
    401e:	e2 f7       	brpl	.-8      	; 0x4018 <MDIO_errorStateSetPinValue+0xda>
    4020:	84 2b       	or	r24, r20
    4022:	8c 93       	st	X, r24
    4024:	92 c0       	rjmp	.+292    	; 0x414a <MDIO_errorStateSetPinValue+0x20c>
			case DIO_PORTD: SET_BIT(PORTD,Copy_u8pin); break;
    4026:	a2 e3       	ldi	r26, 0x32	; 50
    4028:	b0 e0       	ldi	r27, 0x00	; 0
    402a:	e2 e3       	ldi	r30, 0x32	; 50
    402c:	f0 e0       	ldi	r31, 0x00	; 0
    402e:	80 81       	ld	r24, Z
    4030:	48 2f       	mov	r20, r24
    4032:	8b 81       	ldd	r24, Y+3	; 0x03
    4034:	28 2f       	mov	r18, r24
    4036:	30 e0       	ldi	r19, 0x00	; 0
    4038:	81 e0       	ldi	r24, 0x01	; 1
    403a:	90 e0       	ldi	r25, 0x00	; 0
    403c:	02 2e       	mov	r0, r18
    403e:	02 c0       	rjmp	.+4      	; 0x4044 <MDIO_errorStateSetPinValue+0x106>
    4040:	88 0f       	add	r24, r24
    4042:	99 1f       	adc	r25, r25
    4044:	0a 94       	dec	r0
    4046:	e2 f7       	brpl	.-8      	; 0x4040 <MDIO_errorStateSetPinValue+0x102>
    4048:	84 2b       	or	r24, r20
    404a:	8c 93       	st	X, r24
    404c:	7e c0       	rjmp	.+252    	; 0x414a <MDIO_errorStateSetPinValue+0x20c>
			default: Error_state = Return_Nok; break;
    404e:	81 e0       	ldi	r24, 0x01	; 1
    4050:	89 83       	std	Y+1, r24	; 0x01
    4052:	7b c0       	rjmp	.+246    	; 0x414a <MDIO_errorStateSetPinValue+0x20c>
			}
		}
		else if(Copy_u8Mode == DIO_LOW)
    4054:	8c 81       	ldd	r24, Y+4	; 0x04
    4056:	88 23       	and	r24, r24
    4058:	09 f0       	breq	.+2      	; 0x405c <MDIO_errorStateSetPinValue+0x11e>
    405a:	77 c0       	rjmp	.+238    	; 0x414a <MDIO_errorStateSetPinValue+0x20c>
		{
			switch(Copy_u8port)
    405c:	8a 81       	ldd	r24, Y+2	; 0x02
    405e:	28 2f       	mov	r18, r24
    4060:	30 e0       	ldi	r19, 0x00	; 0
    4062:	3e 83       	std	Y+6, r19	; 0x06
    4064:	2d 83       	std	Y+5, r18	; 0x05
    4066:	8d 81       	ldd	r24, Y+5	; 0x05
    4068:	9e 81       	ldd	r25, Y+6	; 0x06
    406a:	82 30       	cpi	r24, 0x02	; 2
    406c:	91 05       	cpc	r25, r1
    406e:	61 f1       	breq	.+88     	; 0x40c8 <MDIO_errorStateSetPinValue+0x18a>
    4070:	2d 81       	ldd	r18, Y+5	; 0x05
    4072:	3e 81       	ldd	r19, Y+6	; 0x06
    4074:	23 30       	cpi	r18, 0x03	; 3
    4076:	31 05       	cpc	r19, r1
    4078:	34 f4       	brge	.+12     	; 0x4086 <MDIO_errorStateSetPinValue+0x148>
    407a:	8d 81       	ldd	r24, Y+5	; 0x05
    407c:	9e 81       	ldd	r25, Y+6	; 0x06
    407e:	81 30       	cpi	r24, 0x01	; 1
    4080:	91 05       	cpc	r25, r1
    4082:	69 f0       	breq	.+26     	; 0x409e <MDIO_errorStateSetPinValue+0x160>
    4084:	60 c0       	rjmp	.+192    	; 0x4146 <MDIO_errorStateSetPinValue+0x208>
    4086:	2d 81       	ldd	r18, Y+5	; 0x05
    4088:	3e 81       	ldd	r19, Y+6	; 0x06
    408a:	23 30       	cpi	r18, 0x03	; 3
    408c:	31 05       	cpc	r19, r1
    408e:	89 f1       	breq	.+98     	; 0x40f2 <MDIO_errorStateSetPinValue+0x1b4>
    4090:	8d 81       	ldd	r24, Y+5	; 0x05
    4092:	9e 81       	ldd	r25, Y+6	; 0x06
    4094:	84 30       	cpi	r24, 0x04	; 4
    4096:	91 05       	cpc	r25, r1
    4098:	09 f4       	brne	.+2      	; 0x409c <MDIO_errorStateSetPinValue+0x15e>
    409a:	40 c0       	rjmp	.+128    	; 0x411c <MDIO_errorStateSetPinValue+0x1de>
    409c:	54 c0       	rjmp	.+168    	; 0x4146 <MDIO_errorStateSetPinValue+0x208>
			{
			case DIO_PORTA: CLEAR_BIT(PORTA,Copy_u8pin); break;
    409e:	ab e3       	ldi	r26, 0x3B	; 59
    40a0:	b0 e0       	ldi	r27, 0x00	; 0
    40a2:	eb e3       	ldi	r30, 0x3B	; 59
    40a4:	f0 e0       	ldi	r31, 0x00	; 0
    40a6:	80 81       	ld	r24, Z
    40a8:	48 2f       	mov	r20, r24
    40aa:	8b 81       	ldd	r24, Y+3	; 0x03
    40ac:	28 2f       	mov	r18, r24
    40ae:	30 e0       	ldi	r19, 0x00	; 0
    40b0:	81 e0       	ldi	r24, 0x01	; 1
    40b2:	90 e0       	ldi	r25, 0x00	; 0
    40b4:	02 2e       	mov	r0, r18
    40b6:	02 c0       	rjmp	.+4      	; 0x40bc <MDIO_errorStateSetPinValue+0x17e>
    40b8:	88 0f       	add	r24, r24
    40ba:	99 1f       	adc	r25, r25
    40bc:	0a 94       	dec	r0
    40be:	e2 f7       	brpl	.-8      	; 0x40b8 <MDIO_errorStateSetPinValue+0x17a>
    40c0:	80 95       	com	r24
    40c2:	84 23       	and	r24, r20
    40c4:	8c 93       	st	X, r24
    40c6:	41 c0       	rjmp	.+130    	; 0x414a <MDIO_errorStateSetPinValue+0x20c>
			case DIO_PORTB: CLEAR_BIT(PORTB,Copy_u8pin); break;
    40c8:	a8 e3       	ldi	r26, 0x38	; 56
    40ca:	b0 e0       	ldi	r27, 0x00	; 0
    40cc:	e8 e3       	ldi	r30, 0x38	; 56
    40ce:	f0 e0       	ldi	r31, 0x00	; 0
    40d0:	80 81       	ld	r24, Z
    40d2:	48 2f       	mov	r20, r24
    40d4:	8b 81       	ldd	r24, Y+3	; 0x03
    40d6:	28 2f       	mov	r18, r24
    40d8:	30 e0       	ldi	r19, 0x00	; 0
    40da:	81 e0       	ldi	r24, 0x01	; 1
    40dc:	90 e0       	ldi	r25, 0x00	; 0
    40de:	02 2e       	mov	r0, r18
    40e0:	02 c0       	rjmp	.+4      	; 0x40e6 <MDIO_errorStateSetPinValue+0x1a8>
    40e2:	88 0f       	add	r24, r24
    40e4:	99 1f       	adc	r25, r25
    40e6:	0a 94       	dec	r0
    40e8:	e2 f7       	brpl	.-8      	; 0x40e2 <MDIO_errorStateSetPinValue+0x1a4>
    40ea:	80 95       	com	r24
    40ec:	84 23       	and	r24, r20
    40ee:	8c 93       	st	X, r24
    40f0:	2c c0       	rjmp	.+88     	; 0x414a <MDIO_errorStateSetPinValue+0x20c>
			case DIO_PORTC: CLEAR_BIT(PORTC,Copy_u8pin); break;
    40f2:	a5 e3       	ldi	r26, 0x35	; 53
    40f4:	b0 e0       	ldi	r27, 0x00	; 0
    40f6:	e5 e3       	ldi	r30, 0x35	; 53
    40f8:	f0 e0       	ldi	r31, 0x00	; 0
    40fa:	80 81       	ld	r24, Z
    40fc:	48 2f       	mov	r20, r24
    40fe:	8b 81       	ldd	r24, Y+3	; 0x03
    4100:	28 2f       	mov	r18, r24
    4102:	30 e0       	ldi	r19, 0x00	; 0
    4104:	81 e0       	ldi	r24, 0x01	; 1
    4106:	90 e0       	ldi	r25, 0x00	; 0
    4108:	02 2e       	mov	r0, r18
    410a:	02 c0       	rjmp	.+4      	; 0x4110 <MDIO_errorStateSetPinValue+0x1d2>
    410c:	88 0f       	add	r24, r24
    410e:	99 1f       	adc	r25, r25
    4110:	0a 94       	dec	r0
    4112:	e2 f7       	brpl	.-8      	; 0x410c <MDIO_errorStateSetPinValue+0x1ce>
    4114:	80 95       	com	r24
    4116:	84 23       	and	r24, r20
    4118:	8c 93       	st	X, r24
    411a:	17 c0       	rjmp	.+46     	; 0x414a <MDIO_errorStateSetPinValue+0x20c>
			case DIO_PORTD: CLEAR_BIT(PORTD,Copy_u8pin); break;
    411c:	a2 e3       	ldi	r26, 0x32	; 50
    411e:	b0 e0       	ldi	r27, 0x00	; 0
    4120:	e2 e3       	ldi	r30, 0x32	; 50
    4122:	f0 e0       	ldi	r31, 0x00	; 0
    4124:	80 81       	ld	r24, Z
    4126:	48 2f       	mov	r20, r24
    4128:	8b 81       	ldd	r24, Y+3	; 0x03
    412a:	28 2f       	mov	r18, r24
    412c:	30 e0       	ldi	r19, 0x00	; 0
    412e:	81 e0       	ldi	r24, 0x01	; 1
    4130:	90 e0       	ldi	r25, 0x00	; 0
    4132:	02 2e       	mov	r0, r18
    4134:	02 c0       	rjmp	.+4      	; 0x413a <MDIO_errorStateSetPinValue+0x1fc>
    4136:	88 0f       	add	r24, r24
    4138:	99 1f       	adc	r25, r25
    413a:	0a 94       	dec	r0
    413c:	e2 f7       	brpl	.-8      	; 0x4136 <MDIO_errorStateSetPinValue+0x1f8>
    413e:	80 95       	com	r24
    4140:	84 23       	and	r24, r20
    4142:	8c 93       	st	X, r24
    4144:	02 c0       	rjmp	.+4      	; 0x414a <MDIO_errorStateSetPinValue+0x20c>
			default: Error_state = Return_Nok; break;
    4146:	81 e0       	ldi	r24, 0x01	; 1
    4148:	89 83       	std	Y+1, r24	; 0x01
			}
		}

	}
	return Error_state;
    414a:	89 81       	ldd	r24, Y+1	; 0x01
}
    414c:	28 96       	adiw	r28, 0x08	; 8
    414e:	0f b6       	in	r0, 0x3f	; 63
    4150:	f8 94       	cli
    4152:	de bf       	out	0x3e, r29	; 62
    4154:	0f be       	out	0x3f, r0	; 63
    4156:	cd bf       	out	0x3d, r28	; 61
    4158:	cf 91       	pop	r28
    415a:	df 91       	pop	r29
    415c:	08 95       	ret

0000415e <MDIO_errorStateSetPortValue>:
Error_State_t MDIO_errorStateSetPortValue(u8 Copy_u8port,u8 Copy_u8Mode){
    415e:	df 93       	push	r29
    4160:	cf 93       	push	r28
    4162:	00 d0       	rcall	.+0      	; 0x4164 <MDIO_errorStateSetPortValue+0x6>
    4164:	00 d0       	rcall	.+0      	; 0x4166 <MDIO_errorStateSetPortValue+0x8>
    4166:	0f 92       	push	r0
    4168:	cd b7       	in	r28, 0x3d	; 61
    416a:	de b7       	in	r29, 0x3e	; 62
    416c:	8a 83       	std	Y+2, r24	; 0x02
    416e:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t Error_state = Return_Ok;
    4170:	19 82       	std	Y+1, r1	; 0x01
		switch(Copy_u8port)
    4172:	8a 81       	ldd	r24, Y+2	; 0x02
    4174:	28 2f       	mov	r18, r24
    4176:	30 e0       	ldi	r19, 0x00	; 0
    4178:	3d 83       	std	Y+5, r19	; 0x05
    417a:	2c 83       	std	Y+4, r18	; 0x04
    417c:	8c 81       	ldd	r24, Y+4	; 0x04
    417e:	9d 81       	ldd	r25, Y+5	; 0x05
    4180:	82 30       	cpi	r24, 0x02	; 2
    4182:	91 05       	cpc	r25, r1
    4184:	d9 f0       	breq	.+54     	; 0x41bc <MDIO_errorStateSetPortValue+0x5e>
    4186:	2c 81       	ldd	r18, Y+4	; 0x04
    4188:	3d 81       	ldd	r19, Y+5	; 0x05
    418a:	23 30       	cpi	r18, 0x03	; 3
    418c:	31 05       	cpc	r19, r1
    418e:	34 f4       	brge	.+12     	; 0x419c <MDIO_errorStateSetPortValue+0x3e>
    4190:	8c 81       	ldd	r24, Y+4	; 0x04
    4192:	9d 81       	ldd	r25, Y+5	; 0x05
    4194:	81 30       	cpi	r24, 0x01	; 1
    4196:	91 05       	cpc	r25, r1
    4198:	61 f0       	breq	.+24     	; 0x41b2 <MDIO_errorStateSetPortValue+0x54>
    419a:	1f c0       	rjmp	.+62     	; 0x41da <MDIO_errorStateSetPortValue+0x7c>
    419c:	2c 81       	ldd	r18, Y+4	; 0x04
    419e:	3d 81       	ldd	r19, Y+5	; 0x05
    41a0:	23 30       	cpi	r18, 0x03	; 3
    41a2:	31 05       	cpc	r19, r1
    41a4:	81 f0       	breq	.+32     	; 0x41c6 <MDIO_errorStateSetPortValue+0x68>
    41a6:	8c 81       	ldd	r24, Y+4	; 0x04
    41a8:	9d 81       	ldd	r25, Y+5	; 0x05
    41aa:	84 30       	cpi	r24, 0x04	; 4
    41ac:	91 05       	cpc	r25, r1
    41ae:	81 f0       	breq	.+32     	; 0x41d0 <MDIO_errorStateSetPortValue+0x72>
    41b0:	14 c0       	rjmp	.+40     	; 0x41da <MDIO_errorStateSetPortValue+0x7c>
		{
		case DIO_PORTA: PORTA = Copy_u8Mode; break;
    41b2:	eb e3       	ldi	r30, 0x3B	; 59
    41b4:	f0 e0       	ldi	r31, 0x00	; 0
    41b6:	8b 81       	ldd	r24, Y+3	; 0x03
    41b8:	80 83       	st	Z, r24
    41ba:	11 c0       	rjmp	.+34     	; 0x41de <MDIO_errorStateSetPortValue+0x80>
		case DIO_PORTB: PORTB = Copy_u8Mode; break;
    41bc:	e8 e3       	ldi	r30, 0x38	; 56
    41be:	f0 e0       	ldi	r31, 0x00	; 0
    41c0:	8b 81       	ldd	r24, Y+3	; 0x03
    41c2:	80 83       	st	Z, r24
    41c4:	0c c0       	rjmp	.+24     	; 0x41de <MDIO_errorStateSetPortValue+0x80>
		case DIO_PORTC: PORTC = Copy_u8Mode; break;
    41c6:	e5 e3       	ldi	r30, 0x35	; 53
    41c8:	f0 e0       	ldi	r31, 0x00	; 0
    41ca:	8b 81       	ldd	r24, Y+3	; 0x03
    41cc:	80 83       	st	Z, r24
    41ce:	07 c0       	rjmp	.+14     	; 0x41de <MDIO_errorStateSetPortValue+0x80>
		case DIO_PORTD: PORTD = Copy_u8Mode; break;
    41d0:	e2 e3       	ldi	r30, 0x32	; 50
    41d2:	f0 e0       	ldi	r31, 0x00	; 0
    41d4:	8b 81       	ldd	r24, Y+3	; 0x03
    41d6:	80 83       	st	Z, r24
    41d8:	02 c0       	rjmp	.+4      	; 0x41de <MDIO_errorStateSetPortValue+0x80>
		default: Error_state = Return_Nok; break;
    41da:	81 e0       	ldi	r24, 0x01	; 1
    41dc:	89 83       	std	Y+1, r24	; 0x01
		}

	return Error_state;
    41de:	89 81       	ldd	r24, Y+1	; 0x01
}
    41e0:	0f 90       	pop	r0
    41e2:	0f 90       	pop	r0
    41e4:	0f 90       	pop	r0
    41e6:	0f 90       	pop	r0
    41e8:	0f 90       	pop	r0
    41ea:	cf 91       	pop	r28
    41ec:	df 91       	pop	r29
    41ee:	08 95       	ret

000041f0 <MDIO_errorStateGetPinValue>:
Error_State_t MDIO_errorStateGetPinValue(u8 Copy_u8port,u8 Copy_u8pin,u8 *P_u8Value){
    41f0:	df 93       	push	r29
    41f2:	cf 93       	push	r28
    41f4:	cd b7       	in	r28, 0x3d	; 61
    41f6:	de b7       	in	r29, 0x3e	; 62
    41f8:	27 97       	sbiw	r28, 0x07	; 7
    41fa:	0f b6       	in	r0, 0x3f	; 63
    41fc:	f8 94       	cli
    41fe:	de bf       	out	0x3e, r29	; 62
    4200:	0f be       	out	0x3f, r0	; 63
    4202:	cd bf       	out	0x3d, r28	; 61
    4204:	8a 83       	std	Y+2, r24	; 0x02
    4206:	6b 83       	std	Y+3, r22	; 0x03
    4208:	5d 83       	std	Y+5, r21	; 0x05
    420a:	4c 83       	std	Y+4, r20	; 0x04
	Error_State_t Error_state = Return_Ok;
    420c:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8pin > MAX_PINS ){
    420e:	8b 81       	ldd	r24, Y+3	; 0x03
    4210:	88 30       	cpi	r24, 0x08	; 8
    4212:	18 f0       	brcs	.+6      	; 0x421a <MDIO_errorStateGetPinValue+0x2a>
		Error_state = Return_Nok;
    4214:	81 e0       	ldi	r24, 0x01	; 1
    4216:	89 83       	std	Y+1, r24	; 0x01
    4218:	73 c0       	rjmp	.+230    	; 0x4300 <MDIO_errorStateGetPinValue+0x110>
	}
	else{
		switch(Copy_u8port)
    421a:	8a 81       	ldd	r24, Y+2	; 0x02
    421c:	28 2f       	mov	r18, r24
    421e:	30 e0       	ldi	r19, 0x00	; 0
    4220:	3f 83       	std	Y+7, r19	; 0x07
    4222:	2e 83       	std	Y+6, r18	; 0x06
    4224:	4e 81       	ldd	r20, Y+6	; 0x06
    4226:	5f 81       	ldd	r21, Y+7	; 0x07
    4228:	42 30       	cpi	r20, 0x02	; 2
    422a:	51 05       	cpc	r21, r1
    422c:	59 f1       	breq	.+86     	; 0x4284 <MDIO_errorStateGetPinValue+0x94>
    422e:	8e 81       	ldd	r24, Y+6	; 0x06
    4230:	9f 81       	ldd	r25, Y+7	; 0x07
    4232:	83 30       	cpi	r24, 0x03	; 3
    4234:	91 05       	cpc	r25, r1
    4236:	34 f4       	brge	.+12     	; 0x4244 <MDIO_errorStateGetPinValue+0x54>
    4238:	2e 81       	ldd	r18, Y+6	; 0x06
    423a:	3f 81       	ldd	r19, Y+7	; 0x07
    423c:	21 30       	cpi	r18, 0x01	; 1
    423e:	31 05       	cpc	r19, r1
    4240:	69 f0       	breq	.+26     	; 0x425c <MDIO_errorStateGetPinValue+0x6c>
    4242:	5c c0       	rjmp	.+184    	; 0x42fc <MDIO_errorStateGetPinValue+0x10c>
    4244:	4e 81       	ldd	r20, Y+6	; 0x06
    4246:	5f 81       	ldd	r21, Y+7	; 0x07
    4248:	43 30       	cpi	r20, 0x03	; 3
    424a:	51 05       	cpc	r21, r1
    424c:	79 f1       	breq	.+94     	; 0x42ac <MDIO_errorStateGetPinValue+0xbc>
    424e:	8e 81       	ldd	r24, Y+6	; 0x06
    4250:	9f 81       	ldd	r25, Y+7	; 0x07
    4252:	84 30       	cpi	r24, 0x04	; 4
    4254:	91 05       	cpc	r25, r1
    4256:	09 f4       	brne	.+2      	; 0x425a <MDIO_errorStateGetPinValue+0x6a>
    4258:	3d c0       	rjmp	.+122    	; 0x42d4 <MDIO_errorStateGetPinValue+0xe4>
    425a:	50 c0       	rjmp	.+160    	; 0x42fc <MDIO_errorStateGetPinValue+0x10c>
		{
		case DIO_PORTA: *P_u8Value = GET_BIT(PINA,Copy_u8pin); break;
    425c:	e9 e3       	ldi	r30, 0x39	; 57
    425e:	f0 e0       	ldi	r31, 0x00	; 0
    4260:	80 81       	ld	r24, Z
    4262:	28 2f       	mov	r18, r24
    4264:	30 e0       	ldi	r19, 0x00	; 0
    4266:	8b 81       	ldd	r24, Y+3	; 0x03
    4268:	88 2f       	mov	r24, r24
    426a:	90 e0       	ldi	r25, 0x00	; 0
    426c:	a9 01       	movw	r20, r18
    426e:	02 c0       	rjmp	.+4      	; 0x4274 <MDIO_errorStateGetPinValue+0x84>
    4270:	55 95       	asr	r21
    4272:	47 95       	ror	r20
    4274:	8a 95       	dec	r24
    4276:	e2 f7       	brpl	.-8      	; 0x4270 <MDIO_errorStateGetPinValue+0x80>
    4278:	ca 01       	movw	r24, r20
    427a:	81 70       	andi	r24, 0x01	; 1
    427c:	ec 81       	ldd	r30, Y+4	; 0x04
    427e:	fd 81       	ldd	r31, Y+5	; 0x05
    4280:	80 83       	st	Z, r24
    4282:	3e c0       	rjmp	.+124    	; 0x4300 <MDIO_errorStateGetPinValue+0x110>
		case DIO_PORTB: *P_u8Value = GET_BIT(PINB,Copy_u8pin); break;
    4284:	e6 e3       	ldi	r30, 0x36	; 54
    4286:	f0 e0       	ldi	r31, 0x00	; 0
    4288:	80 81       	ld	r24, Z
    428a:	28 2f       	mov	r18, r24
    428c:	30 e0       	ldi	r19, 0x00	; 0
    428e:	8b 81       	ldd	r24, Y+3	; 0x03
    4290:	88 2f       	mov	r24, r24
    4292:	90 e0       	ldi	r25, 0x00	; 0
    4294:	a9 01       	movw	r20, r18
    4296:	02 c0       	rjmp	.+4      	; 0x429c <MDIO_errorStateGetPinValue+0xac>
    4298:	55 95       	asr	r21
    429a:	47 95       	ror	r20
    429c:	8a 95       	dec	r24
    429e:	e2 f7       	brpl	.-8      	; 0x4298 <MDIO_errorStateGetPinValue+0xa8>
    42a0:	ca 01       	movw	r24, r20
    42a2:	81 70       	andi	r24, 0x01	; 1
    42a4:	ec 81       	ldd	r30, Y+4	; 0x04
    42a6:	fd 81       	ldd	r31, Y+5	; 0x05
    42a8:	80 83       	st	Z, r24
    42aa:	2a c0       	rjmp	.+84     	; 0x4300 <MDIO_errorStateGetPinValue+0x110>
		case DIO_PORTC: *P_u8Value = GET_BIT(PINC,Copy_u8pin); break;
    42ac:	e3 e3       	ldi	r30, 0x33	; 51
    42ae:	f0 e0       	ldi	r31, 0x00	; 0
    42b0:	80 81       	ld	r24, Z
    42b2:	28 2f       	mov	r18, r24
    42b4:	30 e0       	ldi	r19, 0x00	; 0
    42b6:	8b 81       	ldd	r24, Y+3	; 0x03
    42b8:	88 2f       	mov	r24, r24
    42ba:	90 e0       	ldi	r25, 0x00	; 0
    42bc:	a9 01       	movw	r20, r18
    42be:	02 c0       	rjmp	.+4      	; 0x42c4 <MDIO_errorStateGetPinValue+0xd4>
    42c0:	55 95       	asr	r21
    42c2:	47 95       	ror	r20
    42c4:	8a 95       	dec	r24
    42c6:	e2 f7       	brpl	.-8      	; 0x42c0 <MDIO_errorStateGetPinValue+0xd0>
    42c8:	ca 01       	movw	r24, r20
    42ca:	81 70       	andi	r24, 0x01	; 1
    42cc:	ec 81       	ldd	r30, Y+4	; 0x04
    42ce:	fd 81       	ldd	r31, Y+5	; 0x05
    42d0:	80 83       	st	Z, r24
    42d2:	16 c0       	rjmp	.+44     	; 0x4300 <MDIO_errorStateGetPinValue+0x110>
		case DIO_PORTD: *P_u8Value = GET_BIT(PIND,Copy_u8pin); break;
    42d4:	e0 e3       	ldi	r30, 0x30	; 48
    42d6:	f0 e0       	ldi	r31, 0x00	; 0
    42d8:	80 81       	ld	r24, Z
    42da:	28 2f       	mov	r18, r24
    42dc:	30 e0       	ldi	r19, 0x00	; 0
    42de:	8b 81       	ldd	r24, Y+3	; 0x03
    42e0:	88 2f       	mov	r24, r24
    42e2:	90 e0       	ldi	r25, 0x00	; 0
    42e4:	a9 01       	movw	r20, r18
    42e6:	02 c0       	rjmp	.+4      	; 0x42ec <MDIO_errorStateGetPinValue+0xfc>
    42e8:	55 95       	asr	r21
    42ea:	47 95       	ror	r20
    42ec:	8a 95       	dec	r24
    42ee:	e2 f7       	brpl	.-8      	; 0x42e8 <MDIO_errorStateGetPinValue+0xf8>
    42f0:	ca 01       	movw	r24, r20
    42f2:	81 70       	andi	r24, 0x01	; 1
    42f4:	ec 81       	ldd	r30, Y+4	; 0x04
    42f6:	fd 81       	ldd	r31, Y+5	; 0x05
    42f8:	80 83       	st	Z, r24
    42fa:	02 c0       	rjmp	.+4      	; 0x4300 <MDIO_errorStateGetPinValue+0x110>
		default: Error_state = Return_NullPointer ; break;
    42fc:	82 e0       	ldi	r24, 0x02	; 2
    42fe:	89 83       	std	Y+1, r24	; 0x01
		}
	}
	return Error_state;
    4300:	89 81       	ldd	r24, Y+1	; 0x01
}
    4302:	27 96       	adiw	r28, 0x07	; 7
    4304:	0f b6       	in	r0, 0x3f	; 63
    4306:	f8 94       	cli
    4308:	de bf       	out	0x3e, r29	; 62
    430a:	0f be       	out	0x3f, r0	; 63
    430c:	cd bf       	out	0x3d, r28	; 61
    430e:	cf 91       	pop	r28
    4310:	df 91       	pop	r29
    4312:	08 95       	ret

00004314 <MDIO_errorStateGetPortValue>:
Error_State_t MDIO_errorStateGetPortValue(u8 Copy_u8port,u8 *P_u8Value){
    4314:	df 93       	push	r29
    4316:	cf 93       	push	r28
    4318:	00 d0       	rcall	.+0      	; 0x431a <MDIO_errorStateGetPortValue+0x6>
    431a:	00 d0       	rcall	.+0      	; 0x431c <MDIO_errorStateGetPortValue+0x8>
    431c:	00 d0       	rcall	.+0      	; 0x431e <MDIO_errorStateGetPortValue+0xa>
    431e:	cd b7       	in	r28, 0x3d	; 61
    4320:	de b7       	in	r29, 0x3e	; 62
    4322:	8a 83       	std	Y+2, r24	; 0x02
    4324:	7c 83       	std	Y+4, r23	; 0x04
    4326:	6b 83       	std	Y+3, r22	; 0x03
	Error_State_t Error_state = Return_Ok;
    4328:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8port)
    432a:	8a 81       	ldd	r24, Y+2	; 0x02
    432c:	28 2f       	mov	r18, r24
    432e:	30 e0       	ldi	r19, 0x00	; 0
    4330:	3e 83       	std	Y+6, r19	; 0x06
    4332:	2d 83       	std	Y+5, r18	; 0x05
    4334:	8d 81       	ldd	r24, Y+5	; 0x05
    4336:	9e 81       	ldd	r25, Y+6	; 0x06
    4338:	82 30       	cpi	r24, 0x02	; 2
    433a:	91 05       	cpc	r25, r1
    433c:	e9 f0       	breq	.+58     	; 0x4378 <MDIO_errorStateGetPortValue+0x64>
    433e:	2d 81       	ldd	r18, Y+5	; 0x05
    4340:	3e 81       	ldd	r19, Y+6	; 0x06
    4342:	23 30       	cpi	r18, 0x03	; 3
    4344:	31 05       	cpc	r19, r1
    4346:	34 f4       	brge	.+12     	; 0x4354 <MDIO_errorStateGetPortValue+0x40>
    4348:	8d 81       	ldd	r24, Y+5	; 0x05
    434a:	9e 81       	ldd	r25, Y+6	; 0x06
    434c:	81 30       	cpi	r24, 0x01	; 1
    434e:	91 05       	cpc	r25, r1
    4350:	61 f0       	breq	.+24     	; 0x436a <MDIO_errorStateGetPortValue+0x56>
    4352:	27 c0       	rjmp	.+78     	; 0x43a2 <MDIO_errorStateGetPortValue+0x8e>
    4354:	2d 81       	ldd	r18, Y+5	; 0x05
    4356:	3e 81       	ldd	r19, Y+6	; 0x06
    4358:	23 30       	cpi	r18, 0x03	; 3
    435a:	31 05       	cpc	r19, r1
    435c:	a1 f0       	breq	.+40     	; 0x4386 <MDIO_errorStateGetPortValue+0x72>
    435e:	8d 81       	ldd	r24, Y+5	; 0x05
    4360:	9e 81       	ldd	r25, Y+6	; 0x06
    4362:	84 30       	cpi	r24, 0x04	; 4
    4364:	91 05       	cpc	r25, r1
    4366:	b1 f0       	breq	.+44     	; 0x4394 <MDIO_errorStateGetPortValue+0x80>
    4368:	1c c0       	rjmp	.+56     	; 0x43a2 <MDIO_errorStateGetPortValue+0x8e>
	{
	case DIO_PORTA: *P_u8Value = PINA; break;
    436a:	e9 e3       	ldi	r30, 0x39	; 57
    436c:	f0 e0       	ldi	r31, 0x00	; 0
    436e:	80 81       	ld	r24, Z
    4370:	eb 81       	ldd	r30, Y+3	; 0x03
    4372:	fc 81       	ldd	r31, Y+4	; 0x04
    4374:	80 83       	st	Z, r24
    4376:	17 c0       	rjmp	.+46     	; 0x43a6 <MDIO_errorStateGetPortValue+0x92>
	case DIO_PORTB: *P_u8Value = PINB; break;
    4378:	e6 e3       	ldi	r30, 0x36	; 54
    437a:	f0 e0       	ldi	r31, 0x00	; 0
    437c:	80 81       	ld	r24, Z
    437e:	eb 81       	ldd	r30, Y+3	; 0x03
    4380:	fc 81       	ldd	r31, Y+4	; 0x04
    4382:	80 83       	st	Z, r24
    4384:	10 c0       	rjmp	.+32     	; 0x43a6 <MDIO_errorStateGetPortValue+0x92>
	case DIO_PORTC: *P_u8Value = PINC; break;
    4386:	e3 e3       	ldi	r30, 0x33	; 51
    4388:	f0 e0       	ldi	r31, 0x00	; 0
    438a:	80 81       	ld	r24, Z
    438c:	eb 81       	ldd	r30, Y+3	; 0x03
    438e:	fc 81       	ldd	r31, Y+4	; 0x04
    4390:	80 83       	st	Z, r24
    4392:	09 c0       	rjmp	.+18     	; 0x43a6 <MDIO_errorStateGetPortValue+0x92>
	case DIO_PORTD: *P_u8Value = PIND; break;
    4394:	e0 e3       	ldi	r30, 0x30	; 48
    4396:	f0 e0       	ldi	r31, 0x00	; 0
    4398:	80 81       	ld	r24, Z
    439a:	eb 81       	ldd	r30, Y+3	; 0x03
    439c:	fc 81       	ldd	r31, Y+4	; 0x04
    439e:	80 83       	st	Z, r24
    43a0:	02 c0       	rjmp	.+4      	; 0x43a6 <MDIO_errorStateGetPortValue+0x92>
	default: Error_state = Return_NullPointer ; break;
    43a2:	82 e0       	ldi	r24, 0x02	; 2
    43a4:	89 83       	std	Y+1, r24	; 0x01
	}
	return Error_state;
    43a6:	89 81       	ldd	r24, Y+1	; 0x01
}
    43a8:	26 96       	adiw	r28, 0x06	; 6
    43aa:	0f b6       	in	r0, 0x3f	; 63
    43ac:	f8 94       	cli
    43ae:	de bf       	out	0x3e, r29	; 62
    43b0:	0f be       	out	0x3f, r0	; 63
    43b2:	cd bf       	out	0x3d, r28	; 61
    43b4:	cf 91       	pop	r28
    43b6:	df 91       	pop	r29
    43b8:	08 95       	ret

000043ba <MGIE_voidEnable>:
#include "mgie_register.h"
#include "mgie_config.h"
#include "mgie_private.h"


void MGIE_voidEnable(void){
    43ba:	df 93       	push	r29
    43bc:	cf 93       	push	r28
    43be:	cd b7       	in	r28, 0x3d	; 61
    43c0:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,SREG_I);
    43c2:	af e5       	ldi	r26, 0x5F	; 95
    43c4:	b0 e0       	ldi	r27, 0x00	; 0
    43c6:	ef e5       	ldi	r30, 0x5F	; 95
    43c8:	f0 e0       	ldi	r31, 0x00	; 0
    43ca:	80 81       	ld	r24, Z
    43cc:	80 68       	ori	r24, 0x80	; 128
    43ce:	8c 93       	st	X, r24
}
    43d0:	cf 91       	pop	r28
    43d2:	df 91       	pop	r29
    43d4:	08 95       	ret

000043d6 <MGIE_voidDisable>:
void MGIE_voidDisable(void){
    43d6:	df 93       	push	r29
    43d8:	cf 93       	push	r28
    43da:	cd b7       	in	r28, 0x3d	; 61
    43dc:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(SREG,SREG_I);
    43de:	af e5       	ldi	r26, 0x5F	; 95
    43e0:	b0 e0       	ldi	r27, 0x00	; 0
    43e2:	ef e5       	ldi	r30, 0x5F	; 95
    43e4:	f0 e0       	ldi	r31, 0x00	; 0
    43e6:	80 81       	ld	r24, Z
    43e8:	8f 77       	andi	r24, 0x7F	; 127
    43ea:	8c 93       	st	X, r24
}
    43ec:	cf 91       	pop	r28
    43ee:	df 91       	pop	r29
    43f0:	08 95       	ret

000043f2 <__mulsi3>:
    43f2:	62 9f       	mul	r22, r18
    43f4:	d0 01       	movw	r26, r0
    43f6:	73 9f       	mul	r23, r19
    43f8:	f0 01       	movw	r30, r0
    43fa:	82 9f       	mul	r24, r18
    43fc:	e0 0d       	add	r30, r0
    43fe:	f1 1d       	adc	r31, r1
    4400:	64 9f       	mul	r22, r20
    4402:	e0 0d       	add	r30, r0
    4404:	f1 1d       	adc	r31, r1
    4406:	92 9f       	mul	r25, r18
    4408:	f0 0d       	add	r31, r0
    440a:	83 9f       	mul	r24, r19
    440c:	f0 0d       	add	r31, r0
    440e:	74 9f       	mul	r23, r20
    4410:	f0 0d       	add	r31, r0
    4412:	65 9f       	mul	r22, r21
    4414:	f0 0d       	add	r31, r0
    4416:	99 27       	eor	r25, r25
    4418:	72 9f       	mul	r23, r18
    441a:	b0 0d       	add	r27, r0
    441c:	e1 1d       	adc	r30, r1
    441e:	f9 1f       	adc	r31, r25
    4420:	63 9f       	mul	r22, r19
    4422:	b0 0d       	add	r27, r0
    4424:	e1 1d       	adc	r30, r1
    4426:	f9 1f       	adc	r31, r25
    4428:	bd 01       	movw	r22, r26
    442a:	cf 01       	movw	r24, r30
    442c:	11 24       	eor	r1, r1
    442e:	08 95       	ret

00004430 <__udivmodsi4>:
    4430:	a1 e2       	ldi	r26, 0x21	; 33
    4432:	1a 2e       	mov	r1, r26
    4434:	aa 1b       	sub	r26, r26
    4436:	bb 1b       	sub	r27, r27
    4438:	fd 01       	movw	r30, r26
    443a:	0d c0       	rjmp	.+26     	; 0x4456 <__udivmodsi4_ep>

0000443c <__udivmodsi4_loop>:
    443c:	aa 1f       	adc	r26, r26
    443e:	bb 1f       	adc	r27, r27
    4440:	ee 1f       	adc	r30, r30
    4442:	ff 1f       	adc	r31, r31
    4444:	a2 17       	cp	r26, r18
    4446:	b3 07       	cpc	r27, r19
    4448:	e4 07       	cpc	r30, r20
    444a:	f5 07       	cpc	r31, r21
    444c:	20 f0       	brcs	.+8      	; 0x4456 <__udivmodsi4_ep>
    444e:	a2 1b       	sub	r26, r18
    4450:	b3 0b       	sbc	r27, r19
    4452:	e4 0b       	sbc	r30, r20
    4454:	f5 0b       	sbc	r31, r21

00004456 <__udivmodsi4_ep>:
    4456:	66 1f       	adc	r22, r22
    4458:	77 1f       	adc	r23, r23
    445a:	88 1f       	adc	r24, r24
    445c:	99 1f       	adc	r25, r25
    445e:	1a 94       	dec	r1
    4460:	69 f7       	brne	.-38     	; 0x443c <__udivmodsi4_loop>
    4462:	60 95       	com	r22
    4464:	70 95       	com	r23
    4466:	80 95       	com	r24
    4468:	90 95       	com	r25
    446a:	9b 01       	movw	r18, r22
    446c:	ac 01       	movw	r20, r24
    446e:	bd 01       	movw	r22, r26
    4470:	cf 01       	movw	r24, r30
    4472:	08 95       	ret

00004474 <__prologue_saves__>:
    4474:	2f 92       	push	r2
    4476:	3f 92       	push	r3
    4478:	4f 92       	push	r4
    447a:	5f 92       	push	r5
    447c:	6f 92       	push	r6
    447e:	7f 92       	push	r7
    4480:	8f 92       	push	r8
    4482:	9f 92       	push	r9
    4484:	af 92       	push	r10
    4486:	bf 92       	push	r11
    4488:	cf 92       	push	r12
    448a:	df 92       	push	r13
    448c:	ef 92       	push	r14
    448e:	ff 92       	push	r15
    4490:	0f 93       	push	r16
    4492:	1f 93       	push	r17
    4494:	cf 93       	push	r28
    4496:	df 93       	push	r29
    4498:	cd b7       	in	r28, 0x3d	; 61
    449a:	de b7       	in	r29, 0x3e	; 62
    449c:	ca 1b       	sub	r28, r26
    449e:	db 0b       	sbc	r29, r27
    44a0:	0f b6       	in	r0, 0x3f	; 63
    44a2:	f8 94       	cli
    44a4:	de bf       	out	0x3e, r29	; 62
    44a6:	0f be       	out	0x3f, r0	; 63
    44a8:	cd bf       	out	0x3d, r28	; 61
    44aa:	09 94       	ijmp

000044ac <__epilogue_restores__>:
    44ac:	2a 88       	ldd	r2, Y+18	; 0x12
    44ae:	39 88       	ldd	r3, Y+17	; 0x11
    44b0:	48 88       	ldd	r4, Y+16	; 0x10
    44b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    44b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    44b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    44b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    44ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    44bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    44be:	b9 84       	ldd	r11, Y+9	; 0x09
    44c0:	c8 84       	ldd	r12, Y+8	; 0x08
    44c2:	df 80       	ldd	r13, Y+7	; 0x07
    44c4:	ee 80       	ldd	r14, Y+6	; 0x06
    44c6:	fd 80       	ldd	r15, Y+5	; 0x05
    44c8:	0c 81       	ldd	r16, Y+4	; 0x04
    44ca:	1b 81       	ldd	r17, Y+3	; 0x03
    44cc:	aa 81       	ldd	r26, Y+2	; 0x02
    44ce:	b9 81       	ldd	r27, Y+1	; 0x01
    44d0:	ce 0f       	add	r28, r30
    44d2:	d1 1d       	adc	r29, r1
    44d4:	0f b6       	in	r0, 0x3f	; 63
    44d6:	f8 94       	cli
    44d8:	de bf       	out	0x3e, r29	; 62
    44da:	0f be       	out	0x3f, r0	; 63
    44dc:	cd bf       	out	0x3d, r28	; 61
    44de:	ed 01       	movw	r28, r26
    44e0:	08 95       	ret

000044e2 <itoa>:
    44e2:	fb 01       	movw	r30, r22
    44e4:	9f 01       	movw	r18, r30
    44e6:	e8 94       	clt
    44e8:	42 30       	cpi	r20, 0x02	; 2
    44ea:	c4 f0       	brlt	.+48     	; 0x451c <itoa+0x3a>
    44ec:	45 32       	cpi	r20, 0x25	; 37
    44ee:	b4 f4       	brge	.+44     	; 0x451c <itoa+0x3a>
    44f0:	4a 30       	cpi	r20, 0x0A	; 10
    44f2:	29 f4       	brne	.+10     	; 0x44fe <itoa+0x1c>
    44f4:	97 fb       	bst	r25, 7
    44f6:	1e f4       	brtc	.+6      	; 0x44fe <itoa+0x1c>
    44f8:	90 95       	com	r25
    44fa:	81 95       	neg	r24
    44fc:	9f 4f       	sbci	r25, 0xFF	; 255
    44fe:	64 2f       	mov	r22, r20
    4500:	77 27       	eor	r23, r23
    4502:	0e 94 a2 22 	call	0x4544	; 0x4544 <__udivmodhi4>
    4506:	80 5d       	subi	r24, 0xD0	; 208
    4508:	8a 33       	cpi	r24, 0x3A	; 58
    450a:	0c f0       	brlt	.+2      	; 0x450e <itoa+0x2c>
    450c:	89 5d       	subi	r24, 0xD9	; 217
    450e:	81 93       	st	Z+, r24
    4510:	cb 01       	movw	r24, r22
    4512:	00 97       	sbiw	r24, 0x00	; 0
    4514:	a1 f7       	brne	.-24     	; 0x44fe <itoa+0x1c>
    4516:	16 f4       	brtc	.+4      	; 0x451c <itoa+0x3a>
    4518:	5d e2       	ldi	r21, 0x2D	; 45
    451a:	51 93       	st	Z+, r21
    451c:	10 82       	st	Z, r1
    451e:	c9 01       	movw	r24, r18
    4520:	0c 94 92 22 	jmp	0x4524	; 0x4524 <strrev>

00004524 <strrev>:
    4524:	dc 01       	movw	r26, r24
    4526:	fc 01       	movw	r30, r24
    4528:	67 2f       	mov	r22, r23
    452a:	71 91       	ld	r23, Z+
    452c:	77 23       	and	r23, r23
    452e:	e1 f7       	brne	.-8      	; 0x4528 <strrev+0x4>
    4530:	32 97       	sbiw	r30, 0x02	; 2
    4532:	04 c0       	rjmp	.+8      	; 0x453c <strrev+0x18>
    4534:	7c 91       	ld	r23, X
    4536:	6d 93       	st	X+, r22
    4538:	70 83       	st	Z, r23
    453a:	62 91       	ld	r22, -Z
    453c:	ae 17       	cp	r26, r30
    453e:	bf 07       	cpc	r27, r31
    4540:	c8 f3       	brcs	.-14     	; 0x4534 <strrev+0x10>
    4542:	08 95       	ret

00004544 <__udivmodhi4>:
    4544:	aa 1b       	sub	r26, r26
    4546:	bb 1b       	sub	r27, r27
    4548:	51 e1       	ldi	r21, 0x11	; 17
    454a:	07 c0       	rjmp	.+14     	; 0x455a <__udivmodhi4_ep>

0000454c <__udivmodhi4_loop>:
    454c:	aa 1f       	adc	r26, r26
    454e:	bb 1f       	adc	r27, r27
    4550:	a6 17       	cp	r26, r22
    4552:	b7 07       	cpc	r27, r23
    4554:	10 f0       	brcs	.+4      	; 0x455a <__udivmodhi4_ep>
    4556:	a6 1b       	sub	r26, r22
    4558:	b7 0b       	sbc	r27, r23

0000455a <__udivmodhi4_ep>:
    455a:	88 1f       	adc	r24, r24
    455c:	99 1f       	adc	r25, r25
    455e:	5a 95       	dec	r21
    4560:	a9 f7       	brne	.-22     	; 0x454c <__udivmodhi4_loop>
    4562:	80 95       	com	r24
    4564:	90 95       	com	r25
    4566:	bc 01       	movw	r22, r24
    4568:	cd 01       	movw	r24, r26
    456a:	08 95       	ret

0000456c <_exit>:
    456c:	f8 94       	cli

0000456e <__stop_program>:
    456e:	ff cf       	rjmp	.-2      	; 0x456e <__stop_program>
